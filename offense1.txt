Inspecting 101 files
C..CWCCWWCCCC.CCCCCC..C.CCCCCCCCCCCCCCCCCC..CCCCCCCCCCCCCCCCC.CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC...

Offenses:

Gemfile:43:1: C: [Correctable] Layout/EmptyLines: Extra blank line detected.
Gemfile:58:1: C: [Correctable] Layout/EmptyLines: Extra blank line detected.
Gemfile:72:3: C: [Correctable] Bundler/OrderedGems: Gems should be sorted in an alphabetical order within their section of the Gemfile. Gem byebug should appear before debug.
  gem "byebug", platforms: [:mri, :mingw, :x64_mingw]
  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Gemfile:72:7: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  gem "byebug", platforms: [:mri, :mingw, :x64_mingw]
      ^^^^^^^^
Gemfile:72:28: C: [Correctable] Style/SymbolArray: Use %i or %I for an array of symbols.
  gem "byebug", platforms: [:mri, :mingw, :x64_mingw]
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^
Gemfile:74:7: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  gem "simplecov", :require => false
      ^^^^^^^^^^^
Gemfile:74:20: C: [Correctable] Style/HashSyntax: Use the new Ruby 1.9 hash syntax.
  gem "simplecov", :require => false
                   ^^^^^^^^^^^
Gemfile:75:3: C: [Correctable] Bundler/OrderedGems: Gems should be sorted in an alphabetical order within their section of the Gemfile. Gem rubocop-performance should appear before simplecov.
  gem 'rubocop-performance'
  ^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/admins/omniauth_callbacks_controller.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
class Admins::OmniauthCallbacksController < Devise::OmniauthCallbacksController
^
app/controllers/admins/omniauth_callbacks_controller.rb:2:1: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
    def google_oauth2
^^^^
app/controllers/admins/omniauth_callbacks_controller.rb:3:33: C: [Correctable] Layout/ExtraSpacing: Unnecessary spacing detected.
      admin = Admin.from_google(  email: from_google_params[:email],
                                ^
app/controllers/admins/omniauth_callbacks_controller.rb:3:33: C: [Correctable] Layout/SpaceInsideParens: Space inside parentheses detected.
      admin = Admin.from_google(  email: from_google_params[:email],
                                ^^
app/controllers/admins/omniauth_callbacks_controller.rb:4:9: C: [Correctable] Layout/ArgumentAlignment: Align the arguments of a method call if they span more than one line.
        full_name: from_google_params[:full_name],
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/admins/omniauth_callbacks_controller.rb:4:9: C: [Correctable] Layout/HashAlignment: Align the keys of a hash literal if they span more than one line.
        full_name: from_google_params[:full_name],
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/admins/omniauth_callbacks_controller.rb:5:9: C: [Correctable] Layout/ArgumentAlignment: Align the arguments of a method call if they span more than one line.
        uid: from_google_params[:uid],
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/admins/omniauth_callbacks_controller.rb:5:9: C: [Correctable] Layout/HashAlignment: Align the keys of a hash literal if they span more than one line.
        uid: from_google_params[:uid],
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/admins/omniauth_callbacks_controller.rb:6:9: C: [Correctable] Layout/ArgumentAlignment: Align the arguments of a method call if they span more than one line.
        avatar_url: from_google_params[:avatar_url])
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/admins/omniauth_callbacks_controller.rb:6:9: C: [Correctable] Layout/HashAlignment: Align the keys of a hash literal if they span more than one line.
        avatar_url: from_google_params[:avatar_url])
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/admins/omniauth_callbacks_controller.rb:6:52: C: [Correctable] Layout/MultilineMethodCallBraceLayout: Closing method call brace must be on the line after the last argument.
        avatar_url: from_google_params[:avatar_url])
                                                   ^
app/controllers/admins/omniauth_callbacks_controller.rb:7:1: C: [Correctable] Layout/TrailingWhitespace: Trailing whitespace detected.
app/controllers/admins/omniauth_callbacks_controller.rb:10:27: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        flash[:success] = t 'devise.omniauth_callbacks.success', kind: 'Google'
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/admins/omniauth_callbacks_controller.rb:11:9: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        sign_in_and_redirect admin, event: :authentication
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/admins/omniauth_callbacks_controller.rb:13:25: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        flash[:alert] = t 'devise.omniauth_callbacks.failure', kind: 'Google', reason: "#{auth.info.email} is not authorized."
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/admins/omniauth_callbacks_controller.rb:14:9: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        redirect_to new_admin_session_path
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/admins/omniauth_callbacks_controller.rb:17:1: C: [Correctable] Layout/TrailingWhitespace: Trailing whitespace detected.
app/controllers/admins/omniauth_callbacks_controller.rb:18:5: C: [Correctable] Layout/AccessModifierIndentation: Indent access modifiers like protected.
    protected
    ^^^^^^^^^
app/controllers/admins/omniauth_callbacks_controller.rb:19:1: C: [Correctable] Layout/TrailingWhitespace: Trailing whitespace detected.
app/controllers/admins/omniauth_callbacks_controller.rb:20:1: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
    def after_omniauth_failure_path_for(_scope)
^^^^
app/controllers/admins/omniauth_callbacks_controller.rb:23:1: C: [Correctable] Layout/TrailingWhitespace: Trailing whitespace detected.
app/controllers/admins/omniauth_callbacks_controller.rb:24:1: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
    def after_sign_in_path_for(resource_or_scope)
^^^^
app/controllers/admins/omniauth_callbacks_controller.rb:27:1: C: [Correctable] Layout/TrailingWhitespace: Trailing whitespace detected.
app/controllers/admins/omniauth_callbacks_controller.rb:28:5: C: [Correctable] Layout/AccessModifierIndentation: Indent access modifiers like private.
    private
    ^^^^^^^
app/controllers/admins/omniauth_callbacks_controller.rb:29:1: C: [Correctable] Layout/TrailingWhitespace: Trailing whitespace detected.
app/controllers/admins/omniauth_callbacks_controller.rb:30:1: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
    def from_google_params
^^^^
app/controllers/admins/omniauth_callbacks_controller.rb:39:1: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
    def auth
^^^^
app/controllers/admins/omniauth_callbacks_controller.rb:40:5: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
        @auth ||= request.env['omniauth.auth']
    ^^^^
app/controllers/admins/omniauth_callbacks_controller.rb:42:4: C: [Correctable] Layout/TrailingEmptyLines: Final newline missing.
end
   
app/controllers/admins/sessions_controller.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
class Admins::SessionsController < Devise::SessionsController
^
app/controllers/admins/sessions_controller.rb:2:1: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
    def after_sign_out_path_for(_resource_or_scope)
^^^^
app/controllers/admins/sessions_controller.rb:5:1: C: [Correctable] Layout/TrailingWhitespace: Trailing whitespace detected.
app/controllers/admins/sessions_controller.rb:6:1: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
    def after_sign_in_path_for(resource_or_scope)
^^^^
app/controllers/admins/sessions_controller.rb:9:3: W: [Correctable] Layout/EndAlignment: end at 9, 2 is not aligned with class at 1, 0.
  end
  ^^^
app/controllers/admins/sessions_controller.rb:9:6: C: [Correctable] Layout/TrailingEmptyLines: Final newline missing.
  end
     
app/controllers/application_controller.rb:4:1: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
    before_action :authenticate_admin!
^^^^
app/controllers/committees_controller.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
class CommitteesController < ApplicationController
^
app/controllers/committees_controller.rb:2:42: C: [Correctable] Layout/SpaceInsidePercentLiteralDelimiters: Do not use spaces inside percent literal delimiters.
  before_action :set_committee, only: %i[ show edit update destroy ]
                                         ^
app/controllers/committees_controller.rb:2:67: C: [Correctable] Layout/SpaceInsidePercentLiteralDelimiters: Do not use spaces inside percent literal delimiters.
  before_action :set_committee, only: %i[ show edit update destroy ]
                                                                  ^
app/controllers/committees_controller.rb:10:3: C: [Correctable] Style/EmptyMethod: Put empty method definitions on a single line.
  def show ...
  ^^^^^^^^
app/controllers/committees_controller.rb:19:3: C: [Correctable] Style/EmptyMethod: Put empty method definitions on a single line.
  def edit ...
  ^^^^^^^^
app/controllers/committees_controller.rb:28:23: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        format.html { redirect_to committee_url(@committee), notice: "Committee was successfully created." }
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/committees_controller.rb:28:70: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
        format.html { redirect_to committee_url(@committee), notice: "Committee was successfully created." }
                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/committees_controller.rb:29:23: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        format.json { render :show, status: :created, location: @committee }
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/committees_controller.rb:31:23: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        format.html { render :new, status: :unprocessable_entity }
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/committees_controller.rb:32:23: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        format.json { render json: @committee.errors, status: :unprocessable_entity }
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/committees_controller.rb:41:23: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        format.html { redirect_to committee_url(@committee), notice: "Committee was successfully updated." }
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/committees_controller.rb:41:70: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
        format.html { redirect_to committee_url(@committee), notice: "Committee was successfully updated." }
                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/committees_controller.rb:42:23: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        format.json { render :show, status: :ok, location: @committee }
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/committees_controller.rb:44:23: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        format.html { render :edit, status: :unprocessable_entity }
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/committees_controller.rb:45:23: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        format.json { render json: @committee.errors, status: :unprocessable_entity }
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/committees_controller.rb:56:16: C: [Correctable] Rails/SaveBang: Use destroy! instead of destroy if the return value is not checked.
    @committee.destroy
               ^^^^^^^
app/controllers/committees_controller.rb:59:21: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      format.html { redirect_to committees_url, notice: "Committee was successfully destroyed." }
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/committees_controller.rb:59:57: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      format.html { redirect_to committees_url, notice: "Committee was successfully destroyed." }
                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/committees_controller.rb:60:21: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      format.json { head :no_content }
                    ^^^^^^^^^^^^^^^^
app/controllers/committees_controller.rb:64:3: C: [Correctable] Layout/EmptyLinesAroundAccessModifier: Keep a blank line before and after private.
  private
  ^^^^^^^
app/controllers/committees_controller.rb:66:1: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
    def set_committee
^^^^
app/controllers/committees_controller.rb:66:5: C: [Correctable] Layout/IndentationConsistency: Inconsistent indentation detected.
    def set_committee ...
    ^^^^^^^^^^^^^^^^^
app/controllers/committees_controller.rb:71:1: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
    def committee_params
^^^^
app/controllers/committees_controller.rb:71:5: C: [Correctable] Layout/IndentationConsistency: Inconsistent indentation detected.
    def committee_params ...
    ^^^^^^^^^^^^^^^^^^^^
app/controllers/dashboards_controller.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
class DashboardsController < ApplicationController
^
app/controllers/dashboards_controller.rb:2:1: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
    def show
^^^^
app/controllers/dashboards_controller.rb:2:5: C: [Correctable] Style/EmptyMethod: Put empty method definitions on a single line.
    def show ...
    ^^^^^^^^
app/controllers/dashboards_controller.rb:4:3: W: [Correctable] Layout/EndAlignment: end at 4, 2 is not aligned with class at 1, 0.
  end
  ^^^
app/controllers/dashboards_controller.rb:4:6: C: [Correctable] Layout/TrailingEmptyLines: Final newline missing.
  end
     
app/controllers/events_controller.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
class EventsController < ApplicationController
^
app/controllers/events_controller.rb:2:59: C: [Correctable] Layout/SpaceInsidePercentLiteralDelimiters: Do not use spaces inside percent literal delimiters.
  before_action :set_event, :service_or_meeting, only: %i[ show edit update destroy ]
                                                          ^
app/controllers/events_controller.rb:2:84: C: [Correctable] Layout/SpaceInsidePercentLiteralDelimiters: Do not use spaces inside percent literal delimiters.
  before_action :set_event, :service_or_meeting, only: %i[ show edit update destroy ]
                                                                                   ^
app/controllers/events_controller.rb:10:3: C: [Correctable] Style/EmptyMethod: Put empty method definitions on a single line.
  def show ...
  ^^^^^^^^
app/controllers/events_controller.rb:19:3: C: [Correctable] Style/EmptyMethod: Put empty method definitions on a single line.
  def edit ...
  ^^^^^^^^
app/controllers/events_controller.rb:28:23: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        format.html { redirect_to event_url(@event), notice: "Event was successfully created." }
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/events_controller.rb:28:62: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
        format.html { redirect_to event_url(@event), notice: "Event was successfully created." }
                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/events_controller.rb:29:23: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        format.json { render :show, status: :created, location: @event }
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/events_controller.rb:31:23: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        format.html { render :new, status: :unprocessable_entity }
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/events_controller.rb:32:23: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        format.json { render json: @event.errors, status: :unprocessable_entity }
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/events_controller.rb:40:5: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
        if @event.update(event_params)
    ^^^^
app/controllers/events_controller.rb:41:9: C: [Correctable] Layout/IndentationWidth: Use 2 (not 0) spaces for indentation.
        format.html { redirect_to event_url(@event), notice: "Event was successfully updated." }
        
app/controllers/events_controller.rb:41:23: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        format.html { redirect_to event_url(@event), notice: "Event was successfully updated." }
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/events_controller.rb:41:62: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
        format.html { redirect_to event_url(@event), notice: "Event was successfully updated." }
                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/events_controller.rb:42:23: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        format.json { render :show, status: :ok, location: @event }
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/events_controller.rb:43:7: C: [Correctable] Layout/ElseAlignment: Align else with if.
      else
      ^^^^
app/controllers/events_controller.rb:44:23: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        format.html { render :edit, status: :unprocessable_entity }
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/events_controller.rb:45:23: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        format.json { render json: @event.errors, status: :unprocessable_entity }
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/events_controller.rb:46:7: W: [Correctable] Layout/EndAlignment: end at 46, 6 is not aligned with if at 40, 8.
      end
      ^^^
app/controllers/events_controller.rb:50:22: C: [Correctable] Layout/TrailingWhitespace: Trailing whitespace detected.
  # for deletion page 
                     ^
app/controllers/events_controller.rb:57:12: C: [Correctable] Rails/SaveBang: Use destroy! instead of destroy if the return value is not checked.
    @event.destroy
           ^^^^^^^
app/controllers/events_controller.rb:60:21: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      format.html { redirect_to events_url, notice: "Event was successfully destroyed." }
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/events_controller.rb:60:53: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      format.html { redirect_to events_url, notice: "Event was successfully destroyed." }
                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/events_controller.rb:61:21: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      format.json { head :no_content }
                    ^^^^^^^^^^^^^^^^
app/controllers/events_controller.rb:65:3: C: [Correctable] Layout/EmptyLinesAroundAccessModifier: Keep a blank line before and after private.
  private
  ^^^^^^^
app/controllers/events_controller.rb:67:1: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
    def set_event
^^^^
app/controllers/events_controller.rb:67:5: C: [Correctable] Layout/IndentationConsistency: Inconsistent indentation detected.
    def set_event ...
    ^^^^^^^^^^^^^
app/controllers/events_controller.rb:71:88: C: [Correctable] Layout/TrailingWhitespace: Trailing whitespace detected.
    # condition that will automatically turn point type to nil if event type is meeting 
                                                                                       ^
app/controllers/events_controller.rb:72:1: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
    def service_or_meeting
^^^^
app/controllers/events_controller.rb:72:5: C: [Correctable] Layout/IndentationConsistency: Inconsistent indentation detected.
    def service_or_meeting ...
    ^^^^^^^^^^^^^^^^^^^^^^
app/controllers/events_controller.rb:73:31: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      if @event.event_type == "Meeting"
                              ^^^^^^^^^
app/controllers/events_controller.rb:75:16: C: [Correctable] Rails/SaveBang: Use save! instead of save if the return value is not checked.
        @event.save
               ^^^^
app/controllers/events_controller.rb:78:31: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      if @event.event_type == "Service"
                              ^^^^^^^^^
app/controllers/events_controller.rb:80:16: C: [Correctable] Rails/SaveBang: Use save! instead of save if the return value is not checked.
        @event.save
               ^^^^
app/controllers/events_controller.rb:84:55: C: [Correctable] Layout/TrailingWhitespace: Trailing whitespace detected.
    # Only allow a list of trusted parameters through. 
                                                      ^
app/controllers/events_controller.rb:85:1: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
    def event_params
^^^^
app/controllers/events_controller.rb:85:5: C: [Correctable] Layout/IndentationConsistency: Inconsistent indentation detected.
    def event_params ...
    ^^^^^^^^^^^^^^^^
app/controllers/excuses_controller.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
class ExcusesController < ApplicationController
^
app/controllers/excuses_controller.rb:2:39: C: [Correctable] Layout/SpaceInsidePercentLiteralDelimiters: Do not use spaces inside percent literal delimiters.
  before_action :set_excuse, only: %i[ show edit update destroy ]
                                      ^
app/controllers/excuses_controller.rb:2:64: C: [Correctable] Layout/SpaceInsidePercentLiteralDelimiters: Do not use spaces inside percent literal delimiters.
  before_action :set_excuse, only: %i[ show edit update destroy ]
                                                               ^
app/controllers/excuses_controller.rb:10:3: C: [Correctable] Style/EmptyMethod: Put empty method definitions on a single line.
  def show ...
  ^^^^^^^^
app/controllers/excuses_controller.rb:19:3: C: [Correctable] Style/EmptyMethod: Put empty method definitions on a single line.
  def edit ...
  ^^^^^^^^
app/controllers/excuses_controller.rb:28:23: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        format.html { redirect_to excuse_url(@excuse), notice: "Excuse was successfully created." }
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/excuses_controller.rb:28:64: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
        format.html { redirect_to excuse_url(@excuse), notice: "Excuse was successfully created." }
                                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/excuses_controller.rb:29:23: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        format.json { render :show, status: :created, location: @excuse }
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/excuses_controller.rb:31:23: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        format.html { render :new, status: :unprocessable_entity }
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/excuses_controller.rb:32:23: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        format.json { render json: @excuse.errors, status: :unprocessable_entity }
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/excuses_controller.rb:41:23: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        format.html { redirect_to excuse_url(@excuse), notice: "Excuse was successfully updated." }
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/excuses_controller.rb:41:64: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
        format.html { redirect_to excuse_url(@excuse), notice: "Excuse was successfully updated." }
                                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/excuses_controller.rb:42:23: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        format.json { render :show, status: :ok, location: @excuse }
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/excuses_controller.rb:44:23: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        format.html { render :edit, status: :unprocessable_entity }
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/excuses_controller.rb:45:23: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        format.json { render json: @excuse.errors, status: :unprocessable_entity }
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/excuses_controller.rb:52:13: C: [Correctable] Rails/SaveBang: Use destroy! instead of destroy if the return value is not checked.
    @excuse.destroy
            ^^^^^^^
app/controllers/excuses_controller.rb:55:21: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      format.html { redirect_to excuses_url, notice: "Excuse was successfully destroyed." }
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/excuses_controller.rb:55:54: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      format.html { redirect_to excuses_url, notice: "Excuse was successfully destroyed." }
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/excuses_controller.rb:56:21: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      format.json { head :no_content }
                    ^^^^^^^^^^^^^^^^
app/controllers/excuses_controller.rb:60:3: C: [Correctable] Layout/EmptyLinesAroundAccessModifier: Keep a blank line before and after private.
  private
  ^^^^^^^
app/controllers/excuses_controller.rb:62:1: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
    def set_excuse
^^^^
app/controllers/excuses_controller.rb:62:5: C: [Correctable] Layout/IndentationConsistency: Inconsistent indentation detected.
    def set_excuse ...
    ^^^^^^^^^^^^^^
app/controllers/excuses_controller.rb:67:1: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
    def excuse_params
^^^^
app/controllers/excuses_controller.rb:67:5: C: [Correctable] Layout/IndentationConsistency: Inconsistent indentation detected.
    def excuse_params ...
    ^^^^^^^^^^^^^^^^^
app/controllers/main_controller.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
class MainController < ApplicationController
^
app/controllers/main_controller.rb:2:3: C: [Correctable] Style/EmptyMethod: Put empty method definitions on a single line.
  def index ...
  ^^^^^^^^^
app/controllers/main_controller.rb:5:3: C: [Correctable] Style/EmptyMethod: Put empty method definitions on a single line.
  def show ...
  ^^^^^^^^
app/controllers/main_controller.rb:8:3: C: [Correctable] Style/EmptyMethod: Put empty method definitions on a single line.
  def new ...
  ^^^^^^^
app/controllers/main_controller.rb:11:3: C: [Correctable] Style/EmptyMethod: Put empty method definitions on a single line.
  def create ...
  ^^^^^^^^^^
app/controllers/main_controller.rb:14:3: C: [Correctable] Style/EmptyMethod: Put empty method definitions on a single line.
  def edit ...
  ^^^^^^^^
app/controllers/main_controller.rb:17:3: C: [Correctable] Style/EmptyMethod: Put empty method definitions on a single line.
  def update ...
  ^^^^^^^^^^
app/controllers/main_controller.rb:20:3: C: [Correctable] Style/EmptyMethod: Put empty method definitions on a single line.
  def delete ...
  ^^^^^^^^^^
app/controllers/main_controller.rb:23:3: C: [Correctable] Style/EmptyMethod: Put empty method definitions on a single line.
  def destory ...
  ^^^^^^^^^^^
app/controllers/member_events_controller.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
class MemberEventsController < ApplicationController
^
app/controllers/member_events_controller.rb:2:45: C: [Correctable] Layout/SpaceInsidePercentLiteralDelimiters: Do not use spaces inside percent literal delimiters.
  before_action :set_member_event, only: %i[ show edit update destroy ]
                                            ^
app/controllers/member_events_controller.rb:2:70: C: [Correctable] Layout/SpaceInsidePercentLiteralDelimiters: Do not use spaces inside percent literal delimiters.
  before_action :set_member_event, only: %i[ show edit update destroy ]
                                                                     ^
app/controllers/member_events_controller.rb:10:3: C: [Correctable] Style/EmptyMethod: Put empty method definitions on a single line.
  def show ...
  ^^^^^^^^
app/controllers/member_events_controller.rb:19:3: C: [Correctable] Style/EmptyMethod: Put empty method definitions on a single line.
  def edit ...
  ^^^^^^^^
app/controllers/member_events_controller.rb:28:23: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        format.html { redirect_to member_event_url(@member_event), notice: "Member event was successfully created." }
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/member_events_controller.rb:28:76: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
        format.html { redirect_to member_event_url(@member_event), notice: "Member event was successfully created." }
                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/member_events_controller.rb:29:23: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        format.json { render :show, status: :created, location: @member_event }
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/member_events_controller.rb:31:23: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        format.html { render :new, status: :unprocessable_entity }
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/member_events_controller.rb:32:23: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        format.json { render json: @member_event.errors, status: :unprocessable_entity }
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/member_events_controller.rb:41:23: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        format.html { redirect_to member_event_url(@member_event), notice: "Member event was successfully updated." }
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/member_events_controller.rb:41:76: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
        format.html { redirect_to member_event_url(@member_event), notice: "Member event was successfully updated." }
                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/member_events_controller.rb:42:23: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        format.json { render :show, status: :ok, location: @member_event }
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/member_events_controller.rb:44:23: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        format.html { render :edit, status: :unprocessable_entity }
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/member_events_controller.rb:45:23: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        format.json { render json: @member_event.errors, status: :unprocessable_entity }
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/member_events_controller.rb:52:19: C: [Correctable] Rails/SaveBang: Use destroy! instead of destroy if the return value is not checked.
    @member_event.destroy
                  ^^^^^^^
app/controllers/member_events_controller.rb:55:21: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      format.html { redirect_to member_events_url, notice: "Member event was successfully destroyed." }
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/member_events_controller.rb:55:60: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      format.html { redirect_to member_events_url, notice: "Member event was successfully destroyed." }
                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/member_events_controller.rb:56:21: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      format.json { head :no_content }
                    ^^^^^^^^^^^^^^^^
app/controllers/member_events_controller.rb:60:3: C: [Correctable] Layout/EmptyLinesAroundAccessModifier: Keep a blank line before and after private.
  private
  ^^^^^^^
app/controllers/member_events_controller.rb:62:1: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
    def set_member_event
^^^^
app/controllers/member_events_controller.rb:62:5: C: [Correctable] Layout/IndentationConsistency: Inconsistent indentation detected.
    def set_member_event ...
    ^^^^^^^^^^^^^^^^^^^^
app/controllers/member_events_controller.rb:67:1: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
    def member_event_params
^^^^
app/controllers/member_events_controller.rb:67:5: C: [Correctable] Layout/IndentationConsistency: Inconsistent indentation detected.
    def member_event_params ...
    ^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/members_controller.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
class MembersController < ApplicationController
^
app/controllers/members_controller.rb:3:23: C: Rails/OrderById: Do not use the id column for ordering. Use a timestamp column to order chronologically.
    @members = Member.order(:id)
                      ^^^^^^^^^^
app/controllers/members_controller.rb:19:23: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        format.html { redirect_to member_url(@member), notice: "Member was successfully created." }
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/members_controller.rb:19:64: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
        format.html { redirect_to member_url(@member), notice: "Member was successfully created." }
                                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/members_controller.rb:20:23: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        format.json { render :show, status: :created, location: @member }
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/members_controller.rb:22:23: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        format.html { render :new, status: :unprocessable_entity }
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/members_controller.rb:23:23: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        format.json { render json: @member.errors, status: :unprocessable_entity }
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/members_controller.rb:35:7: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      redirect_to member_path(@member)
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/members_controller.rb:47:13: C: [Correctable] Rails/SaveBang: Use destroy! instead of destroy if the return value is not checked.
    @member.destroy
            ^^^^^^^
app/controllers/members_controller.rb:48:5: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
    redirect_to members_path
    ^^^^^^^^^^^^^^^^^^^^^^^^
app/controllers/members_controller.rb:55:7: C: [Correctable] Layout/ArgumentAlignment: Align the arguments of a method call if they span more than one line.
      :committee,
      ^^^^^^^^^^
app/controllers/members_controller.rb:56:7: C: [Correctable] Layout/ArgumentAlignment: Align the arguments of a method call if they span more than one line.
      :position,
      ^^^^^^^^^
app/controllers/members_controller.rb:57:7: C: [Correctable] Layout/ArgumentAlignment: Align the arguments of a method call if they span more than one line.
      :civicPoints,
      ^^^^^^^^^^^^
app/controllers/members_controller.rb:58:7: C: [Correctable] Layout/ArgumentAlignment: Align the arguments of a method call if they span more than one line.
      :outreachPoints,
      ^^^^^^^^^^^^^^^
app/controllers/members_controller.rb:59:7: C: [Correctable] Layout/ArgumentAlignment: Align the arguments of a method call if they span more than one line.
      :socialPoints,
      ^^^^^^^^^^^^^
app/controllers/members_controller.rb:60:7: C: [Correctable] Layout/ArgumentAlignment: Align the arguments of a method call if they span more than one line.
      :marketingPoints,
      ^^^^^^^^^^^^^^^^
app/controllers/members_controller.rb:61:7: C: [Correctable] Layout/ArgumentAlignment: Align the arguments of a method call if they span more than one line.
      :totalPoints
      ^^^^^^^^^^^^
app/helpers/committees_helper.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
module CommitteesHelper
^
app/helpers/events_helper.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
module EventsHelper
^
app/helpers/excuses_helper.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
module ExcusesHelper
^
app/helpers/main_helper.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
module MainHelper
^
app/helpers/member_events_helper.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
module MemberEventsHelper
^
app/helpers/members_helper.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
module MembersHelper
^
app/models/admin.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
class Admin < ApplicationRecord
^
app/models/admin.rb:7:5: C: [Correctable] Layout/EmptyLineAfterGuardClause: Add empty line after guard clause.
    return nil unless email =~ /@tamu.edu\z/
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/models/admin.rb:7:23: C: [Correctable] Performance/RegexpMatch: Use match? instead of =~ when MatchData is not used.
    return nil unless email =~ /@tamu.edu\z/
                      ^^^^^^^^^^^^^^^^^^^^^^
app/models/admin.rb:10:1: C: [Correctable] Layout/EmptyLinesAroundClassBody: Extra empty line detected at class body end.
app/models/committee.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
class Committee < ApplicationRecord
^
app/models/event.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
class Event < ApplicationRecord
^
app/models/event.rb:9:1: C: [Correctable] Layout/EmptyLines: Extra blank line detected.
app/models/event.rb:10:3: C: [Correctable] Layout/EmptyLinesAroundAccessModifier: Keep a blank line before and after private.
  private
  ^^^^^^^
app/models/event.rb:11:45: C: [Correctable] Layout/TrailingWhitespace: Trailing whitespace detected.
  # if there is a meeting needs to be phrase 
                                            ^
app/models/event.rb:13:5: C: [Correctable] Style/IfUnlessModifier: Favor modifier if usage when having a single-line body. Another good alternative is the usage of control flow &&/||.
    if (event_type == "Meeting") && phrase.blank?
    ^^
app/models/event.rb:13:23: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    if (event_type == "Meeting") && phrase.blank?
                      ^^^^^^^^^
app/models/event.rb:19:5: C: [Correctable] Style/IfUnlessModifier: Favor modifier if usage when having a single-line body. Another good alternative is the usage of control flow &&/||.
    if (event_type == "Service") && point_type.blank?
    ^^
app/models/event.rb:19:23: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    if (event_type == "Service") && point_type.blank?
                      ^^^^^^^^^
app/models/excuse.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
class Excuse < ApplicationRecord
^
app/models/excuse.rb:10:5: C: [Correctable] Style/IfUnlessModifier: Favor modifier if usage when having a single-line body. Another good alternative is the usage of control flow &&/||.
    if file.blob.byte_size > 5.megabytes
    ^^
app/models/excuse.rb:11:25: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      errors.add(:file, "File size is too large (Size > 5MB)")
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/models/excuse.rb:16:5: C: [Correctable] Style/IfUnlessModifier: Favor modifier if usage when having a single-line body. Another good alternative is the usage of control flow &&/||.
    if !file.blob.content_type.starts_with?("application/pdf")
    ^^
app/models/excuse.rb:16:5: C: [Correctable] Style/NegatedIf: Favor unless over if for negative conditions.
    if !file.blob.content_type.starts_with?("application/pdf") ...
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/models/excuse.rb:16:45: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    if !file.blob.content_type.starts_with?("application/pdf")
                                            ^^^^^^^^^^^^^^^^^
app/models/excuse.rb:17:25: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      errors.add(:file, "File must be a PDF")
                        ^^^^^^^^^^^^^^^^^^^^
app/models/excuse.rb:24:1: C: [Correctable] Layout/EmptyLinesAroundClassBody: Extra empty line detected at class body end.
app/models/excuse.rb:25:4: C: [Correctable] Layout/TrailingEmptyLines: Final newline missing.
end
   
app/models/member.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
class Member < ApplicationRecord
^
app/models/member_event.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
class MemberEvent < ApplicationRecord
^
app/views/committees/_committee.json.jbuilder:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
json.extract! committee, :id, :name, :leader_member_id, :created_at, :updated_at
^
app/views/committees/_committee.json.jbuilder:1:1: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
json.extract! committee, :id, :name, :leader_member_id, :created_at, :updated_at
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/views/committees/_committee.json.jbuilder:2:1: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
json.url committee_url(committee, format: :json)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/views/committees/index.json.jbuilder:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
json.array! @committees, partial: "committees/committee", as: :committee
^
app/views/committees/index.json.jbuilder:1:1: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
json.array! @committees, partial: "committees/committee", as: :committee
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/views/committees/index.json.jbuilder:1:35: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
json.array! @committees, partial: "committees/committee", as: :committee
                                  ^^^^^^^^^^^^^^^^^^^^^^
app/views/committees/show.json.jbuilder:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
json.partial! "committees/committee", committee: @committee
^
app/views/committees/show.json.jbuilder:1:1: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
json.partial! "committees/committee", committee: @committee
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/views/committees/show.json.jbuilder:1:15: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
json.partial! "committees/committee", committee: @committee
              ^^^^^^^^^^^^^^^^^^^^^^
app/views/events/_event.json.jbuilder:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
json.extract! event, :id, :name, :date, :point_type, :event_type, :phrase, :created_at, :updated_at
^
app/views/events/_event.json.jbuilder:1:1: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
json.extract! event, :id, :name, :date, :point_type, :event_type, :phrase, :created_at, :updated_at
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/views/events/_event.json.jbuilder:2:1: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
json.url event_url(event, format: :json)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/views/events/index.json.jbuilder:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
json.array! @events, partial: "events/event", as: :event
^
app/views/events/index.json.jbuilder:1:1: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
json.array! @events, partial: "events/event", as: :event
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/views/events/index.json.jbuilder:1:31: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
json.array! @events, partial: "events/event", as: :event
                              ^^^^^^^^^^^^^^
app/views/events/show.json.jbuilder:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
json.partial! "events/event", event: @event
^
app/views/events/show.json.jbuilder:1:1: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
json.partial! "events/event", event: @event
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/views/events/show.json.jbuilder:1:15: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
json.partial! "events/event", event: @event
              ^^^^^^^^^^^^^^
app/views/excuses/_excuse.json.jbuilder:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
json.extract! excuse, :id, :description, :file, :created_at, :updated_at
^
app/views/excuses/_excuse.json.jbuilder:1:1: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
json.extract! excuse, :id, :description, :file, :created_at, :updated_at
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/views/excuses/_excuse.json.jbuilder:2:1: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
json.url excuse_url(excuse, format: :json)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/views/excuses/_excuse.json.jbuilder:3:1: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
json.file url_for(excuse.file)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/views/excuses/index.json.jbuilder:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
json.array! @excuses, partial: "excuses/excuse", as: :excuse
^
app/views/excuses/index.json.jbuilder:1:1: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
json.array! @excuses, partial: "excuses/excuse", as: :excuse
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/views/excuses/index.json.jbuilder:1:32: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
json.array! @excuses, partial: "excuses/excuse", as: :excuse
                               ^^^^^^^^^^^^^^^^
app/views/excuses/show.json.jbuilder:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
json.partial! "excuses/excuse", excuse: @excuse
^
app/views/excuses/show.json.jbuilder:1:1: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
json.partial! "excuses/excuse", excuse: @excuse
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/views/excuses/show.json.jbuilder:1:15: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
json.partial! "excuses/excuse", excuse: @excuse
              ^^^^^^^^^^^^^^^^
app/views/member_events/_member_event.json.jbuilder:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
json.extract! member_event, :id, :event_id, :member_id, :approved_status, :approve_date, :approve_by, :created_at, :updated_at
^
app/views/member_events/_member_event.json.jbuilder:1:1: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
json.extract! member_event, :id, :event_id, :member_id, :approved_status, :approve_date, :approve_by, :created_at, :updated_at
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/views/member_events/_member_event.json.jbuilder:2:1: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
json.url member_event_url(member_event, format: :json)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/views/member_events/index.json.jbuilder:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
json.array! @member_events, partial: "member_events/member_event", as: :member_event
^
app/views/member_events/index.json.jbuilder:1:1: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
json.array! @member_events, partial: "member_events/member_event", as: :member_event
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/views/member_events/index.json.jbuilder:1:38: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
json.array! @member_events, partial: "member_events/member_event", as: :member_event
                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/views/member_events/show.json.jbuilder:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
json.partial! "member_events/member_event", member_event: @member_event
^
app/views/member_events/show.json.jbuilder:1:1: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
json.partial! "member_events/member_event", member_event: @member_event
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/views/member_events/show.json.jbuilder:1:15: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
json.partial! "member_events/member_event", member_event: @member_event
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/views/members/_member.json.jbuilder:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
json.extract! member, :name, :committee, :position, :civicPoints, :outreachPoints, :socialPoints, :marketingPoints, :totalPoints
^
app/views/members/_member.json.jbuilder:1:1: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
json.extract! member, :name, :committee, :position, :civicPoints, :outreachPoints, :socialPoints, :marketingPoints, :totalPoints
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app/views/members/_member.json.jbuilder:2:1: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
json.url member_url(member, format: :json)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_committee_spec.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
require 'rails_helper'
^
spec/feature/integration_committee_spec.rb:3:1: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
RSpec.describe "Committee integration", type: :feature do
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_committee_spec.rb:3:16: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
RSpec.describe "Committee integration", type: :feature do
               ^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_committee_spec.rb:4:1: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
    let(:valid_attributes) {
^^^^
spec/feature/integration_committee_spec.rb:4:28: C: [Correctable] Style/BlockDelimiters: Avoid using {...} for multi-line blocks.
    let(:valid_attributes) {
                           ^
spec/feature/integration_committee_spec.rb:5:5: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
        {
    ^^^^
spec/feature/integration_committee_spec.rb:6:13: C: [Correctable] Layout/FirstHashElementIndentation: Use 2 spaces for indentation in a hash, relative to the start of the line where the left curly brace is.
            name: "MyName1",
            ^^^^^^^^^^^^^^^
spec/feature/integration_committee_spec.rb:6:19: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            name: "MyName1",
                  ^^^^^^^^^
spec/feature/integration_committee_spec.rb:7:31: C: [Correctable] Style/NumericLiterals: Use underscores(_) as thousands separator and separate every 3 digits with them.
            leader_member_id: 12345
                              ^^^^^
spec/feature/integration_committee_spec.rb:11:27: C: [Correctable] Style/BlockDelimiters: Avoid using {...} for multi-line blocks.
    let(:edit_attributes) {
                          ^
spec/feature/integration_committee_spec.rb:12:5: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
        {
    ^^^^
spec/feature/integration_committee_spec.rb:13:13: C: [Correctable] Layout/FirstHashElementIndentation: Use 2 spaces for indentation in a hash, relative to the start of the line where the left curly brace is.
            name: "MyName2",
            ^^^^^^^^^^^^^^^
spec/feature/integration_committee_spec.rb:13:19: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            name: "MyName2",
                  ^^^^^^^^^
spec/feature/integration_committee_spec.rb:14:31: C: [Correctable] Style/NumericLiterals: Use underscores(_) as thousands separator and separate every 3 digits with them.
            leader_member_id: 54321
                              ^^^^^
spec/feature/integration_committee_spec.rb:17:1: C: [Correctable] Layout/TrailingWhitespace: Trailing whitespace detected.
spec/feature/integration_committee_spec.rb:18:30: C: [Correctable] Style/BlockDelimiters: Avoid using {...} for multi-line blocks.
    let(:invalid_attributes) {
                             ^
spec/feature/integration_committee_spec.rb:19:5: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
        skip("Add a hash of attributes invalid for your model")
    ^^^^
spec/feature/integration_committee_spec.rb:19:14: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
        skip("Add a hash of attributes invalid for your model")
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_committee_spec.rb:22:14: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    describe "Creation" do
             ^^^^^^^^^^
spec/feature/integration_committee_spec.rb:23:5: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
        scenario 'create with valid inputs' do
    ^^^^
spec/feature/integration_committee_spec.rb:23:9: C: [Correctable] RSpec/Capybara/FeatureMethods: Use it instead of scenario.
        scenario 'create with valid inputs' do
        ^^^^^^^^
spec/feature/integration_committee_spec.rb:24:9: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
            visit new_committee_path
        ^^^^
spec/feature/integration_committee_spec.rb:25:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            fill_in "committee[name]", with: valid_attributes[:name]
                    ^^^^^^^^^^^^^^^^^
spec/feature/integration_committee_spec.rb:26:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            fill_in "committee[leader_member_id]", with: valid_attributes[:leader_member_id]
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_committee_spec.rb:27:22: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            click_on "Create Committee"
                     ^^^^^^^^^^^^^^^^^^
spec/feature/integration_committee_spec.rb:29:13: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
            expect(page).to have_content(valid_attributes[:name])
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_committee_spec.rb:30:13: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
            expect(page).to have_content(valid_attributes[:leader_member_id])
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_committee_spec.rb:34:14: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    describe "Editing" do
             ^^^^^^^^^
spec/feature/integration_committee_spec.rb:35:5: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
        scenario 'update with valid attributes' do
    ^^^^
spec/feature/integration_committee_spec.rb:35:9: C: [Correctable] RSpec/Capybara/FeatureMethods: Use it instead of scenario.
        scenario 'update with valid attributes' do
        ^^^^^^^^
spec/feature/integration_committee_spec.rb:36:9: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
            @temp = Committee.create!(valid_attributes)
        ^^^^
spec/feature/integration_committee_spec.rb:37:33: C: RSpec/InstanceVariable: Avoid instance variables – use let, a method call, or a local variable (if possible).
            visit committee_url(@temp)
                                ^^^^^
spec/feature/integration_committee_spec.rb:38:13: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
            expect(page).to have_content(valid_attributes[:name])
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_committee_spec.rb:39:13: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
            expect(page).to have_content(valid_attributes[:leader_member_id])
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_committee_spec.rb:41:39: C: RSpec/InstanceVariable: Avoid instance variables – use let, a method call, or a local variable (if possible).
            visit edit_committee_path(@temp)
                                      ^^^^^
spec/feature/integration_committee_spec.rb:42:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            fill_in "committee[name]", with: edit_attributes[:name]
                    ^^^^^^^^^^^^^^^^^
spec/feature/integration_committee_spec.rb:43:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            fill_in "committee[leader_member_id]", with: edit_attributes[:leader_member_id]
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_committee_spec.rb:44:22: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            click_on "Update Committee"
                     ^^^^^^^^^^^^^^^^^^
spec/feature/integration_committee_spec.rb:46:33: C: RSpec/InstanceVariable: Avoid instance variables – use let, a method call, or a local variable (if possible).
            visit committee_url(@temp)
                                ^^^^^
spec/feature/integration_committee_spec.rb:47:13: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
            expect(page).to have_content(edit_attributes[:name])
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_committee_spec.rb:48:13: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
            expect(page).to have_content(edit_attributes[:leader_member_id])
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_committee_spec.rb:50:1: C: [Correctable] Layout/TrailingWhitespace: Trailing whitespace detected.
spec/feature/integration_committee_spec.rb:53:14: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    describe "Deletion" do
             ^^^^^^^^^^
spec/feature/integration_committee_spec.rb:54:5: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
        scenario "delete entry" do
    ^^^^
spec/feature/integration_committee_spec.rb:54:9: C: [Correctable] RSpec/Capybara/FeatureMethods: Use it instead of scenario.
        scenario "delete entry" do
        ^^^^^^^^
spec/feature/integration_committee_spec.rb:54:18: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
        scenario "delete entry" do
                 ^^^^^^^^^^^^^^
spec/feature/integration_committee_spec.rb:55:9: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
            @temp = Committee.create!(valid_attributes)
        ^^^^
spec/feature/integration_committee_spec.rb:57:13: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
            expect(page).to have_content(valid_attributes[:name])
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_committee_spec.rb:58:13: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
            expect(page).to have_content(valid_attributes[:leader_member_id])
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_committee_spec.rb:60:41: C: RSpec/InstanceVariable: Avoid instance variables – use let, a method call, or a local variable (if possible).
            visit delete_committee_path(@temp)
                                        ^^^^^
spec/feature/integration_committee_spec.rb:61:22: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            click_on "Delete committee"
                     ^^^^^^^^^^^^^^^^^^
spec/feature/integration_committee_spec.rb:63:13: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
            expect(page).not_to have_content(valid_attributes[:name])
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_committee_spec.rb:64:13: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
            expect(page).not_to have_content(valid_attributes[:leader_member_id])
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_committee_spec.rb:65:1: C: [Correctable] Layout/EmptyLinesAroundBlockBody: Extra empty line detected at block body end.
spec/feature/integration_committee_spec.rb:68:1: C: [Correctable] Layout/EmptyLinesAroundBlockBody: Extra empty line detected at block body end.
spec/feature/integration_committee_spec.rb:69:4: C: [Correctable] Layout/TrailingEmptyLines: Final newline missing.
end
   
spec/feature/integration_event_spec.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
require 'rails_helper'
^
spec/feature/integration_event_spec.rb:4:1: C: RSpec/MultipleMemoizedHelpers: Example group has too many memoized helpers [7/5]
RSpec.describe 'Event integration', type: :feature do ...
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_event_spec.rb:4:1: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
RSpec.describe 'Event integration', type: :feature do
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_event_spec.rb:5:1: C: [Correctable] Layout/EmptyLinesAroundBlockBody: Extra empty line detected at block body beginning.
spec/feature/integration_event_spec.rb:6:1: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
    let(:valid_meeting) {
^^^^
spec/feature/integration_event_spec.rb:6:25: C: [Correctable] Style/BlockDelimiters: Avoid using {...} for multi-line blocks.
    let(:valid_meeting) {
                        ^
spec/feature/integration_event_spec.rb:7:5: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
        {name: "Jan Meeting",
    ^^^^
spec/feature/integration_event_spec.rb:7:9: C: [Correctable] Layout/SpaceInsideHashLiteralBraces: Space inside { missing.
        {name: "Jan Meeting",
        ^
spec/feature/integration_event_spec.rb:7:10: C: [Correctable] Layout/FirstHashElementLineBreak: Add a line break before the first element of a multi-line hash.
        {name: "Jan Meeting",
         ^^^^^^^^^^^^^^^^^^^
spec/feature/integration_event_spec.rb:7:16: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
        {name: "Jan Meeting",
               ^^^^^^^^^^^^^
spec/feature/integration_event_spec.rb:8:9: C: [Correctable] Layout/HashAlignment: Align the keys of a hash literal if they span more than one line.
        date: Date.parse("2022-01-01"),
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_event_spec.rb:8:26: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
        date: Date.parse("2022-01-01"),
                         ^^^^^^^^^^^^
spec/feature/integration_event_spec.rb:9:9: C: [Correctable] Layout/HashAlignment: Align the keys of a hash literal if they span more than one line.
        event_type: "Meeting",
        ^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_event_spec.rb:9:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
        event_type: "Meeting",
                    ^^^^^^^^^
spec/feature/integration_event_spec.rb:10:9: C: [Correctable] Layout/HashAlignment: Align the keys of a hash literal if they span more than one line.
        phrase: "what's up"}
        ^^^^^^^^^^^^^^^^^^^
spec/feature/integration_event_spec.rb:10:28: C: [Correctable] Layout/MultilineHashBraceLayout: Closing hash brace must be on the line after the last hash element.
        phrase: "what's up"}
                           ^
spec/feature/integration_event_spec.rb:10:28: C: [Correctable] Layout/SpaceInsideHashLiteralBraces: Space inside } missing.
        phrase: "what's up"}
                           ^
spec/feature/integration_event_spec.rb:13:25: C: [Correctable] Style/BlockDelimiters: Avoid using {...} for multi-line blocks.
    let(:valid_service) {
                        ^
spec/feature/integration_event_spec.rb:14:5: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
        {name: "Park clean up",
    ^^^^
spec/feature/integration_event_spec.rb:14:9: C: [Correctable] Layout/SpaceInsideHashLiteralBraces: Space inside { missing.
        {name: "Park clean up",
        ^
spec/feature/integration_event_spec.rb:14:10: C: [Correctable] Layout/FirstHashElementLineBreak: Add a line break before the first element of a multi-line hash.
        {name: "Park clean up",
         ^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_event_spec.rb:14:16: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
        {name: "Park clean up",
               ^^^^^^^^^^^^^^^
spec/feature/integration_event_spec.rb:15:9: C: [Correctable] Layout/HashAlignment: Align the keys of a hash literal if they span more than one line.
        date: Date.parse("2022-12-15"),
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_event_spec.rb:15:26: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
        date: Date.parse("2022-12-15"),
                         ^^^^^^^^^^^^
spec/feature/integration_event_spec.rb:16:9: C: [Correctable] Layout/HashAlignment: Align the keys of a hash literal if they span more than one line.
        point_type: "Outreach",
        ^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_event_spec.rb:16:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
        point_type: "Outreach",
                    ^^^^^^^^^^
spec/feature/integration_event_spec.rb:17:9: C: [Correctable] Layout/HashAlignment: Align the keys of a hash literal if they span more than one line.
        event_type: "Service"}
        ^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_event_spec.rb:17:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
        event_type: "Service"}
                    ^^^^^^^^^
spec/feature/integration_event_spec.rb:17:30: C: [Correctable] Layout/MultilineHashBraceLayout: Closing hash brace must be on the line after the last hash element.
        event_type: "Service"}
                             ^
spec/feature/integration_event_spec.rb:17:30: C: [Correctable] Layout/SpaceInsideHashLiteralBraces: Space inside } missing.
        event_type: "Service"}
                             ^
spec/feature/integration_event_spec.rb:20:24: C: [Correctable] Style/BlockDelimiters: Avoid using {...} for multi-line blocks.
    let(:edit_meeting) {
                       ^
spec/feature/integration_event_spec.rb:21:5: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
        {name: "Feb Meeting",
    ^^^^
spec/feature/integration_event_spec.rb:21:9: C: [Correctable] Layout/SpaceInsideHashLiteralBraces: Space inside { missing.
        {name: "Feb Meeting",
        ^
spec/feature/integration_event_spec.rb:21:10: C: [Correctable] Layout/FirstHashElementLineBreak: Add a line break before the first element of a multi-line hash.
        {name: "Feb Meeting",
         ^^^^^^^^^^^^^^^^^^^
spec/feature/integration_event_spec.rb:21:16: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
        {name: "Feb Meeting",
               ^^^^^^^^^^^^^
spec/feature/integration_event_spec.rb:22:9: C: [Correctable] Layout/HashAlignment: Align the keys of a hash literal if they span more than one line.
        date: Date.parse("2022-02-02"),
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_event_spec.rb:22:26: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
        date: Date.parse("2022-02-02"),
                         ^^^^^^^^^^^^
spec/feature/integration_event_spec.rb:23:9: C: [Correctable] Layout/HashAlignment: Align the keys of a hash literal if they span more than one line.
        event_type: "Meeting",
        ^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_event_spec.rb:23:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
        event_type: "Meeting",
                    ^^^^^^^^^
spec/feature/integration_event_spec.rb:24:9: C: [Correctable] Layout/HashAlignment: Align the keys of a hash literal if they span more than one line.
        phrase: "what's down"}
        ^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_event_spec.rb:24:30: C: [Correctable] Layout/MultilineHashBraceLayout: Closing hash brace must be on the line after the last hash element.
        phrase: "what's down"}
                             ^
spec/feature/integration_event_spec.rb:24:30: C: [Correctable] Layout/SpaceInsideHashLiteralBraces: Space inside } missing.
        phrase: "what's down"}
                             ^
spec/feature/integration_event_spec.rb:27:24: C: [Correctable] Style/BlockDelimiters: Avoid using {...} for multi-line blocks.
    let(:edit_service) {
                       ^
spec/feature/integration_event_spec.rb:28:5: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
        {name: "Public Speech",
    ^^^^
spec/feature/integration_event_spec.rb:28:9: C: [Correctable] Layout/SpaceInsideHashLiteralBraces: Space inside { missing.
        {name: "Public Speech",
        ^
spec/feature/integration_event_spec.rb:28:10: C: [Correctable] Layout/FirstHashElementLineBreak: Add a line break before the first element of a multi-line hash.
        {name: "Public Speech",
         ^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_event_spec.rb:28:16: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
        {name: "Public Speech",
               ^^^^^^^^^^^^^^^
spec/feature/integration_event_spec.rb:29:9: C: [Correctable] Layout/HashAlignment: Align the keys of a hash literal if they span more than one line.
        date: Date.parse("2022-11-10"),
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_event_spec.rb:29:26: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
        date: Date.parse("2022-11-10"),
                         ^^^^^^^^^^^^
spec/feature/integration_event_spec.rb:30:9: C: [Correctable] Layout/HashAlignment: Align the keys of a hash literal if they span more than one line.
        point_type: "Outreach",
        ^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_event_spec.rb:30:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
        point_type: "Outreach",
                    ^^^^^^^^^^
spec/feature/integration_event_spec.rb:31:9: C: [Correctable] Layout/HashAlignment: Align the keys of a hash literal if they span more than one line.
        event_type: "Marketing"}
        ^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_event_spec.rb:31:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
        event_type: "Marketing"}
                    ^^^^^^^^^^^
spec/feature/integration_event_spec.rb:31:32: C: [Correctable] Layout/MultilineHashBraceLayout: Closing hash brace must be on the line after the last hash element.
        event_type: "Marketing"}
                               ^
spec/feature/integration_event_spec.rb:31:32: C: [Correctable] Layout/SpaceInsideHashLiteralBraces: Space inside } missing.
        event_type: "Marketing"}
                               ^
spec/feature/integration_event_spec.rb:34:27: C: [Correctable] Style/BlockDelimiters: Avoid using {...} for multi-line blocks.
    let(:invalid_general) {
                          ^
spec/feature/integration_event_spec.rb:35:5: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
        {name: nil,
    ^^^^
spec/feature/integration_event_spec.rb:35:9: C: [Correctable] Layout/SpaceInsideHashLiteralBraces: Space inside { missing.
        {name: nil,
        ^
spec/feature/integration_event_spec.rb:35:10: C: [Correctable] Layout/FirstHashElementLineBreak: Add a line break before the first element of a multi-line hash.
        {name: nil,
         ^^^^^^^^^
spec/feature/integration_event_spec.rb:36:9: C: [Correctable] Layout/HashAlignment: Align the keys of a hash literal if they span more than one line.
        date: nil}
        ^^^^^^^^^
spec/feature/integration_event_spec.rb:36:18: C: [Correctable] Layout/MultilineHashBraceLayout: Closing hash brace must be on the line after the last hash element.
        date: nil}
                 ^
spec/feature/integration_event_spec.rb:36:18: C: [Correctable] Layout/SpaceInsideHashLiteralBraces: Space inside } missing.
        date: nil}
                 ^
spec/feature/integration_event_spec.rb:38:1: C: [Correctable] Layout/TrailingWhitespace: Trailing whitespace detected.
spec/feature/integration_event_spec.rb:39:27: C: [Correctable] Style/BlockDelimiters: Avoid using {...} for multi-line blocks.
    let(:invalid_meeting) {
                          ^
spec/feature/integration_event_spec.rb:40:5: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
        {name: "Jan Meeting",
    ^^^^
spec/feature/integration_event_spec.rb:40:9: C: [Correctable] Layout/SpaceInsideHashLiteralBraces: Space inside { missing.
        {name: "Jan Meeting",
        ^
spec/feature/integration_event_spec.rb:40:10: C: [Correctable] Layout/FirstHashElementLineBreak: Add a line break before the first element of a multi-line hash.
        {name: "Jan Meeting",
         ^^^^^^^^^^^^^^^^^^^
spec/feature/integration_event_spec.rb:40:16: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
        {name: "Jan Meeting",
               ^^^^^^^^^^^^^
spec/feature/integration_event_spec.rb:41:9: C: [Correctable] Layout/HashAlignment: Align the keys of a hash literal if they span more than one line.
        date: Date.parse("2022-12-15"),
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_event_spec.rb:41:26: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
        date: Date.parse("2022-12-15"),
                         ^^^^^^^^^^^^
spec/feature/integration_event_spec.rb:42:9: C: [Correctable] Layout/HashAlignment: Align the keys of a hash literal if they span more than one line.
        event_type: "Meeting",
        ^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_event_spec.rb:42:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
        event_type: "Meeting",
                    ^^^^^^^^^
spec/feature/integration_event_spec.rb:43:9: C: [Correctable] Layout/HashAlignment: Align the keys of a hash literal if they span more than one line.
        phrase: nil}
        ^^^^^^^^^^^
spec/feature/integration_event_spec.rb:43:20: C: [Correctable] Layout/MultilineHashBraceLayout: Closing hash brace must be on the line after the last hash element.
        phrase: nil}
                   ^
spec/feature/integration_event_spec.rb:43:20: C: [Correctable] Layout/SpaceInsideHashLiteralBraces: Space inside } missing.
        phrase: nil}
                   ^
spec/feature/integration_event_spec.rb:46:27: C: [Correctable] Style/BlockDelimiters: Avoid using {...} for multi-line blocks.
    let(:invalid_service) {
                          ^
spec/feature/integration_event_spec.rb:47:5: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
        {name: "Park clean up",
    ^^^^
spec/feature/integration_event_spec.rb:47:9: C: [Correctable] Layout/SpaceInsideHashLiteralBraces: Space inside { missing.
        {name: "Park clean up",
        ^
spec/feature/integration_event_spec.rb:47:10: C: [Correctable] Layout/FirstHashElementLineBreak: Add a line break before the first element of a multi-line hash.
        {name: "Park clean up",
         ^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_event_spec.rb:47:16: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
        {name: "Park clean up",
               ^^^^^^^^^^^^^^^
spec/feature/integration_event_spec.rb:48:9: C: [Correctable] Layout/HashAlignment: Align the keys of a hash literal if they span more than one line.
        date: Date.parse("2022-12-15"),
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_event_spec.rb:48:26: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
        date: Date.parse("2022-12-15"),
                         ^^^^^^^^^^^^
spec/feature/integration_event_spec.rb:49:9: C: [Correctable] Layout/HashAlignment: Align the keys of a hash literal if they span more than one line.
        point_type: '',
        ^^^^^^^^^^^^^^
spec/feature/integration_event_spec.rb:50:9: C: [Correctable] Layout/HashAlignment: Align the keys of a hash literal if they span more than one line.
        event_type: "Service"}
        ^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_event_spec.rb:50:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
        event_type: "Service"}
                    ^^^^^^^^^
spec/feature/integration_event_spec.rb:50:30: C: [Correctable] Layout/MultilineHashBraceLayout: Closing hash brace must be on the line after the last hash element.
        event_type: "Service"}
                             ^
spec/feature/integration_event_spec.rb:50:30: C: [Correctable] Layout/SpaceInsideHashLiteralBraces: Space inside } missing.
        event_type: "Service"}
                             ^
spec/feature/integration_event_spec.rb:53:5: C: RSpec/MultipleMemoizedHelpers: Example group has too many memoized helpers [7/5]
    describe "Creation" do ...
    ^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_event_spec.rb:53:14: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    describe "Creation" do
             ^^^^^^^^^^
spec/feature/integration_event_spec.rb:54:5: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
        scenario 'create meeting with valid inputs' do
    ^^^^
spec/feature/integration_event_spec.rb:54:9: C: [Correctable] RSpec/Capybara/FeatureMethods: Use it instead of scenario.
        scenario 'create meeting with valid inputs' do
        ^^^^^^^^
spec/feature/integration_event_spec.rb:55:9: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
            visit new_event_path
        ^^^^
spec/feature/integration_event_spec.rb:56:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            fill_in "event[name]", with: valid_meeting[:name]
                    ^^^^^^^^^^^^^
spec/feature/integration_event_spec.rb:57:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            fill_in "event[date]", with: valid_meeting[:date]
                    ^^^^^^^^^^^^^
spec/feature/integration_event_spec.rb:58:54: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            select valid_meeting[:event_type], from: "event[event_type]"
                                                     ^^^^^^^^^^^^^^^^^^^
spec/feature/integration_event_spec.rb:59:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            fill_in "event[phrase]", with: valid_meeting[:phrase]
                    ^^^^^^^^^^^^^^^
spec/feature/integration_event_spec.rb:61:13: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
            expect(page).to have_content("Event was successfully created")
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_event_spec.rb:61:42: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            expect(page).to have_content("Event was successfully created")
                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_event_spec.rb:64:9: C: [Correctable] RSpec/Capybara/FeatureMethods: Use it instead of scenario.
        scenario 'create service with valid inputs' do
        ^^^^^^^^
spec/feature/integration_event_spec.rb:65:9: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
            visit new_event_path
        ^^^^
spec/feature/integration_event_spec.rb:66:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            fill_in "event[name]", with: valid_service[:name]
                    ^^^^^^^^^^^^^
spec/feature/integration_event_spec.rb:67:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            fill_in "event[date]", with: valid_service[:date]
                    ^^^^^^^^^^^^^
spec/feature/integration_event_spec.rb:68:54: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            select valid_service[:event_type], from: "event[event_type]"
                                                     ^^^^^^^^^^^^^^^^^^^
spec/feature/integration_event_spec.rb:69:54: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            select valid_service[:point_type], from: "event[point_type]"
                                                     ^^^^^^^^^^^^^^^^^^^
spec/feature/integration_event_spec.rb:71:13: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
            expect(page).to have_content("Event was successfully created")
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_event_spec.rb:71:42: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            expect(page).to have_content("Event was successfully created")
                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_event_spec.rb:75:9: C: [Correctable] RSpec/Capybara/FeatureMethods: Use it instead of scenario.
        scenario 'create with invalid name' do
        ^^^^^^^^
spec/feature/integration_event_spec.rb:76:9: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
            visit new_event_path
        ^^^^
spec/feature/integration_event_spec.rb:77:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            fill_in "event[name]", with: invalid_general[:name]
                    ^^^^^^^^^^^^^
spec/feature/integration_event_spec.rb:78:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            fill_in "event[date]", with: valid_meeting[:date]
                    ^^^^^^^^^^^^^
spec/feature/integration_event_spec.rb:79:54: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            select valid_meeting[:event_type], from: "event[event_type]"
                                                     ^^^^^^^^^^^^^^^^^^^
spec/feature/integration_event_spec.rb:80:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            fill_in "event[phrase]", with: valid_meeting[:phrase]
                    ^^^^^^^^^^^^^^^
spec/feature/integration_event_spec.rb:82:13: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
            expect(page).to have_content("Name can't be blank")
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_event_spec.rb:85:9: C: [Correctable] RSpec/Capybara/FeatureMethods: Use it instead of scenario.
        scenario 'create with invalid date' do
        ^^^^^^^^
spec/feature/integration_event_spec.rb:86:9: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
            visit new_event_path
        ^^^^
spec/feature/integration_event_spec.rb:87:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            fill_in "event[name]", with: invalid_meeting[:name]
                    ^^^^^^^^^^^^^
spec/feature/integration_event_spec.rb:88:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            fill_in "event[date]", with: invalid_general[:date]
                    ^^^^^^^^^^^^^
spec/feature/integration_event_spec.rb:89:54: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            select valid_meeting[:event_type], from: "event[event_type]"
                                                     ^^^^^^^^^^^^^^^^^^^
spec/feature/integration_event_spec.rb:90:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            fill_in "event[phrase]", with: valid_meeting[:phrase]
                    ^^^^^^^^^^^^^^^
spec/feature/integration_event_spec.rb:92:13: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
            expect(page).to have_content("Date can't be blank")
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_event_spec.rb:95:9: C: [Correctable] RSpec/Capybara/FeatureMethods: Use it instead of scenario.
        scenario 'create meeting without phrase' do
        ^^^^^^^^
spec/feature/integration_event_spec.rb:96:9: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
            visit new_event_path
        ^^^^
spec/feature/integration_event_spec.rb:97:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            fill_in "event[name]", with: invalid_meeting[:name]
                    ^^^^^^^^^^^^^
spec/feature/integration_event_spec.rb:98:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            fill_in "event[date]", with: invalid_general[:date]
                    ^^^^^^^^^^^^^
spec/feature/integration_event_spec.rb:99:54: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            select valid_meeting[:event_type], from: "event[event_type]"
                                                     ^^^^^^^^^^^^^^^^^^^
spec/feature/integration_event_spec.rb:100:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            fill_in "event[phrase]", with: invalid_meeting[:phrase]
                    ^^^^^^^^^^^^^^^
spec/feature/integration_event_spec.rb:102:13: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
            expect(page).to have_content("Phrase can't be blank when there is a meeting")
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_event_spec.rb:105:9: C: [Correctable] RSpec/Capybara/FeatureMethods: Use it instead of scenario.
        scenario 'create service without point type' do
        ^^^^^^^^
spec/feature/integration_event_spec.rb:106:9: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
            visit new_event_path
        ^^^^
spec/feature/integration_event_spec.rb:107:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            fill_in "event[name]", with: valid_service[:name]
                    ^^^^^^^^^^^^^
spec/feature/integration_event_spec.rb:108:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            fill_in "event[date]", with: valid_service[:date]
                    ^^^^^^^^^^^^^
spec/feature/integration_event_spec.rb:109:54: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            select valid_service[:event_type], from: "event[event_type]"
                                                     ^^^^^^^^^^^^^^^^^^^
spec/feature/integration_event_spec.rb:110:56: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            select invalid_service[:point_type], from: "event[point_type]"
                                                       ^^^^^^^^^^^^^^^^^^^
spec/feature/integration_event_spec.rb:112:13: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
            expect(page).to have_content("Point type point type can't be blank when there is a service")
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_event_spec.rb:116:5: C: RSpec/MultipleMemoizedHelpers: Example group has too many memoized helpers [7/5]
    describe "Editing" do ...
    ^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_event_spec.rb:116:14: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    describe "Editing" do
             ^^^^^^^^^
spec/feature/integration_event_spec.rb:117:1: C: [Correctable] Layout/EmptyLinesAroundBlockBody: Extra empty line detected at block body beginning.
spec/feature/integration_event_spec.rb:119:5: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
        scenario 'update service with valid inputs' do
    ^^^^
spec/feature/integration_event_spec.rb:119:9: C: [Correctable] RSpec/Capybara/FeatureMethods: Use it instead of scenario.
        scenario 'update service with valid inputs' do
        ^^^^^^^^
spec/feature/integration_event_spec.rb:120:9: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
            @temp = Event.create!(valid_service)
        ^^^^
spec/feature/integration_event_spec.rb:121:35: C: RSpec/InstanceVariable: Avoid instance variables – use let, a method call, or a local variable (if possible).
            visit edit_event_path(@temp)
                                  ^^^^^
spec/feature/integration_event_spec.rb:122:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            fill_in "event[name]", with: edit_service[:name]
                    ^^^^^^^^^^^^^
spec/feature/integration_event_spec.rb:123:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            fill_in "event[date]", with: edit_service[:date]
                    ^^^^^^^^^^^^^
spec/feature/integration_event_spec.rb:124:53: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            select edit_service[:point_type], from: "event[point_type]"
                                                    ^^^^^^^^^^^^^^^^^^^
spec/feature/integration_event_spec.rb:125:54: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            select valid_service[:event_type], from: "event[event_type]"
                                                     ^^^^^^^^^^^^^^^^^^^
spec/feature/integration_event_spec.rb:127:13: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
            expect(page).to have_content("Event was successfully updated")
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_event_spec.rb:127:42: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            expect(page).to have_content("Event was successfully updated")
                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_event_spec.rb:130:9: C: [Correctable] RSpec/Capybara/FeatureMethods: Use it instead of scenario.
        scenario 'update meeting with valid inputs' do
        ^^^^^^^^
spec/feature/integration_event_spec.rb:131:9: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
            @temp = Event.create!(valid_meeting)
        ^^^^
spec/feature/integration_event_spec.rb:132:35: C: RSpec/InstanceVariable: Avoid instance variables – use let, a method call, or a local variable (if possible).
            visit edit_event_path(@temp)
                                  ^^^^^
spec/feature/integration_event_spec.rb:133:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            fill_in "event[name]", with: edit_meeting[:name]
                    ^^^^^^^^^^^^^
spec/feature/integration_event_spec.rb:134:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            fill_in "event[date]", with: edit_meeting[:date]
                    ^^^^^^^^^^^^^
spec/feature/integration_event_spec.rb:135:54: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            select valid_meeting[:event_type], from: "event[event_type]"
                                                     ^^^^^^^^^^^^^^^^^^^
spec/feature/integration_event_spec.rb:136:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            fill_in "event[phrase]", with: edit_meeting[:phrase]
                    ^^^^^^^^^^^^^^^
spec/feature/integration_event_spec.rb:138:13: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
            expect(page).to have_content("Event was successfully updated")
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_event_spec.rb:138:42: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            expect(page).to have_content("Event was successfully updated")
                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_event_spec.rb:141:9: C: [Correctable] Layout/LeadingCommentSpace: Missing space after #.
        #invalid scenarios
        ^^^^^^^^^^^^^^^^^^
spec/feature/integration_event_spec.rb:142:9: C: [Correctable] RSpec/Capybara/FeatureMethods: Use it instead of scenario.
        scenario 'update with invalid name' do
        ^^^^^^^^
spec/feature/integration_event_spec.rb:143:9: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
            @temp = Event.create!(valid_meeting)
        ^^^^
spec/feature/integration_event_spec.rb:144:35: C: RSpec/InstanceVariable: Avoid instance variables – use let, a method call, or a local variable (if possible).
            visit edit_event_path(@temp)
                                  ^^^^^
spec/feature/integration_event_spec.rb:145:54: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            select valid_meeting[:event_type], from: "event[event_type]"
                                                     ^^^^^^^^^^^^^^^^^^^
spec/feature/integration_event_spec.rb:146:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            fill_in "event[name]", with: invalid_general[:name]
                    ^^^^^^^^^^^^^
spec/feature/integration_event_spec.rb:148:13: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
            expect(page).to have_content("Name can't be blank")
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_event_spec.rb:151:9: C: [Correctable] RSpec/Capybara/FeatureMethods: Use it instead of scenario.
        scenario 'update with invalid date' do
        ^^^^^^^^
spec/feature/integration_event_spec.rb:152:9: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
            @temp = Event.create!(valid_meeting)
        ^^^^
spec/feature/integration_event_spec.rb:153:35: C: RSpec/InstanceVariable: Avoid instance variables – use let, a method call, or a local variable (if possible).
            visit edit_event_path(@temp)
                                  ^^^^^
spec/feature/integration_event_spec.rb:154:54: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            select valid_meeting[:event_type], from: "event[event_type]"
                                                     ^^^^^^^^^^^^^^^^^^^
spec/feature/integration_event_spec.rb:155:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            fill_in "event[date]", with: invalid_general[:date]
                    ^^^^^^^^^^^^^
spec/feature/integration_event_spec.rb:157:13: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
            expect(page).to have_content("Date can't be blank")
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_event_spec.rb:160:9: C: [Correctable] RSpec/Capybara/FeatureMethods: Use it instead of scenario.
        scenario 'update with meeting without phrase' do
        ^^^^^^^^
spec/feature/integration_event_spec.rb:161:9: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
            @temp = Event.create!(valid_meeting)
        ^^^^
spec/feature/integration_event_spec.rb:162:35: C: RSpec/InstanceVariable: Avoid instance variables – use let, a method call, or a local variable (if possible).
            visit edit_event_path(@temp)
                                  ^^^^^
spec/feature/integration_event_spec.rb:163:54: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            select valid_meeting[:event_type], from: "event[event_type]"
                                                     ^^^^^^^^^^^^^^^^^^^
spec/feature/integration_event_spec.rb:164:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            fill_in "event[phrase]", with: invalid_meeting[:phrase]
                    ^^^^^^^^^^^^^^^
spec/feature/integration_event_spec.rb:166:13: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
            expect(page).to have_content("Phrase can't be blank when there is a meeting")
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_event_spec.rb:169:9: C: [Correctable] RSpec/Capybara/FeatureMethods: Use it instead of scenario.
        scenario 'update with service without point type' do
        ^^^^^^^^
spec/feature/integration_event_spec.rb:170:9: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
            @temp = Event.create!(valid_service)
        ^^^^
spec/feature/integration_event_spec.rb:171:35: C: RSpec/InstanceVariable: Avoid instance variables – use let, a method call, or a local variable (if possible).
            visit edit_event_path(@temp)
                                  ^^^^^
spec/feature/integration_event_spec.rb:172:56: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            select invalid_service[:point_type], from: "event[point_type]"
                                                       ^^^^^^^^^^^^^^^^^^^
spec/feature/integration_event_spec.rb:173:54: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            select valid_service[:event_type], from: "event[event_type]"
                                                     ^^^^^^^^^^^^^^^^^^^
spec/feature/integration_event_spec.rb:175:13: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
            expect(page).to have_content("Point type point type can't be blank when there is a service")
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_event_spec.rb:179:5: C: RSpec/MultipleMemoizedHelpers: Example group has too many memoized helpers [7/5]
    describe "Deletion" do ...
    ^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_event_spec.rb:179:14: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    describe "Deletion" do
             ^^^^^^^^^^
spec/feature/integration_event_spec.rb:180:1: C: [Correctable] Layout/EmptyLinesAroundBlockBody: Extra empty line detected at block body beginning.
spec/feature/integration_event_spec.rb:181:5: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
        scenario 'access deletion page' do
    ^^^^
spec/feature/integration_event_spec.rb:181:9: C: [Correctable] RSpec/Capybara/FeatureMethods: Use it instead of scenario.
        scenario 'access deletion page' do
        ^^^^^^^^
spec/feature/integration_event_spec.rb:182:9: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
            @temp = Event.create!(valid_meeting)
        ^^^^
spec/feature/integration_event_spec.rb:183:29: C: RSpec/InstanceVariable: Avoid instance variables – use let, a method call, or a local variable (if possible).
            visit event_url(@temp)
                            ^^^^^
spec/feature/integration_event_spec.rb:185:13: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
            expect(page).to have_content("Are you sure you want to permanently delete this event?")
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_event_spec.rb:185:42: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            expect(page).to have_content("Are you sure you want to permanently delete this event?")
                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_event_spec.rb:188:9: C: [Correctable] RSpec/Capybara/FeatureMethods: Use it instead of scenario.
        scenario 'delete entry' do
        ^^^^^^^^
spec/feature/integration_event_spec.rb:189:9: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
            @temp = Event.create!(valid_meeting)
        ^^^^
spec/feature/integration_event_spec.rb:190:37: C: RSpec/InstanceVariable: Avoid instance variables – use let, a method call, or a local variable (if possible).
            visit delete_event_path(@temp)
                                    ^^^^^
spec/feature/integration_event_spec.rb:192:13: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
            expect(page).to have_content("Event was successfully destroyed")
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_event_spec.rb:192:42: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            expect(page).to have_content("Event was successfully destroyed")
                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_event_spec.rb:195:4: C: [Correctable] Layout/TrailingEmptyLines: Final newline missing.
end
   
spec/feature/integration_excuse.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
require 'rails_helper'
^
spec/feature/integration_excuse.rb:3:1: C: RSpec/FilePath: Spec path should end with *_spec.rb.
RSpec.describe "Excuse integration", type: :feature do
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_excuse.rb:3:1: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
RSpec.describe "Excuse integration", type: :feature do
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_excuse.rb:3:16: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
RSpec.describe "Excuse integration", type: :feature do
               ^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_excuse.rb:4:1: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
    let(:valid_attributes) {
^^^^
spec/feature/integration_excuse.rb:4:28: C: [Correctable] Style/BlockDelimiters: Avoid using {...} for multi-line blocks.
    let(:valid_attributes) {
                           ^
spec/feature/integration_excuse.rb:5:5: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
        {
    ^^^^
spec/feature/integration_excuse.rb:6:13: C: [Correctable] Layout/FirstHashElementIndentation: Use 2 spaces for indentation in a hash, relative to the start of the line where the left curly brace is.
            description: "MyDescription1"
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_excuse.rb:6:26: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            description: "MyDescription1"
                         ^^^^^^^^^^^^^^^^
spec/feature/integration_excuse.rb:10:27: C: [Correctable] Style/BlockDelimiters: Avoid using {...} for multi-line blocks.
    let(:edit_attributes) {
                          ^
spec/feature/integration_excuse.rb:11:5: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
        {
    ^^^^
spec/feature/integration_excuse.rb:12:13: C: [Correctable] Layout/FirstHashElementIndentation: Use 2 spaces for indentation in a hash, relative to the start of the line where the left curly brace is.
            description: "MyDescription2"
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_excuse.rb:12:26: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            description: "MyDescription2"
                         ^^^^^^^^^^^^^^^^
spec/feature/integration_excuse.rb:15:1: C: [Correctable] Layout/TrailingWhitespace: Trailing whitespace detected.
spec/feature/integration_excuse.rb:16:30: C: [Correctable] Style/BlockDelimiters: Avoid using {...} for multi-line blocks.
    let(:invalid_attributes) {
                             ^
spec/feature/integration_excuse.rb:17:5: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
        skip("Add a hash of attributes invalid for your model")
    ^^^^
spec/feature/integration_excuse.rb:17:14: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
        skip("Add a hash of attributes invalid for your model")
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_excuse.rb:20:14: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    describe "Creation" do
             ^^^^^^^^^^
spec/feature/integration_excuse.rb:21:5: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
        scenario 'create with valid inputs' do
    ^^^^
spec/feature/integration_excuse.rb:21:9: C: [Correctable] RSpec/Capybara/FeatureMethods: Use it instead of scenario.
        scenario 'create with valid inputs' do
        ^^^^^^^^
spec/feature/integration_excuse.rb:22:9: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
            visit new_excuse_path
        ^^^^
spec/feature/integration_excuse.rb:23:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            fill_in "excuse[description]", with: valid_attributes[:description]
                    ^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_excuse.rb:24:22: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            click_on "Create Excuse"
                     ^^^^^^^^^^^^^^^
spec/feature/integration_excuse.rb:25:13: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
            expect(page).to have_content("Excuse was successfully created")
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_excuse.rb:25:42: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            expect(page).to have_content("Excuse was successfully created")
                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_excuse.rb:29:14: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    describe "Editing" do
             ^^^^^^^^^
spec/feature/integration_excuse.rb:30:5: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
        scenario 'update with valid attributes' do
    ^^^^
spec/feature/integration_excuse.rb:30:9: C: [Correctable] RSpec/Capybara/FeatureMethods: Use it instead of scenario.
        scenario 'update with valid attributes' do
        ^^^^^^^^
spec/feature/integration_excuse.rb:31:9: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
            @temp = Excuse.create!(valid_attributes)
        ^^^^
spec/feature/integration_excuse.rb:32:36: C: RSpec/InstanceVariable: Avoid instance variables – use let, a method call, or a local variable (if possible).
            visit edit_excuse_path(@temp)
                                   ^^^^^
spec/feature/integration_excuse.rb:33:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            fill_in "excuse[description]", with: edit_attributes[:description]
                    ^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_excuse.rb:34:22: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            click_on "Update Excuse"
                     ^^^^^^^^^^^^^^^
spec/feature/integration_excuse.rb:35:13: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
            expect(page).to have_content("Excuse was successfully updated")
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_excuse.rb:35:42: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            expect(page).to have_content("Excuse was successfully updated")
                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_excuse.rb:37:1: C: [Correctable] Layout/TrailingWhitespace: Trailing whitespace detected.
spec/feature/integration_excuse.rb:40:14: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    describe "Deletion" do
             ^^^^^^^^^^
spec/feature/integration_excuse.rb:41:5: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
        scenario "delete entry" do
    ^^^^
spec/feature/integration_excuse.rb:41:9: C: [Correctable] RSpec/Capybara/FeatureMethods: Use it instead of scenario.
        scenario "delete entry" do
        ^^^^^^^^
spec/feature/integration_excuse.rb:41:18: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
        scenario "delete entry" do
                 ^^^^^^^^^^^^^^
spec/feature/integration_excuse.rb:42:9: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
            @temp = Excuse.create!(valid_attributes)
        ^^^^
spec/feature/integration_excuse.rb:44:13: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
            expect(page).to have_content(valid_attributes[:name])
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_excuse.rb:45:13: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
            expect(page).to have_content(valid_attributes[:leader_member_id])
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_excuse.rb:47:38: C: RSpec/InstanceVariable: Avoid instance variables – use let, a method call, or a local variable (if possible).
            visit delete_excuse_path(@temp)
                                     ^^^^^
spec/feature/integration_excuse.rb:48:22: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            click_on "Delete excuse"
                     ^^^^^^^^^^^^^^^
spec/feature/integration_excuse.rb:49:13: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
            expect(page).to have_content("Excuse was successfully destroyed.")
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_excuse.rb:49:42: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            expect(page).to have_content("Excuse was successfully destroyed.")
                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_excuse.rb:50:1: C: [Correctable] Layout/EmptyLinesAroundBlockBody: Extra empty line detected at block body end.
spec/feature/integration_excuse.rb:53:4: C: [Correctable] Layout/TrailingEmptyLines: Final newline missing.
end
   
spec/feature/integration_member_event.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
require 'rails_helper'
^
spec/feature/integration_member_event.rb:3:1: C: RSpec/FilePath: Spec path should end with *_spec.rb.
RSpec.describe "Member_Event integration", type: :feature do
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_member_event.rb:3:1: C: RSpec/MultipleMemoizedHelpers: Example group has too many memoized helpers [7/5]
RSpec.describe "Member_Event integration", type: :feature do ...
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_member_event.rb:3:1: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
RSpec.describe "Member_Event integration", type: :feature do
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_member_event.rb:3:16: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
RSpec.describe "Member_Event integration", type: :feature do
               ^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_member_event.rb:4:1: C: [Correctable] Layout/EmptyLinesAroundBlockBody: Extra empty line detected at block body beginning.
spec/feature/integration_member_event.rb:5:1: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
    let(:member) {
^^^^
spec/feature/integration_member_event.rb:5:18: C: [Correctable] Style/BlockDelimiters: Avoid using {...} for multi-line blocks.
    let(:member) {
                 ^
spec/feature/integration_member_event.rb:6:5: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
        Member.create!(
    ^^^^
spec/feature/integration_member_event.rb:7:9: C: [Correctable] Layout/FirstArgumentIndentation: Indent the first argument one step more than the start of the previous line.
        name: "MyName1"
        ^^^^^^^^^^^^^^^
spec/feature/integration_member_event.rb:7:15: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
        name: "MyName1"
              ^^^^^^^^^
spec/feature/integration_member_event.rb:8:9: C: [Correctable] Layout/ClosingParenthesisIndentation: Indent ) to column 6 (not 8)
        )
        ^
spec/feature/integration_member_event.rb:10:17: C: [Correctable] Style/BlockDelimiters: Avoid using {...} for multi-line blocks.
    let(:event) {
                ^
spec/feature/integration_member_event.rb:11:5: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
        Event.create!(
    ^^^^
spec/feature/integration_member_event.rb:12:13: C: [Correctable] Layout/FirstArgumentIndentation: Indent the first argument one step more than the start of the previous line.
            name: "Park clean up", ...
            ^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_member_event.rb:12:19: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            name: "Park clean up",
                  ^^^^^^^^^^^^^^^
spec/feature/integration_member_event.rb:13:30: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            date: Date.parse("2022-12-15"),
                             ^^^^^^^^^^^^
spec/feature/integration_member_event.rb:14:25: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            point_type: "Outreach",
                        ^^^^^^^^^^
spec/feature/integration_member_event.rb:15:25: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            event_type: "Service"
                        ^^^^^^^^^
spec/feature/integration_member_event.rb:16:9: C: [Correctable] Layout/ClosingParenthesisIndentation: Indent ) to column 10 (not 8)
        )
        ^
spec/feature/integration_member_event.rb:19:19: C: [Correctable] Style/BlockDelimiters: Avoid using {...} for multi-line blocks.
    let(:member2) {
                  ^
spec/feature/integration_member_event.rb:20:5: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
        Member.create!(
    ^^^^
spec/feature/integration_member_event.rb:21:17: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
          name: "MyName2"
                ^^^^^^^^^
spec/feature/integration_member_event.rb:24:18: C: [Correctable] Style/BlockDelimiters: Avoid using {...} for multi-line blocks.
    let(:event2) {
                 ^
spec/feature/integration_member_event.rb:25:5: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
        Event.create!(
    ^^^^
spec/feature/integration_member_event.rb:26:13: C: [Correctable] Layout/FirstArgumentIndentation: Indent the first argument one step more than the start of the previous line.
            name: "Jan Meeting", ...
            ^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_member_event.rb:26:19: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            name: "Jan Meeting",
                  ^^^^^^^^^^^^^
spec/feature/integration_member_event.rb:27:30: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            date: Date.parse("2022-01-01"),
                             ^^^^^^^^^^^^
spec/feature/integration_member_event.rb:28:25: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            event_type: "Meeting",
                        ^^^^^^^^^
spec/feature/integration_member_event.rb:30:9: C: [Correctable] Layout/ClosingParenthesisIndentation: Indent ) to column 10 (not 8)
        )
        ^
spec/feature/integration_member_event.rb:33:28: C: [Correctable] Style/BlockDelimiters: Avoid using {...} for multi-line blocks.
    let(:valid_attributes) {
                           ^
spec/feature/integration_member_event.rb:34:5: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
        {event_id: event.id,
    ^^^^
spec/feature/integration_member_event.rb:34:9: C: [Correctable] Layout/SpaceInsideHashLiteralBraces: Space inside { missing.
        {event_id: event.id,
        ^
spec/feature/integration_member_event.rb:34:10: C: [Correctable] Layout/FirstHashElementLineBreak: Add a line break before the first element of a multi-line hash.
        {event_id: event.id,
         ^^^^^^^^^^^^^^^^^^
spec/feature/integration_member_event.rb:35:9: C: [Correctable] Layout/HashAlignment: Align the keys of a hash literal if they span more than one line.
        member_id: member.id}
        ^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_member_event.rb:35:29: C: [Correctable] Layout/MultilineHashBraceLayout: Closing hash brace must be on the line after the last hash element.
        member_id: member.id}
                            ^
spec/feature/integration_member_event.rb:35:29: C: [Correctable] Layout/SpaceInsideHashLiteralBraces: Space inside } missing.
        member_id: member.id}
                            ^
spec/feature/integration_member_event.rb:38:27: C: [Correctable] Style/BlockDelimiters: Avoid using {...} for multi-line blocks.
    let(:edit_attributes) {
                          ^
spec/feature/integration_member_event.rb:39:5: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
        {event_id: event2.id,
    ^^^^
spec/feature/integration_member_event.rb:39:9: C: [Correctable] Layout/SpaceInsideHashLiteralBraces: Space inside { missing.
        {event_id: event2.id,
        ^
spec/feature/integration_member_event.rb:39:10: C: [Correctable] Layout/FirstHashElementLineBreak: Add a line break before the first element of a multi-line hash.
        {event_id: event2.id,
         ^^^^^^^^^^^^^^^^^^^
spec/feature/integration_member_event.rb:40:9: C: [Correctable] Layout/HashAlignment: Align the keys of a hash literal if they span more than one line.
        member_id: member2.id}
        ^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_member_event.rb:40:30: C: [Correctable] Layout/MultilineHashBraceLayout: Closing hash brace must be on the line after the last hash element.
        member_id: member2.id}
                             ^
spec/feature/integration_member_event.rb:40:30: C: [Correctable] Layout/SpaceInsideHashLiteralBraces: Space inside } missing.
        member_id: member2.id}
                             ^
spec/feature/integration_member_event.rb:43:30: C: [Correctable] Style/BlockDelimiters: Avoid using {...} for multi-line blocks.
    let(:invalid_attributes) {
                             ^
spec/feature/integration_member_event.rb:44:5: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
        skip("Add a hash of attributes invalid for your model")
    ^^^^
spec/feature/integration_member_event.rb:44:14: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
        skip("Add a hash of attributes invalid for your model")
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_member_event.rb:47:5: C: RSpec/MultipleMemoizedHelpers: Example group has too many memoized helpers [7/5]
    describe "Creation" do ...
    ^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_member_event.rb:47:14: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    describe "Creation" do
             ^^^^^^^^^^
spec/feature/integration_member_event.rb:48:5: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
        scenario "create with valid inputs" do
    ^^^^
spec/feature/integration_member_event.rb:48:9: C: [Correctable] RSpec/Capybara/FeatureMethods: Use it instead of scenario.
        scenario "create with valid inputs" do
        ^^^^^^^^
spec/feature/integration_member_event.rb:48:18: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
        scenario "create with valid inputs" do
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_member_event.rb:49:9: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
            visit new_member_event_path
        ^^^^
spec/feature/integration_member_event.rb:50:55: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            select valid_attributes[:event_id], from: "member_event[event_id]"
                                                      ^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_member_event.rb:51:56: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            select valid_attributes[:member_id], from: "member_event[member_id]"
                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_member_event.rb:53:13: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
            expect(page).to have_content("Member event successfully created")
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_member_event.rb:53:42: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            expect(page).to have_content("Member event successfully created")
                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_member_event.rb:57:5: C: RSpec/MultipleMemoizedHelpers: Example group has too many memoized helpers [7/5]
    describe "Editing" do ...
    ^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_member_event.rb:57:14: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    describe "Editing" do
             ^^^^^^^^^
spec/feature/integration_member_event.rb:58:1: C: [Correctable] Layout/EmptyLinesAroundBlockBody: Extra empty line detected at block body beginning.
spec/feature/integration_member_event.rb:59:5: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
        scenario 'update with valid inputs' do
    ^^^^
spec/feature/integration_member_event.rb:59:9: C: [Correctable] RSpec/Capybara/FeatureMethods: Use it instead of scenario.
        scenario 'update with valid inputs' do
        ^^^^^^^^
spec/feature/integration_member_event.rb:60:9: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
            @temp = Member_Event.create!(valid_attributes)
        ^^^^
spec/feature/integration_member_event.rb:61:42: C: RSpec/InstanceVariable: Avoid instance variables – use let, a method call, or a local variable (if possible).
            visit edit_member_event_path(@temp)
                                         ^^^^^
spec/feature/integration_member_event.rb:62:54: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            select edit_attributes[:event_id], from: "member_event[event_id]"
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_member_event.rb:63:55: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            select edit_attributes[:member_id], from: "member_event[member_id]"
                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_member_event.rb:65:13: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
            expect(page).to have_content("Member event was successfully updated")
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_member_event.rb:65:42: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            expect(page).to have_content("Member event was successfully updated")
                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_member_event.rb:69:5: C: RSpec/MultipleMemoizedHelpers: Example group has too many memoized helpers [7/5]
    describe "Deletion" do ...
    ^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_member_event.rb:69:14: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    describe "Deletion" do
             ^^^^^^^^^^
spec/feature/integration_member_event.rb:70:5: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
        scenario 'delete entry' do
    ^^^^
spec/feature/integration_member_event.rb:70:9: C: [Correctable] RSpec/Capybara/FeatureMethods: Use it instead of scenario.
        scenario 'delete entry' do
        ^^^^^^^^
spec/feature/integration_member_event.rb:71:9: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
            @temp = Member_Event.create!(valid_meeting)
        ^^^^
spec/feature/integration_member_event.rb:72:37: C: RSpec/InstanceVariable: Avoid instance variables – use let, a method call, or a local variable (if possible).
            visit delete_event_path(@temp)
                                    ^^^^^
spec/feature/integration_member_event.rb:74:13: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
            expect(page).to have_content("Event was successfully destroyed")
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_member_event.rb:74:42: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            expect(page).to have_content("Event was successfully destroyed")
                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_member_event.rb:77:4: C: [Correctable] Layout/TrailingEmptyLines: Final newline missing.
end
   
spec/feature/integration_member_spec.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
require 'rails_helper'
^
spec/feature/integration_member_spec.rb:3:1: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
RSpec.describe "Members integration", type: :feature do
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_member_spec.rb:3:16: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
RSpec.describe "Members integration", type: :feature do
               ^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_member_spec.rb:4:1: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
    let(:valid_attributes) {
^^^^
spec/feature/integration_member_spec.rb:4:28: C: [Correctable] Style/BlockDelimiters: Avoid using {...} for multi-line blocks.
    let(:valid_attributes) {
                           ^
spec/feature/integration_member_spec.rb:5:5: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
        {
    ^^^^
spec/feature/integration_member_spec.rb:6:13: C: [Correctable] Layout/FirstHashElementIndentation: Use 2 spaces for indentation in a hash, relative to the start of the line where the left curly brace is.
            name: "MyName1",
            ^^^^^^^^^^^^^^^
spec/feature/integration_member_spec.rb:6:19: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            name: "MyName1",
                  ^^^^^^^^^
spec/feature/integration_member_spec.rb:7:24: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            committee: "MyCommittee1",
                       ^^^^^^^^^^^^^^
spec/feature/integration_member_spec.rb:8:23: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            position: "MyPosition1",
                      ^^^^^^^^^^^^^
spec/feature/integration_member_spec.rb:9:26: C: [Correctable] Style/NumericLiterals: Use underscores(_) as thousands separator and separate every 3 digits with them.
            civicPoints: 10010,
                         ^^^^^
spec/feature/integration_member_spec.rb:10:29: C: [Correctable] Style/NumericLiterals: Use underscores(_) as thousands separator and separate every 3 digits with them.
            outreachPoints: 10011,
                            ^^^^^
spec/feature/integration_member_spec.rb:11:27: C: [Correctable] Style/NumericLiterals: Use underscores(_) as thousands separator and separate every 3 digits with them.
            socialPoints: 10012,
                          ^^^^^
spec/feature/integration_member_spec.rb:12:30: C: [Correctable] Style/NumericLiterals: Use underscores(_) as thousands separator and separate every 3 digits with them.
            marketingPoints: 10013,
                             ^^^^^
spec/feature/integration_member_spec.rb:13:26: C: [Correctable] Style/NumericLiterals: Use underscores(_) as thousands separator and separate every 3 digits with them.
            totalPoints: 10014
                         ^^^^^
spec/feature/integration_member_spec.rb:17:27: C: [Correctable] Style/BlockDelimiters: Avoid using {...} for multi-line blocks.
    let(:edit_attributes) {
                          ^
spec/feature/integration_member_spec.rb:18:5: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
        {
    ^^^^
spec/feature/integration_member_spec.rb:19:13: C: [Correctable] Layout/FirstHashElementIndentation: Use 2 spaces for indentation in a hash, relative to the start of the line where the left curly brace is.
            name: "MyName2",
            ^^^^^^^^^^^^^^^
spec/feature/integration_member_spec.rb:19:19: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            name: "MyName2",
                  ^^^^^^^^^
spec/feature/integration_member_spec.rb:20:24: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            committee: "MyCommittee2",
                       ^^^^^^^^^^^^^^
spec/feature/integration_member_spec.rb:21:23: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            position: "MyPosition2",
                      ^^^^^^^^^^^^^
spec/feature/integration_member_spec.rb:22:26: C: [Correctable] Style/NumericLiterals: Use underscores(_) as thousands separator and separate every 3 digits with them.
            civicPoints: 10090,
                         ^^^^^
spec/feature/integration_member_spec.rb:23:29: C: [Correctable] Style/NumericLiterals: Use underscores(_) as thousands separator and separate every 3 digits with them.
            outreachPoints: 10091,
                            ^^^^^
spec/feature/integration_member_spec.rb:24:27: C: [Correctable] Style/NumericLiterals: Use underscores(_) as thousands separator and separate every 3 digits with them.
            socialPoints: 10092,
                          ^^^^^
spec/feature/integration_member_spec.rb:25:30: C: [Correctable] Style/NumericLiterals: Use underscores(_) as thousands separator and separate every 3 digits with them.
            marketingPoints: 10093,
                             ^^^^^
spec/feature/integration_member_spec.rb:26:26: C: [Correctable] Style/NumericLiterals: Use underscores(_) as thousands separator and separate every 3 digits with them.
            totalPoints: 10094
                         ^^^^^
spec/feature/integration_member_spec.rb:30:30: C: [Correctable] Style/BlockDelimiters: Avoid using {...} for multi-line blocks.
    let(:invalid_attributes) {
                             ^
spec/feature/integration_member_spec.rb:31:5: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
        {
    ^^^^
spec/feature/integration_member_spec.rb:32:13: C: [Correctable] Layout/FirstHashElementIndentation: Use 2 spaces for indentation in a hash, relative to the start of the line where the left curly brace is.
            name: nil
            ^^^^^^^^^
spec/feature/integration_member_spec.rb:36:14: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    describe "Creation" do
             ^^^^^^^^^^
spec/feature/integration_member_spec.rb:37:5: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
        scenario 'create with valid inputs' do
    ^^^^
spec/feature/integration_member_spec.rb:37:9: C: [Correctable] RSpec/Capybara/FeatureMethods: Use it instead of scenario.
        scenario 'create with valid inputs' do
        ^^^^^^^^
spec/feature/integration_member_spec.rb:38:9: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
            visit new_member_path
        ^^^^
spec/feature/integration_member_spec.rb:39:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            fill_in "member[name]",             with: valid_attributes[:name]
                    ^^^^^^^^^^^^^^
spec/feature/integration_member_spec.rb:40:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            fill_in "member[committee]",        with: valid_attributes[:committee]
                    ^^^^^^^^^^^^^^^^^^^
spec/feature/integration_member_spec.rb:41:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            fill_in "member[position]",         with: valid_attributes[:position]
                    ^^^^^^^^^^^^^^^^^^
spec/feature/integration_member_spec.rb:42:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            fill_in "member[civicPoints]",      with: valid_attributes[:civicPoints]
                    ^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_member_spec.rb:43:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            fill_in "member[outreachPoints]",   with: valid_attributes[:outreachPoints]
                    ^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_member_spec.rb:44:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            fill_in "member[socialPoints]",     with: valid_attributes[:socialPoints]
                    ^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_member_spec.rb:45:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            fill_in "member[marketingPoints]",  with: valid_attributes[:marketingPoints]
                    ^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_member_spec.rb:46:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            fill_in "member[totalPoints]",      with: valid_attributes[:totalPoints]
                    ^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_member_spec.rb:47:22: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            click_on "Create Member"
                     ^^^^^^^^^^^^^^^
spec/feature/integration_member_spec.rb:49:13: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
            expect(page).to have_content(valid_attributes[:name])
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_member_spec.rb:50:13: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
            expect(page).to have_content(valid_attributes[:committee])
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_member_spec.rb:51:13: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
            expect(page).to have_content(valid_attributes[:position])
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_member_spec.rb:52:13: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
            expect(page).to have_content(valid_attributes[:civicPoints])
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_member_spec.rb:53:13: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
            expect(page).to have_content(valid_attributes[:outreachPoints])
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_member_spec.rb:54:13: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
            expect(page).to have_content(valid_attributes[:socialPoints])
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_member_spec.rb:55:13: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
            expect(page).to have_content(valid_attributes[:marketingPoints])
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_member_spec.rb:56:13: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
            expect(page).to have_content(valid_attributes[:totalPoints])
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_member_spec.rb:59:9: C: [Correctable] RSpec/Capybara/FeatureMethods: Use it instead of scenario.
        scenario 'create with invalid name' do
        ^^^^^^^^
spec/feature/integration_member_spec.rb:60:9: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
            visit new_member_path
        ^^^^
spec/feature/integration_member_spec.rb:61:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            fill_in "member[committee]",        with: valid_attributes[:committee]
                    ^^^^^^^^^^^^^^^^^^^
spec/feature/integration_member_spec.rb:62:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            fill_in "member[position]",         with: valid_attributes[:position]
                    ^^^^^^^^^^^^^^^^^^
spec/feature/integration_member_spec.rb:63:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            fill_in "member[civicPoints]",      with: valid_attributes[:civicPoints]
                    ^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_member_spec.rb:64:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            fill_in "member[outreachPoints]",   with: valid_attributes[:outreachPoints]
                    ^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_member_spec.rb:65:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            fill_in "member[socialPoints]",     with: valid_attributes[:socialPoints]
                    ^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_member_spec.rb:66:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            fill_in "member[marketingPoints]",  with: valid_attributes[:marketingPoints]
                    ^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_member_spec.rb:67:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            fill_in "member[totalPoints]",      with: valid_attributes[:totalPoints]
                    ^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_member_spec.rb:68:22: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            click_on "Create Member"
                     ^^^^^^^^^^^^^^^
spec/feature/integration_member_spec.rb:70:13: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
            expect(page).not_to have_content(valid_attributes[:committee])
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_member_spec.rb:71:13: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
            expect(page).not_to have_content(valid_attributes[:position])
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_member_spec.rb:72:13: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
            expect(page).not_to have_content(valid_attributes[:civicPoints])
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_member_spec.rb:73:13: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
            expect(page).not_to have_content(valid_attributes[:outreachPoints])
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_member_spec.rb:74:13: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
            expect(page).not_to have_content(valid_attributes[:socialPoints])
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_member_spec.rb:75:13: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
            expect(page).not_to have_content(valid_attributes[:marketingPoints])
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_member_spec.rb:76:13: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
            expect(page).not_to have_content(valid_attributes[:totalPoints])
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_member_spec.rb:80:14: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    describe "Editing" do
             ^^^^^^^^^
spec/feature/integration_member_spec.rb:81:5: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
        scenario 'update with valid inputs' do
    ^^^^
spec/feature/integration_member_spec.rb:81:9: C: [Correctable] RSpec/Capybara/FeatureMethods: Use it instead of scenario.
        scenario 'update with valid inputs' do
        ^^^^^^^^
spec/feature/integration_member_spec.rb:82:9: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
            @temp = Member.create!(valid_attributes)
        ^^^^
spec/feature/integration_member_spec.rb:83:30: C: RSpec/InstanceVariable: Avoid instance variables – use let, a method call, or a local variable (if possible).
            visit member_url(@temp)
                             ^^^^^
spec/feature/integration_member_spec.rb:84:13: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
            expect(page).to have_content(valid_attributes[:name])
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_member_spec.rb:85:13: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
            expect(page).to have_content(valid_attributes[:committee])
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_member_spec.rb:86:13: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
            expect(page).to have_content(valid_attributes[:position])
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_member_spec.rb:87:13: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
            expect(page).to have_content(valid_attributes[:civicPoints])
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_member_spec.rb:88:13: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
            expect(page).to have_content(valid_attributes[:outreachPoints])
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_member_spec.rb:89:13: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
            expect(page).to have_content(valid_attributes[:socialPoints])
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_member_spec.rb:90:13: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
            expect(page).to have_content(valid_attributes[:marketingPoints])
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_member_spec.rb:91:13: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
            expect(page).to have_content(valid_attributes[:totalPoints])
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_member_spec.rb:93:36: C: RSpec/InstanceVariable: Avoid instance variables – use let, a method call, or a local variable (if possible).
            visit edit_member_path(@temp)
                                   ^^^^^
spec/feature/integration_member_spec.rb:94:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            fill_in "member[name]",             with: edit_attributes[:name]
                    ^^^^^^^^^^^^^^
spec/feature/integration_member_spec.rb:95:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            fill_in "member[committee]",        with: edit_attributes[:committee]
                    ^^^^^^^^^^^^^^^^^^^
spec/feature/integration_member_spec.rb:96:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            fill_in "member[position]",         with: edit_attributes[:position]
                    ^^^^^^^^^^^^^^^^^^
spec/feature/integration_member_spec.rb:97:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            fill_in "member[civicPoints]",      with: edit_attributes[:civicPoints]
                    ^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_member_spec.rb:98:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            fill_in "member[outreachPoints]",   with: edit_attributes[:outreachPoints]
                    ^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_member_spec.rb:99:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            fill_in "member[socialPoints]",     with: edit_attributes[:socialPoints]
                    ^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_member_spec.rb:100:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            fill_in "member[marketingPoints]",  with: edit_attributes[:marketingPoints]
                    ^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_member_spec.rb:101:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            fill_in "member[totalPoints]",      with: edit_attributes[:totalPoints]
                    ^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_member_spec.rb:104:30: C: RSpec/InstanceVariable: Avoid instance variables – use let, a method call, or a local variable (if possible).
            visit member_url(@temp)
                             ^^^^^
spec/feature/integration_member_spec.rb:105:13: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
            expect(page).to have_content(edit_attributes[:name])
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_member_spec.rb:106:13: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
            expect(page).to have_content(edit_attributes[:committee])
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_member_spec.rb:107:13: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
            expect(page).to have_content(edit_attributes[:position])
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_member_spec.rb:108:13: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
            expect(page).to have_content(edit_attributes[:civicPoints])
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_member_spec.rb:109:13: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
            expect(page).to have_content(edit_attributes[:outreachPoints])
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_member_spec.rb:110:13: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
            expect(page).to have_content(edit_attributes[:socialPoints])
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_member_spec.rb:111:13: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
            expect(page).to have_content(edit_attributes[:marketingPoints])
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_member_spec.rb:112:13: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
            expect(page).to have_content(edit_attributes[:totalPoints])
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_member_spec.rb:114:1: C: [Correctable] Layout/TrailingWhitespace: Trailing whitespace detected.
spec/feature/integration_member_spec.rb:117:14: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    describe "Deletion" do
             ^^^^^^^^^^
spec/feature/integration_member_spec.rb:118:5: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
        scenario "delete entry" do
    ^^^^
spec/feature/integration_member_spec.rb:118:9: C: [Correctable] RSpec/Capybara/FeatureMethods: Use it instead of scenario.
        scenario "delete entry" do
        ^^^^^^^^
spec/feature/integration_member_spec.rb:118:18: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
        scenario "delete entry" do
                 ^^^^^^^^^^^^^^
spec/feature/integration_member_spec.rb:119:9: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
            @temp = Member.create!(valid_attributes)
        ^^^^
spec/feature/integration_member_spec.rb:121:13: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
            expect(page).to have_content(valid_attributes[:name])
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_member_spec.rb:122:13: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
            expect(page).to have_content(valid_attributes[:committee])
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_member_spec.rb:123:13: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
            expect(page).to have_content(valid_attributes[:position])
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_member_spec.rb:124:13: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
            expect(page).to have_content(valid_attributes[:civicPoints])
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_member_spec.rb:125:13: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
            expect(page).to have_content(valid_attributes[:outreachPoints])
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_member_spec.rb:126:13: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
            expect(page).to have_content(valid_attributes[:socialPoints])
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_member_spec.rb:127:13: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
            expect(page).to have_content(valid_attributes[:marketingPoints])
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_member_spec.rb:128:13: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
            expect(page).to have_content(valid_attributes[:totalPoints])
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_member_spec.rb:130:38: C: RSpec/InstanceVariable: Avoid instance variables – use let, a method call, or a local variable (if possible).
            visit delete_member_path(@temp)
                                     ^^^^^
spec/feature/integration_member_spec.rb:131:22: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            click_on "Delete Member"
                     ^^^^^^^^^^^^^^^
spec/feature/integration_member_spec.rb:133:13: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
            expect(page).not_to have_content(valid_attributes[:name])
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_member_spec.rb:134:13: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
            expect(page).not_to have_content(valid_attributes[:committee])
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_member_spec.rb:135:13: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
            expect(page).not_to have_content(valid_attributes[:position])
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_member_spec.rb:136:13: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
            expect(page).not_to have_content(valid_attributes[:civicPoints])
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_member_spec.rb:137:13: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
            expect(page).not_to have_content(valid_attributes[:outreachPoints])
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_member_spec.rb:138:13: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
            expect(page).not_to have_content(valid_attributes[:socialPoints])
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_member_spec.rb:139:13: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
            expect(page).not_to have_content(valid_attributes[:marketingPoints])
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_member_spec.rb:140:13: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
            expect(page).not_to have_content(valid_attributes[:totalPoints])
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/feature/integration_member_spec.rb:141:1: C: [Correctable] Layout/EmptyLinesAroundBlockBody: Extra empty line detected at block body end.
spec/feature/integration_member_spec.rb:144:4: C: [Correctable] Layout/TrailingEmptyLines: Final newline missing.
end
   
spec/helpers/committees_helper_spec.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
require 'rails_helper'
^
spec/helpers/committees_helper_spec.rb:13:1: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
RSpec.describe CommitteesHelper, type: :helper do
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/helpers/events_helper_spec.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
require 'rails_helper'
^
spec/helpers/events_helper_spec.rb:13:1: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
RSpec.describe EventsHelper, type: :helper do
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/helpers/excuses_helper_spec.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
require 'rails_helper'
^
spec/helpers/excuses_helper_spec.rb:13:1: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
RSpec.describe ExcusesHelper, type: :helper do
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/helpers/main_helper_spec.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
require 'rails_helper'
^
spec/helpers/main_helper_spec.rb:13:1: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
RSpec.describe MainHelper, type: :helper do
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/helpers/member_events_helper_spec.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
require 'rails_helper'
^
spec/helpers/member_events_helper_spec.rb:13:1: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
RSpec.describe MemberEventsHelper, type: :helper do
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/helpers/members_helper_spec.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
require 'rails_helper'
^
spec/helpers/members_helper_spec.rb:13:1: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
RSpec.describe MembersHelper, type: :helper do
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/models/admin_spec.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
require 'rails_helper'
^
spec/models/admin_spec.rb:3:1: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
RSpec.describe Admin, type: :model do
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/models/committee_spec.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
require 'rails_helper'
^
spec/models/committee_spec.rb:3:1: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
RSpec.describe Committee, type: :model do
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/models/event_spec.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
require 'rails_helper'
^
spec/models/event_spec.rb:3:1: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
RSpec.describe Event, type: :model do
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/models/excuse_spec.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
require 'rails_helper'
^
spec/models/excuse_spec.rb:3:1: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
RSpec.describe Excuse, type: :model do
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/models/excuse_spec.rb:4:12: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  describe "file attachment validations" do
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/models/excuse_spec.rb:5:20: C: [Correctable] RSpec/DescribedClass: Use described_class instead of Excuse.
    let(:excuse) { Excuse.new }
                   ^^^^^^
spec/models/excuse_spec.rb:7:13: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    context "file size is >= 5MB" do
            ^^^^^^^^^^^^^^^^^^^^^
spec/models/excuse_spec.rb:9:61: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
        file = Rack::Test::UploadedFile.new(Rails.root.join("spec/fixtures/large_file.pdf"), "application/pdf")
                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/models/excuse_spec.rb:9:94: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
        file = Rack::Test::UploadedFile.new(Rails.root.join("spec/fixtures/large_file.pdf"), "application/pdf")
                                                                                             ^^^^^^^^^^^^^^^^^
spec/models/excuse_spec.rb:11:7: C: [Correctable] RSpec/EmptyLineAfterHook: Add an empty line after before.
      end
      ^^^
spec/models/excuse_spec.rb:12:10: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      it "is invalid" do
         ^^^^^^^^^^^^
spec/models/excuse_spec.rb:13:9: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        expect(excuse).to be_invalid
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/models/excuse_spec.rb:14:9: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        expect(excuse.errors[:file]).to include("File size is too large (Size > 5MB)")
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/models/excuse_spec.rb:14:49: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
        expect(excuse.errors[:file]).to include("File size is too large (Size > 5MB)")
                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/models/excuse_spec.rb:18:13: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    context "file is not a PDF" do
            ^^^^^^^^^^^^^^^^^^^
spec/models/excuse_spec.rb:20:61: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
        file = Rack::Test::UploadedFile.new(Rails.root.join("spec/fixtures/non_pdf.txt"), "text/plain")
                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/models/excuse_spec.rb:20:91: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
        file = Rack::Test::UploadedFile.new(Rails.root.join("spec/fixtures/non_pdf.txt"), "text/plain")
                                                                                          ^^^^^^^^^^^^
spec/models/excuse_spec.rb:22:7: C: [Correctable] RSpec/EmptyLineAfterHook: Add an empty line after before.
      end
      ^^^
spec/models/excuse_spec.rb:23:10: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      it "is invalid" do
         ^^^^^^^^^^^^
spec/models/excuse_spec.rb:24:9: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        expect(excuse).to be_invalid
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/models/excuse_spec.rb:25:9: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        expect(excuse.errors[:file]).to include("File must be a PDF")
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/models/excuse_spec.rb:25:49: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
        expect(excuse.errors[:file]).to include("File must be a PDF")
                                                ^^^^^^^^^^^^^^^^^^^^
spec/models/member_event_spec.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
require 'rails_helper'
^
spec/models/member_event_spec.rb:3:1: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
RSpec.describe MemberEvent, type: :model do
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/models/member_spec.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
require 'rails_helper'
^
spec/models/member_spec.rb:3:1: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
RSpec.describe Member, type: :model do
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/committees_spec.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
require 'rails_helper'
^
spec/requests/committees_spec.rb:15:1: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
RSpec.describe "/committees", type: :request do
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/committees_spec.rb:15:16: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
RSpec.describe "/committees", type: :request do
               ^^^^^^^^^^^^^
spec/requests/committees_spec.rb:16:1: C: [Correctable] Layout/TrailingWhitespace: Trailing whitespace detected.
spec/requests/committees_spec.rb:20:26: C: [Correctable] Style/BlockDelimiters: Avoid using {...} for multi-line blocks.
  let(:valid_attributes) {
                         ^
spec/requests/committees_spec.rb:22:13: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      name: "Name"
            ^^^^^^
spec/requests/committees_spec.rb:26:28: C: [Correctable] Style/BlockDelimiters: Avoid using {...} for multi-line blocks.
  let(:invalid_attributes) {
                           ^
spec/requests/committees_spec.rb:27:10: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    skip("Add a hash of attributes invalid for your model")
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/committees_spec.rb:30:12: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  describe "GET /index" do
           ^^^^^^^^^^^^
spec/requests/committees_spec.rb:31:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    it "renders a successful response" do
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/committees_spec.rb:32:7: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      Committee.create! valid_attributes
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/committees_spec.rb:34:7: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      expect(response).to be_successful
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/committees_spec.rb:38:12: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  describe "GET /show" do
           ^^^^^^^^^^^
spec/requests/committees_spec.rb:39:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    it "renders a successful response" do
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/committees_spec.rb:40:19: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      committee = Committee.create! valid_attributes
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/committees_spec.rb:42:7: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      expect(response).to be_successful
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/committees_spec.rb:46:12: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  describe "GET /new" do
           ^^^^^^^^^^
spec/requests/committees_spec.rb:47:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    it "renders a successful response" do
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/committees_spec.rb:49:7: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      expect(response).to be_successful
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/committees_spec.rb:53:12: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  describe "GET /edit" do
           ^^^^^^^^^^^
spec/requests/committees_spec.rb:54:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    it "renders a successful response" do
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/committees_spec.rb:55:19: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      committee = Committee.create! valid_attributes
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/committees_spec.rb:57:7: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      expect(response).to be_successful
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/committees_spec.rb:61:12: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  describe "POST /create" do
           ^^^^^^^^^^^^^^
spec/requests/committees_spec.rb:62:13: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    context "with valid parameters" do
            ^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/committees_spec.rb:63:10: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      it "creates a new Committee" do
         ^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/committees_spec.rb:64:9: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        expect { ...
        ^^^^^^^^
spec/requests/committees_spec.rb:64:16: C: [Correctable] Style/BlockDelimiters: Avoid using {...} for multi-line blocks.
        expect {
               ^
spec/requests/committees_spec.rb:65:11: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
          post committees_url, params: { committee: valid_attributes }
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/committees_spec.rb:69:10: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      it "redirects to the created committee" do
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/committees_spec.rb:71:9: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        expect(response).to redirect_to(committee_url(Committee.last))
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/committees_spec.rb:75:13: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    context "with invalid parameters" do
            ^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/committees_spec.rb:76:10: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      it "does not create a new Committee" do
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/committees_spec.rb:77:9: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        expect { ...
        ^^^^^^^^
spec/requests/committees_spec.rb:77:16: C: [Correctable] Style/BlockDelimiters: Avoid using {...} for multi-line blocks.
        expect {
               ^
spec/requests/committees_spec.rb:78:11: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
          post committees_url, params: { committee: invalid_attributes }
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/committees_spec.rb:82:1: C: [Correctable] Layout/TrailingWhitespace: Trailing whitespace detected.
spec/requests/committees_spec.rb:85:9: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        expect(response).to have_http_status(:unprocessable_entity)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/committees_spec.rb:87:1: C: [Correctable] Layout/TrailingWhitespace: Trailing whitespace detected.
spec/requests/committees_spec.rb:91:12: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  describe "PATCH /update" do
           ^^^^^^^^^^^^^^^
spec/requests/committees_spec.rb:92:13: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    context "with valid parameters" do
            ^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/committees_spec.rb:93:28: C: [Correctable] Style/BlockDelimiters: Avoid using {...} for multi-line blocks.
      let(:new_attributes) {
                           ^
spec/requests/committees_spec.rb:95:17: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
          name: "Name2"
                ^^^^^^^
spec/requests/committees_spec.rb:99:10: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      it "updates the requested committee" do
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/committees_spec.rb:100:21: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        committee = Committee.create! valid_attributes
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/committees_spec.rb:103:14: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
        skip("Add assertions for updated state")
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/committees_spec.rb:106:10: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      it "redirects to the committee" do
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/committees_spec.rb:107:21: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        committee = Committee.create! valid_attributes
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/committees_spec.rb:110:9: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        expect(response).to redirect_to(committee_url(committee))
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/committees_spec.rb:114:13: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    context "with invalid parameters" do
            ^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/committees_spec.rb:115:1: C: [Correctable] Layout/TrailingWhitespace: Trailing whitespace detected.
spec/requests/committees_spec.rb:117:21: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        committee = Committee.create! valid_attributes
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/committees_spec.rb:119:9: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        expect(response).to have_http_status(:unprocessable_entity)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/committees_spec.rb:121:1: C: [Correctable] Layout/TrailingWhitespace: Trailing whitespace detected.
spec/requests/committees_spec.rb:125:12: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  describe "DELETE /destroy" do
           ^^^^^^^^^^^^^^^^^
spec/requests/committees_spec.rb:126:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    it "destroys the requested committee" do
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/committees_spec.rb:127:19: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      committee = Committee.create! valid_attributes
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/committees_spec.rb:128:7: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      expect { ...
      ^^^^^^^^
spec/requests/committees_spec.rb:128:14: C: [Correctable] Style/BlockDelimiters: Avoid using {...} for multi-line blocks.
      expect {
             ^
spec/requests/committees_spec.rb:129:9: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        delete committee_url(committee)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/committees_spec.rb:133:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    it "redirects to the committees list" do
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/committees_spec.rb:134:19: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      committee = Committee.create! valid_attributes
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/committees_spec.rb:136:7: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      expect(response).to redirect_to(committees_url)
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/events_spec.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
require 'rails_helper'
^
spec/requests/events_spec.rb:15:1: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
RSpec.describe "/events", type: :request do
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/events_spec.rb:15:16: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
RSpec.describe "/events", type: :request do
               ^^^^^^^^^
spec/requests/events_spec.rb:16:1: C: [Correctable] Layout/TrailingWhitespace: Trailing whitespace detected.
spec/requests/events_spec.rb:20:26: C: [Correctable] Style/BlockDelimiters: Avoid using {...} for multi-line blocks.
  let(:valid_attributes) {
                         ^
spec/requests/events_spec.rb:22:13: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      name: "MyName",
            ^^^^^^^^
spec/requests/events_spec.rb:23:24: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      date: Date.parse("01-01-2023"),
                       ^^^^^^^^^^^^
spec/requests/events_spec.rb:24:19: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      event_type: "MyType"
                  ^^^^^^^^
spec/requests/events_spec.rb:28:28: C: [Correctable] Style/BlockDelimiters: Avoid using {...} for multi-line blocks.
  let(:invalid_attributes) {
                           ^
spec/requests/events_spec.rb:36:12: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  describe "GET /index" do
           ^^^^^^^^^^^^
spec/requests/events_spec.rb:37:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    it "renders a successful response" do
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/events_spec.rb:38:7: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      Event.create! valid_attributes
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/events_spec.rb:40:7: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      expect(response).to be_successful
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/events_spec.rb:44:12: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  describe "GET /show" do
           ^^^^^^^^^^^
spec/requests/events_spec.rb:45:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    it "renders a successful response" do
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/events_spec.rb:46:15: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      event = Event.create! valid_attributes
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/events_spec.rb:48:7: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      expect(response).to be_successful
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/events_spec.rb:52:12: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  describe "GET /new" do
           ^^^^^^^^^^
spec/requests/events_spec.rb:53:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    it "renders a successful response" do
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/events_spec.rb:55:7: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      expect(response).to be_successful
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/events_spec.rb:59:12: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  describe "GET /edit" do
           ^^^^^^^^^^^
spec/requests/events_spec.rb:60:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    it "renders a successful response" do
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/events_spec.rb:61:15: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      event = Event.create! valid_attributes
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/events_spec.rb:63:7: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      expect(response).to be_successful
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/events_spec.rb:67:12: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  describe "POST /create" do
           ^^^^^^^^^^^^^^
spec/requests/events_spec.rb:68:13: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    context "with valid parameters" do
            ^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/events_spec.rb:69:10: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      it "creates a new Event" do
         ^^^^^^^^^^^^^^^^^^^^^
spec/requests/events_spec.rb:70:9: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        expect { ...
        ^^^^^^^^
spec/requests/events_spec.rb:70:16: C: [Correctable] Style/BlockDelimiters: Avoid using {...} for multi-line blocks.
        expect {
               ^
spec/requests/events_spec.rb:71:11: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
          post events_url, params: { event: valid_attributes }
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/events_spec.rb:75:10: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      it "redirects to the created event" do
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/events_spec.rb:77:9: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        expect(response).to redirect_to(event_url(Event.last))
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/events_spec.rb:81:13: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    context "with invalid parameters" do
            ^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/events_spec.rb:82:10: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      it "does not create a new Event" do
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/events_spec.rb:83:9: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        expect { ...
        ^^^^^^^^
spec/requests/events_spec.rb:83:16: C: [Correctable] Style/BlockDelimiters: Avoid using {...} for multi-line blocks.
        expect {
               ^
spec/requests/events_spec.rb:84:11: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
          post events_url, params: { event: invalid_attributes }
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/events_spec.rb:88:1: C: [Correctable] Layout/TrailingWhitespace: Trailing whitespace detected.
spec/requests/events_spec.rb:91:9: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        expect(response).to have_http_status(:unprocessable_entity)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/events_spec.rb:93:1: C: [Correctable] Layout/TrailingWhitespace: Trailing whitespace detected.
spec/requests/events_spec.rb:97:12: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  describe "PATCH /update" do
           ^^^^^^^^^^^^^^^
spec/requests/events_spec.rb:98:13: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    context "with valid parameters" do
            ^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/events_spec.rb:99:28: C: [Correctable] Style/BlockDelimiters: Avoid using {...} for multi-line blocks.
      let(:new_attributes) {
                           ^
spec/requests/events_spec.rb:101:17: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
          name: "MyName2",
                ^^^^^^^^^
spec/requests/events_spec.rb:102:28: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
          date: Date.parse("01-02-2023"),
                           ^^^^^^^^^^^^
spec/requests/events_spec.rb:103:23: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
          event_type: "MyType2"
                      ^^^^^^^^^
spec/requests/events_spec.rb:107:10: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      it "updates the requested event" do
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/events_spec.rb:108:17: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        event = Event.create! valid_attributes
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/events_spec.rb:111:14: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
        skip("Add assertions for updated state")
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/events_spec.rb:114:10: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      it "redirects to the event" do
         ^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/events_spec.rb:115:17: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        event = Event.create! valid_attributes
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/events_spec.rb:118:9: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        expect(response).to redirect_to(event_url(event))
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/events_spec.rb:122:13: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    context "with invalid parameters" do
            ^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/events_spec.rb:123:1: C: [Correctable] Layout/TrailingWhitespace: Trailing whitespace detected.
spec/requests/events_spec.rb:125:9: C: [Correctable] Layout/LeadingCommentSpace: Missing space after #.
        #skip("no worky (but should)")
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/events_spec.rb:126:17: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        event = Event.create! valid_attributes
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/events_spec.rb:128:9: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        expect(response).to have_http_status(:unprocessable_entity)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/events_spec.rb:130:1: C: [Correctable] Layout/TrailingWhitespace: Trailing whitespace detected.
spec/requests/events_spec.rb:134:12: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  describe "DELETE /destroy" do
           ^^^^^^^^^^^^^^^^^
spec/requests/events_spec.rb:135:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    it "destroys the requested event" do
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/events_spec.rb:136:15: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      event = Event.create! valid_attributes
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/events_spec.rb:137:7: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      expect { ...
      ^^^^^^^^
spec/requests/events_spec.rb:137:14: C: [Correctable] Style/BlockDelimiters: Avoid using {...} for multi-line blocks.
      expect {
             ^
spec/requests/events_spec.rb:138:9: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        delete event_url(event)
        ^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/events_spec.rb:142:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    it "redirects to the events list" do
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/events_spec.rb:143:15: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      event = Event.create! valid_attributes
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/events_spec.rb:145:7: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      expect(response).to redirect_to(events_url)
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/excuses_spec.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
require 'rails_helper'
^
spec/requests/excuses_spec.rb:15:1: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
RSpec.describe "/excuses", type: :request do
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/excuses_spec.rb:15:16: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
RSpec.describe "/excuses", type: :request do
               ^^^^^^^^^^
spec/requests/excuses_spec.rb:16:1: C: [Correctable] Layout/TrailingWhitespace: Trailing whitespace detected.
spec/requests/excuses_spec.rb:20:26: C: [Correctable] Style/BlockDelimiters: Avoid using {...} for multi-line blocks.
  let(:valid_attributes) {
                         ^
spec/requests/excuses_spec.rb:21:5: C: [Correctable] Layout/SpaceInsideHashLiteralBraces: Space inside { missing.
    {file: nil}
    ^
spec/requests/excuses_spec.rb:21:15: C: [Correctable] Layout/SpaceInsideHashLiteralBraces: Space inside } missing.
    {file: nil}
              ^
spec/requests/excuses_spec.rb:24:28: C: [Correctable] Style/BlockDelimiters: Avoid using {...} for multi-line blocks.
  let(:invalid_attributes) {
                           ^
spec/requests/excuses_spec.rb:25:10: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    skip("Add a hash of attributes invalid for your model")
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/excuses_spec.rb:28:12: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  describe "GET /index" do
           ^^^^^^^^^^^^
spec/requests/excuses_spec.rb:29:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    it "renders a successful response" do
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/excuses_spec.rb:30:7: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      Excuse.create! valid_attributes
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/excuses_spec.rb:32:7: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      expect(response).to be_successful
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/excuses_spec.rb:36:12: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  describe "GET /show" do
           ^^^^^^^^^^^
spec/requests/excuses_spec.rb:37:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    it "renders a successful response" do
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/excuses_spec.rb:38:16: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      excuse = Excuse.create! valid_attributes
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/excuses_spec.rb:40:7: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      expect(response).to be_successful
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/excuses_spec.rb:44:12: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  describe "GET /new" do
           ^^^^^^^^^^
spec/requests/excuses_spec.rb:45:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    it "renders a successful response" do
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/excuses_spec.rb:47:7: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      expect(response).to be_successful
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/excuses_spec.rb:51:12: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  describe "GET /edit" do
           ^^^^^^^^^^^
spec/requests/excuses_spec.rb:52:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    it "renders a successful response" do
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/excuses_spec.rb:53:16: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      excuse = Excuse.create! valid_attributes
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/excuses_spec.rb:55:7: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      expect(response).to be_successful
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/excuses_spec.rb:59:12: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  describe "POST /create" do
           ^^^^^^^^^^^^^^
spec/requests/excuses_spec.rb:60:13: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    context "with valid parameters" do
            ^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/excuses_spec.rb:61:10: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      it "creates a new Excuse" do
         ^^^^^^^^^^^^^^^^^^^^^^
spec/requests/excuses_spec.rb:62:9: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        expect { ...
        ^^^^^^^^
spec/requests/excuses_spec.rb:62:16: C: [Correctable] Style/BlockDelimiters: Avoid using {...} for multi-line blocks.
        expect {
               ^
spec/requests/excuses_spec.rb:63:11: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
          post excuses_url, params: { excuse: valid_attributes }
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/excuses_spec.rb:67:10: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      it "redirects to the created excuse" do
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/excuses_spec.rb:69:9: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        expect(response).to redirect_to(excuse_url(Excuse.last))
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/excuses_spec.rb:73:13: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    context "with invalid parameters" do
            ^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/excuses_spec.rb:74:10: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      it "does not create a new Excuse" do
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/excuses_spec.rb:75:9: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        expect { ...
        ^^^^^^^^
spec/requests/excuses_spec.rb:75:16: C: [Correctable] Style/BlockDelimiters: Avoid using {...} for multi-line blocks.
        expect {
               ^
spec/requests/excuses_spec.rb:76:11: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
          post excuses_url, params: { excuse: invalid_attributes }
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/excuses_spec.rb:80:1: C: [Correctable] Layout/TrailingWhitespace: Trailing whitespace detected.
spec/requests/excuses_spec.rb:83:9: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        expect(response).to have_http_status(:unprocessable_entity)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/excuses_spec.rb:85:1: C: [Correctable] Layout/TrailingWhitespace: Trailing whitespace detected.
spec/requests/excuses_spec.rb:89:12: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  describe "PATCH /update" do
           ^^^^^^^^^^^^^^^
spec/requests/excuses_spec.rb:90:13: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    context "with valid parameters" do
            ^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/excuses_spec.rb:91:28: C: [Correctable] Style/BlockDelimiters: Avoid using {...} for multi-line blocks.
      let(:new_attributes) {
                           ^
spec/requests/excuses_spec.rb:92:9: C: [Correctable] Layout/SpaceInsideHashLiteralBraces: Space inside { missing.
        {file: nil}
        ^
spec/requests/excuses_spec.rb:92:19: C: [Correctable] Layout/SpaceInsideHashLiteralBraces: Space inside } missing.
        {file: nil}
                  ^
spec/requests/excuses_spec.rb:95:10: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      it "updates the requested excuse" do
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/excuses_spec.rb:96:18: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        excuse = Excuse.create! valid_attributes
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/excuses_spec.rb:99:14: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
        skip("Add assertions for updated state")
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/excuses_spec.rb:102:10: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      it "redirects to the excuse" do
         ^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/excuses_spec.rb:103:18: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        excuse = Excuse.create! valid_attributes
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/excuses_spec.rb:106:9: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        expect(response).to redirect_to(excuse_url(excuse))
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/excuses_spec.rb:110:13: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    context "with invalid parameters" do
            ^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/excuses_spec.rb:111:1: C: [Correctable] Layout/TrailingWhitespace: Trailing whitespace detected.
spec/requests/excuses_spec.rb:113:18: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        excuse = Excuse.create! valid_attributes
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/excuses_spec.rb:115:9: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        expect(response).to have_http_status(:unprocessable_entity)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/excuses_spec.rb:117:1: C: [Correctable] Layout/TrailingWhitespace: Trailing whitespace detected.
spec/requests/excuses_spec.rb:121:12: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  describe "DELETE /destroy" do
           ^^^^^^^^^^^^^^^^^
spec/requests/excuses_spec.rb:122:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    it "destroys the requested excuse" do
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/excuses_spec.rb:123:16: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      excuse = Excuse.create! valid_attributes
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/excuses_spec.rb:124:7: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      expect { ...
      ^^^^^^^^
spec/requests/excuses_spec.rb:124:14: C: [Correctable] Style/BlockDelimiters: Avoid using {...} for multi-line blocks.
      expect {
             ^
spec/requests/excuses_spec.rb:125:9: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        delete excuse_url(excuse)
        ^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/excuses_spec.rb:129:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    it "redirects to the excuses list" do
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/excuses_spec.rb:130:16: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      excuse = Excuse.create! valid_attributes
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/excuses_spec.rb:132:7: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      expect(response).to redirect_to(excuses_url)
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/main_spec.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
require 'rails_helper'
^
spec/requests/main_spec.rb:3:1: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
RSpec.describe "Mains", type: :request do
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/main_spec.rb:3:16: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
RSpec.describe "Mains", type: :request do
               ^^^^^^^
spec/requests/main_spec.rb:4:12: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  describe "GET /index" do
           ^^^^^^^^^^^^
spec/requests/main_spec.rb:5:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    it "returns http success" do
       ^^^^^^^^^^^^^^^^^^^^^^
spec/requests/main_spec.rb:6:11: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      get "/main/index"
          ^^^^^^^^^^^^^
spec/requests/main_spec.rb:7:7: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      expect(response).to have_http_status(:success)
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/main_spec.rb:10:1: C: [Correctable] Layout/EmptyLinesAroundBlockBody: Extra empty line detected at block body end.
spec/requests/member_events_spec.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
require 'rails_helper'
^
spec/requests/member_events_spec.rb:15:1: C: RSpec/MultipleMemoizedHelpers: Example group has too many memoized helpers [6/5]
RSpec.describe "/member_events", type: :request do ...
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/member_events_spec.rb:15:1: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
RSpec.describe "/member_events", type: :request do
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/member_events_spec.rb:15:16: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
RSpec.describe "/member_events", type: :request do
               ^^^^^^^^^^^^^^^^
spec/requests/member_events_spec.rb:16:1: C: [Correctable] Layout/TrailingWhitespace: Trailing whitespace detected.
spec/requests/member_events_spec.rb:20:16: C: [Correctable] Style/BlockDelimiters: Avoid using {...} for multi-line blocks.
  let(:member) {
               ^
spec/requests/member_events_spec.rb:22:13: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      name: "MyName"
            ^^^^^^^^
spec/requests/member_events_spec.rb:26:15: C: [Correctable] Style/BlockDelimiters: Avoid using {...} for multi-line blocks.
  let(:event) {
              ^
spec/requests/member_events_spec.rb:28:13: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      name: "MyName",
            ^^^^^^^^
spec/requests/member_events_spec.rb:29:24: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      date: Date.parse("01-01-2023"),
                       ^^^^^^^^^^^^
spec/requests/member_events_spec.rb:30:19: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      event_type: "MyType"
                  ^^^^^^^^
spec/requests/member_events_spec.rb:33:1: C: [Correctable] Layout/TrailingWhitespace: Trailing whitespace detected.
spec/requests/member_events_spec.rb:34:17: C: [Correctable] Style/BlockDelimiters: Avoid using {...} for multi-line blocks.
  let(:member2) {
                ^
spec/requests/member_events_spec.rb:36:13: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      name: "MyName2"
            ^^^^^^^^^
spec/requests/member_events_spec.rb:40:16: C: [Correctable] Style/BlockDelimiters: Avoid using {...} for multi-line blocks.
  let(:event2) {
               ^
spec/requests/member_events_spec.rb:42:13: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      name: "MyName2",
            ^^^^^^^^^
spec/requests/member_events_spec.rb:43:24: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      date: Date.parse("01-01-2023"),
                       ^^^^^^^^^^^^
spec/requests/member_events_spec.rb:44:19: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      event_type: "MyType"
                  ^^^^^^^^
spec/requests/member_events_spec.rb:47:1: C: [Correctable] Layout/TrailingWhitespace: Trailing whitespace detected.
spec/requests/member_events_spec.rb:48:26: C: [Correctable] Style/BlockDelimiters: Avoid using {...} for multi-line blocks.
  let(:valid_attributes) {
                         ^
spec/requests/member_events_spec.rb:51:27: C: [Correctable] Style/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
      member_id: member.id,
                          ^
spec/requests/member_events_spec.rb:55:28: C: [Correctable] Style/BlockDelimiters: Avoid using {...} for multi-line blocks.
  let(:invalid_attributes) {
                           ^
spec/requests/member_events_spec.rb:56:10: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    skip("Add a hash of attributes invalid for your model")
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/member_events_spec.rb:59:3: C: RSpec/MultipleMemoizedHelpers: Example group has too many memoized helpers [6/5]
  describe "GET /index" do ...
  ^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/member_events_spec.rb:59:12: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  describe "GET /index" do
           ^^^^^^^^^^^^
spec/requests/member_events_spec.rb:60:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    it "renders a successful response" do
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/member_events_spec.rb:61:7: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      MemberEvent.create! valid_attributes
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/member_events_spec.rb:63:7: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      expect(response).to be_successful
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/member_events_spec.rb:67:3: C: RSpec/MultipleMemoizedHelpers: Example group has too many memoized helpers [6/5]
  describe "GET /show" do ...
  ^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/member_events_spec.rb:67:12: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  describe "GET /show" do
           ^^^^^^^^^^^
spec/requests/member_events_spec.rb:68:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    it "renders a successful response" do
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/member_events_spec.rb:69:22: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      member_event = MemberEvent.create! valid_attributes
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/member_events_spec.rb:71:7: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      expect(response).to be_successful
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/member_events_spec.rb:75:3: C: RSpec/MultipleMemoizedHelpers: Example group has too many memoized helpers [6/5]
  describe "GET /new" do ...
  ^^^^^^^^^^^^^^^^^^^^^^
spec/requests/member_events_spec.rb:75:12: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  describe "GET /new" do
           ^^^^^^^^^^
spec/requests/member_events_spec.rb:76:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    it "renders a successful response" do
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/member_events_spec.rb:78:7: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      expect(response).to be_successful
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/member_events_spec.rb:82:3: C: RSpec/MultipleMemoizedHelpers: Example group has too many memoized helpers [6/5]
  describe "GET /edit" do ...
  ^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/member_events_spec.rb:82:12: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  describe "GET /edit" do
           ^^^^^^^^^^^
spec/requests/member_events_spec.rb:83:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    it "renders a successful response" do
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/member_events_spec.rb:84:22: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      member_event = MemberEvent.create! valid_attributes
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/member_events_spec.rb:86:7: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      expect(response).to be_successful
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/member_events_spec.rb:90:3: C: RSpec/MultipleMemoizedHelpers: Example group has too many memoized helpers [6/5]
  describe "POST /create" do ...
  ^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/member_events_spec.rb:90:12: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  describe "POST /create" do
           ^^^^^^^^^^^^^^
spec/requests/member_events_spec.rb:91:5: C: RSpec/MultipleMemoizedHelpers: Example group has too many memoized helpers [6/5]
    context "with valid parameters" do ...
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/member_events_spec.rb:91:13: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    context "with valid parameters" do
            ^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/member_events_spec.rb:92:10: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      it "creates a new MemberEvent" do
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/member_events_spec.rb:93:9: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        expect { ...
        ^^^^^^^^
spec/requests/member_events_spec.rb:93:16: C: [Correctable] Style/BlockDelimiters: Avoid using {...} for multi-line blocks.
        expect {
               ^
spec/requests/member_events_spec.rb:94:11: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
          post member_events_url, params: { member_event: valid_attributes }
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/member_events_spec.rb:98:10: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      it "redirects to the created member_event" do
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/member_events_spec.rb:100:9: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        expect(response).to redirect_to(member_event_url(MemberEvent.last))
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/member_events_spec.rb:104:5: C: RSpec/MultipleMemoizedHelpers: Example group has too many memoized helpers [6/5]
    context "with invalid parameters" do ...
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/member_events_spec.rb:104:13: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    context "with invalid parameters" do
            ^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/member_events_spec.rb:105:10: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      it "does not create a new MemberEvent" do
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/member_events_spec.rb:106:9: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        expect { ...
        ^^^^^^^^
spec/requests/member_events_spec.rb:106:16: C: [Correctable] Style/BlockDelimiters: Avoid using {...} for multi-line blocks.
        expect {
               ^
spec/requests/member_events_spec.rb:107:11: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
          post member_events_url, params: { member_event: invalid_attributes }
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/member_events_spec.rb:111:1: C: [Correctable] Layout/TrailingWhitespace: Trailing whitespace detected.
spec/requests/member_events_spec.rb:114:9: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        expect(response).to have_http_status(:unprocessable_entity)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/member_events_spec.rb:116:1: C: [Correctable] Layout/TrailingWhitespace: Trailing whitespace detected.
spec/requests/member_events_spec.rb:120:3: C: RSpec/MultipleMemoizedHelpers: Example group has too many memoized helpers [6/5]
  describe "PATCH /update" do ...
  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/member_events_spec.rb:120:12: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  describe "PATCH /update" do
           ^^^^^^^^^^^^^^^
spec/requests/member_events_spec.rb:121:5: C: RSpec/MultipleMemoizedHelpers: Example group has too many memoized helpers [7/5]
    context "with valid parameters" do ...
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/member_events_spec.rb:121:13: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    context "with valid parameters" do
            ^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/member_events_spec.rb:122:28: C: [Correctable] Style/BlockDelimiters: Avoid using {...} for multi-line blocks.
      let(:new_attributes) {
                           ^
spec/requests/member_events_spec.rb:125:32: C: [Correctable] Style/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
          member_id: member2.id,
                               ^
spec/requests/member_events_spec.rb:129:10: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      it "updates the requested member_event" do
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/member_events_spec.rb:130:24: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        member_event = MemberEvent.create! valid_attributes
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/member_events_spec.rb:133:14: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
        skip("Add assertions for updated state")
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/member_events_spec.rb:136:10: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      it "redirects to the member_event" do
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/member_events_spec.rb:137:24: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        member_event = MemberEvent.create! valid_attributes
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/member_events_spec.rb:140:9: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        expect(response).to redirect_to(member_event_url(member_event))
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/member_events_spec.rb:144:5: C: RSpec/MultipleMemoizedHelpers: Example group has too many memoized helpers [6/5]
    context "with invalid parameters" do ...
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/member_events_spec.rb:144:13: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    context "with invalid parameters" do
            ^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/member_events_spec.rb:145:1: C: [Correctable] Layout/TrailingWhitespace: Trailing whitespace detected.
spec/requests/member_events_spec.rb:147:24: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        member_event = MemberEvent.create! valid_attributes
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/member_events_spec.rb:149:9: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        expect(response).to have_http_status(:unprocessable_entity)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/member_events_spec.rb:151:1: C: [Correctable] Layout/TrailingWhitespace: Trailing whitespace detected.
spec/requests/member_events_spec.rb:155:3: C: RSpec/MultipleMemoizedHelpers: Example group has too many memoized helpers [6/5]
  describe "DELETE /destroy" do ...
  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/member_events_spec.rb:155:12: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  describe "DELETE /destroy" do
           ^^^^^^^^^^^^^^^^^
spec/requests/member_events_spec.rb:156:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    it "destroys the requested member_event" do
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/member_events_spec.rb:157:22: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      member_event = MemberEvent.create! valid_attributes
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/member_events_spec.rb:158:7: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      expect { ...
      ^^^^^^^^
spec/requests/member_events_spec.rb:158:14: C: [Correctable] Style/BlockDelimiters: Avoid using {...} for multi-line blocks.
      expect {
             ^
spec/requests/member_events_spec.rb:159:9: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        delete member_event_url(member_event)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/member_events_spec.rb:163:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    it "redirects to the member_events list" do
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/member_events_spec.rb:164:22: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      member_event = MemberEvent.create! valid_attributes
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/member_events_spec.rb:166:7: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      expect(response).to redirect_to(member_events_url)
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/members_spec.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
require 'rails_helper'
^
spec/requests/members_spec.rb:15:1: C: [Correctable] Layout/EmptyLines: Extra blank line detected.
spec/requests/members_spec.rb:16:1: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
RSpec.describe "/members", type: :request do
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/members_spec.rb:16:16: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
RSpec.describe "/members", type: :request do
               ^^^^^^^^^^
spec/requests/members_spec.rb:17:1: C: [Correctable] Layout/TrailingWhitespace: Trailing whitespace detected.
spec/requests/members_spec.rb:21:26: C: [Correctable] Style/BlockDelimiters: Avoid using {...} for multi-line blocks.
  let(:valid_attributes) {
                         ^
spec/requests/members_spec.rb:22:5: C: [Correctable] Layout/SpaceInsideHashLiteralBraces: Space inside { missing.
    {name: "MyName"}
    ^
spec/requests/members_spec.rb:22:12: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    {name: "MyName"}
           ^^^^^^^^
spec/requests/members_spec.rb:22:20: C: [Correctable] Layout/SpaceInsideHashLiteralBraces: Space inside } missing.
    {name: "MyName"}
                   ^
spec/requests/members_spec.rb:25:28: C: [Correctable] Style/BlockDelimiters: Avoid using {...} for multi-line blocks.
  let(:invalid_attributes) {
                           ^
spec/requests/members_spec.rb:26:5: C: [Correctable] Layout/SpaceInsideHashLiteralBraces: Space inside { missing.
    {name: nil}
    ^
spec/requests/members_spec.rb:26:15: C: [Correctable] Layout/SpaceInsideHashLiteralBraces: Space inside } missing.
    {name: nil}
              ^
spec/requests/members_spec.rb:29:12: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  describe "GET /index" do
           ^^^^^^^^^^^^
spec/requests/members_spec.rb:30:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    it "renders a successful response" do
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/members_spec.rb:31:7: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      Member.create! valid_attributes
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/members_spec.rb:33:7: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      expect(response).to be_successful
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/members_spec.rb:37:12: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  describe "GET /show" do
           ^^^^^^^^^^^
spec/requests/members_spec.rb:38:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    it "renders a successful response" do
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/members_spec.rb:39:16: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      member = Member.create! valid_attributes
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/members_spec.rb:41:7: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      expect(response).to be_successful
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/members_spec.rb:45:12: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  describe "GET /new" do
           ^^^^^^^^^^
spec/requests/members_spec.rb:46:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    it "renders a successful response" do
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/members_spec.rb:48:7: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      expect(response).to be_successful
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/members_spec.rb:52:12: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  describe "GET /edit" do
           ^^^^^^^^^^^
spec/requests/members_spec.rb:53:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    it "renders a successful response" do
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/members_spec.rb:54:16: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      member = Member.create! valid_attributes
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/members_spec.rb:56:7: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      expect(response).to be_successful
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/members_spec.rb:60:12: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  describe "POST /create" do
           ^^^^^^^^^^^^^^
spec/requests/members_spec.rb:61:13: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    context "with valid parameters" do
            ^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/members_spec.rb:62:10: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      it "creates a new Member" do
         ^^^^^^^^^^^^^^^^^^^^^^
spec/requests/members_spec.rb:63:9: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        expect { ...
        ^^^^^^^^
spec/requests/members_spec.rb:63:16: C: [Correctable] Style/BlockDelimiters: Avoid using {...} for multi-line blocks.
        expect {
               ^
spec/requests/members_spec.rb:64:11: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
          post members_url, params: { member: valid_attributes }
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/members_spec.rb:68:10: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      it "redirects to the members table" do
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/members_spec.rb:70:9: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        expect(response).to redirect_to(member_url(Member.last))
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/members_spec.rb:74:13: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    context "with invalid parameters" do
            ^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/members_spec.rb:75:10: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      it "does not create a new Member" do
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/members_spec.rb:76:9: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        expect { ...
        ^^^^^^^^
spec/requests/members_spec.rb:76:16: C: [Correctable] Style/BlockDelimiters: Avoid using {...} for multi-line blocks.
        expect {
               ^
spec/requests/members_spec.rb:77:11: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
          post members_url, params: { member: invalid_attributes }
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/members_spec.rb:81:1: C: [Correctable] Layout/TrailingWhitespace: Trailing whitespace detected.
spec/requests/members_spec.rb:83:14: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
        skip("due to difference in creation, not yet implemented")
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/members_spec.rb:85:9: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        expect(response).to have_http_status(:unprocessable_entity)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/members_spec.rb:87:1: C: [Correctable] Layout/TrailingWhitespace: Trailing whitespace detected.
spec/requests/members_spec.rb:91:12: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  describe "PATCH /update" do
           ^^^^^^^^^^^^^^^
spec/requests/members_spec.rb:92:13: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    context "with valid parameters" do
            ^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/members_spec.rb:93:28: C: [Correctable] Style/BlockDelimiters: Avoid using {...} for multi-line blocks.
      let(:new_attributes) {
                           ^
spec/requests/members_spec.rb:94:9: C: [Correctable] Layout/SpaceInsideHashLiteralBraces: Space inside { missing.
        {name: "MyName2"}
        ^
spec/requests/members_spec.rb:94:16: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
        {name: "MyName2"}
               ^^^^^^^^^
spec/requests/members_spec.rb:94:25: C: [Correctable] Layout/SpaceInsideHashLiteralBraces: Space inside } missing.
        {name: "MyName2"}
                        ^
spec/requests/members_spec.rb:97:10: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      it "updates the requested member" do
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/members_spec.rb:98:18: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        member = Member.create! valid_attributes
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/members_spec.rb:101:14: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
        skip("Add assertions for updated state")
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/members_spec.rb:104:10: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      it "redirects to the member" do
         ^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/members_spec.rb:105:18: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        member = Member.create! valid_attributes
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/members_spec.rb:108:9: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        expect(response).to redirect_to(member_url(member))
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/members_spec.rb:112:13: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    context "with invalid parameters" do
            ^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/members_spec.rb:113:1: C: [Correctable] Layout/TrailingWhitespace: Trailing whitespace detected.
spec/requests/members_spec.rb:115:14: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
        skip("due to difference in creation, not yet implemented")
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/members_spec.rb:116:18: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        member = Member.create! valid_attributes
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/members_spec.rb:118:9: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        expect(response).to have_http_status(:unprocessable_entity)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/members_spec.rb:120:1: C: [Correctable] Layout/TrailingWhitespace: Trailing whitespace detected.
spec/requests/members_spec.rb:124:12: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  describe "DELETE /destroy" do
           ^^^^^^^^^^^^^^^^^
spec/requests/members_spec.rb:125:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    it "destroys the requested member" do
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/members_spec.rb:126:16: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      member = Member.create! valid_attributes
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/members_spec.rb:127:7: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      expect { ...
      ^^^^^^^^
spec/requests/members_spec.rb:127:14: C: [Correctable] Style/BlockDelimiters: Avoid using {...} for multi-line blocks.
      expect {
             ^
spec/requests/members_spec.rb:128:9: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        delete member_url(member)
        ^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/members_spec.rb:132:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    it "redirects to the events list" do
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/members_spec.rb:133:16: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      member = Member.create! valid_attributes
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/members_spec.rb:135:7: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      expect(response).to redirect_to(members_url)
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/requests/members_spec.rb:138:4: C: [Correctable] Layout/TrailingEmptyLines: Final newline missing.
end
   
spec/routing/committees_routing_spec.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
require "rails_helper"
^
spec/routing/committees_routing_spec.rb:1:9: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
require "rails_helper"
        ^^^^^^^^^^^^^^
spec/routing/committees_routing_spec.rb:3:1: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
RSpec.describe CommitteesController, type: :routing do
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/routing/committees_routing_spec.rb:4:12: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  describe "routing" do
           ^^^^^^^^^
spec/routing/committees_routing_spec.rb:5:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    it "routes to #index" do
       ^^^^^^^^^^^^^^^^^^
spec/routing/committees_routing_spec.rb:6:7: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      expect(get: "/committees").to route_to("committees#index")
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/routing/committees_routing_spec.rb:6:19: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      expect(get: "/committees").to route_to("committees#index")
                  ^^^^^^^^^^^^^
spec/routing/committees_routing_spec.rb:6:46: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      expect(get: "/committees").to route_to("committees#index")
                                             ^^^^^^^^^^^^^^^^^^
spec/routing/committees_routing_spec.rb:9:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    it "routes to #new" do
       ^^^^^^^^^^^^^^^^
spec/routing/committees_routing_spec.rb:10:7: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      expect(get: "/committees/new").to route_to("committees#new")
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/routing/committees_routing_spec.rb:10:19: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      expect(get: "/committees/new").to route_to("committees#new")
                  ^^^^^^^^^^^^^^^^^
spec/routing/committees_routing_spec.rb:10:50: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      expect(get: "/committees/new").to route_to("committees#new")
                                                 ^^^^^^^^^^^^^^^^
spec/routing/committees_routing_spec.rb:13:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    it "routes to #show" do
       ^^^^^^^^^^^^^^^^^
spec/routing/committees_routing_spec.rb:14:7: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      expect(get: "/committees/1").to route_to("committees#show", id: "1")
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/routing/committees_routing_spec.rb:14:19: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      expect(get: "/committees/1").to route_to("committees#show", id: "1")
                  ^^^^^^^^^^^^^^^
spec/routing/committees_routing_spec.rb:14:48: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      expect(get: "/committees/1").to route_to("committees#show", id: "1")
                                               ^^^^^^^^^^^^^^^^^
spec/routing/committees_routing_spec.rb:14:71: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      expect(get: "/committees/1").to route_to("committees#show", id: "1")
                                                                      ^^^
spec/routing/committees_routing_spec.rb:17:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    it "routes to #edit" do
       ^^^^^^^^^^^^^^^^^
spec/routing/committees_routing_spec.rb:18:7: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      expect(get: "/committees/1/edit").to route_to("committees#edit", id: "1")
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/routing/committees_routing_spec.rb:18:19: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      expect(get: "/committees/1/edit").to route_to("committees#edit", id: "1")
                  ^^^^^^^^^^^^^^^^^^^^
spec/routing/committees_routing_spec.rb:18:53: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      expect(get: "/committees/1/edit").to route_to("committees#edit", id: "1")
                                                    ^^^^^^^^^^^^^^^^^
spec/routing/committees_routing_spec.rb:18:76: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      expect(get: "/committees/1/edit").to route_to("committees#edit", id: "1")
                                                                           ^^^
spec/routing/committees_routing_spec.rb:21:1: C: [Correctable] Layout/EmptyLines: Extra blank line detected.
spec/routing/committees_routing_spec.rb:22:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    it "routes to #create" do
       ^^^^^^^^^^^^^^^^^^^
spec/routing/committees_routing_spec.rb:23:7: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      expect(post: "/committees").to route_to("committees#create")
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/routing/committees_routing_spec.rb:23:20: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      expect(post: "/committees").to route_to("committees#create")
                   ^^^^^^^^^^^^^
spec/routing/committees_routing_spec.rb:23:47: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      expect(post: "/committees").to route_to("committees#create")
                                              ^^^^^^^^^^^^^^^^^^^
spec/routing/committees_routing_spec.rb:26:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    it "routes to #update via PUT" do
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/routing/committees_routing_spec.rb:27:7: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      expect(put: "/committees/1").to route_to("committees#update", id: "1")
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/routing/committees_routing_spec.rb:27:19: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      expect(put: "/committees/1").to route_to("committees#update", id: "1")
                  ^^^^^^^^^^^^^^^
spec/routing/committees_routing_spec.rb:27:48: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      expect(put: "/committees/1").to route_to("committees#update", id: "1")
                                               ^^^^^^^^^^^^^^^^^^^
spec/routing/committees_routing_spec.rb:27:73: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      expect(put: "/committees/1").to route_to("committees#update", id: "1")
                                                                        ^^^
spec/routing/committees_routing_spec.rb:30:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    it "routes to #update via PATCH" do
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/routing/committees_routing_spec.rb:31:7: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      expect(patch: "/committees/1").to route_to("committees#update", id: "1")
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/routing/committees_routing_spec.rb:31:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      expect(patch: "/committees/1").to route_to("committees#update", id: "1")
                    ^^^^^^^^^^^^^^^
spec/routing/committees_routing_spec.rb:31:50: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      expect(patch: "/committees/1").to route_to("committees#update", id: "1")
                                                 ^^^^^^^^^^^^^^^^^^^
spec/routing/committees_routing_spec.rb:31:75: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      expect(patch: "/committees/1").to route_to("committees#update", id: "1")
                                                                          ^^^
spec/routing/committees_routing_spec.rb:34:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    it "routes to #destroy" do
       ^^^^^^^^^^^^^^^^^^^^
spec/routing/committees_routing_spec.rb:35:7: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      expect(delete: "/committees/1").to route_to("committees#destroy", id: "1")
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/routing/committees_routing_spec.rb:35:22: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      expect(delete: "/committees/1").to route_to("committees#destroy", id: "1")
                     ^^^^^^^^^^^^^^^
spec/routing/committees_routing_spec.rb:35:51: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      expect(delete: "/committees/1").to route_to("committees#destroy", id: "1")
                                                  ^^^^^^^^^^^^^^^^^^^^
spec/routing/committees_routing_spec.rb:35:77: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      expect(delete: "/committees/1").to route_to("committees#destroy", id: "1")
                                                                            ^^^
spec/routing/events_routing_spec.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
require "rails_helper"
^
spec/routing/events_routing_spec.rb:1:9: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
require "rails_helper"
        ^^^^^^^^^^^^^^
spec/routing/events_routing_spec.rb:3:1: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
RSpec.describe EventsController, type: :routing do
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/routing/events_routing_spec.rb:4:12: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  describe "routing" do
           ^^^^^^^^^
spec/routing/events_routing_spec.rb:5:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    it "routes to #index" do
       ^^^^^^^^^^^^^^^^^^
spec/routing/events_routing_spec.rb:6:7: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      expect(get: "/events").to route_to("events#index")
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/routing/events_routing_spec.rb:6:19: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      expect(get: "/events").to route_to("events#index")
                  ^^^^^^^^^
spec/routing/events_routing_spec.rb:6:42: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      expect(get: "/events").to route_to("events#index")
                                         ^^^^^^^^^^^^^^
spec/routing/events_routing_spec.rb:9:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    it "routes to #new" do
       ^^^^^^^^^^^^^^^^
spec/routing/events_routing_spec.rb:10:7: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      expect(get: "/events/new").to route_to("events#new")
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/routing/events_routing_spec.rb:10:19: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      expect(get: "/events/new").to route_to("events#new")
                  ^^^^^^^^^^^^^
spec/routing/events_routing_spec.rb:10:46: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      expect(get: "/events/new").to route_to("events#new")
                                             ^^^^^^^^^^^^
spec/routing/events_routing_spec.rb:13:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    it "routes to #show" do
       ^^^^^^^^^^^^^^^^^
spec/routing/events_routing_spec.rb:14:7: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      expect(get: "/events/1").to route_to("events#show", id: "1")
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/routing/events_routing_spec.rb:14:19: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      expect(get: "/events/1").to route_to("events#show", id: "1")
                  ^^^^^^^^^^^
spec/routing/events_routing_spec.rb:14:44: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      expect(get: "/events/1").to route_to("events#show", id: "1")
                                           ^^^^^^^^^^^^^
spec/routing/events_routing_spec.rb:14:63: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      expect(get: "/events/1").to route_to("events#show", id: "1")
                                                              ^^^
spec/routing/events_routing_spec.rb:17:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    it "routes to #edit" do
       ^^^^^^^^^^^^^^^^^
spec/routing/events_routing_spec.rb:18:7: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      expect(get: "/events/1/edit").to route_to("events#edit", id: "1")
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/routing/events_routing_spec.rb:18:19: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      expect(get: "/events/1/edit").to route_to("events#edit", id: "1")
                  ^^^^^^^^^^^^^^^^
spec/routing/events_routing_spec.rb:18:49: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      expect(get: "/events/1/edit").to route_to("events#edit", id: "1")
                                                ^^^^^^^^^^^^^
spec/routing/events_routing_spec.rb:18:68: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      expect(get: "/events/1/edit").to route_to("events#edit", id: "1")
                                                                   ^^^
spec/routing/events_routing_spec.rb:21:1: C: [Correctable] Layout/EmptyLines: Extra blank line detected.
spec/routing/events_routing_spec.rb:22:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    it "routes to #create" do
       ^^^^^^^^^^^^^^^^^^^
spec/routing/events_routing_spec.rb:23:7: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      expect(post: "/events").to route_to("events#create")
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/routing/events_routing_spec.rb:23:20: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      expect(post: "/events").to route_to("events#create")
                   ^^^^^^^^^
spec/routing/events_routing_spec.rb:23:43: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      expect(post: "/events").to route_to("events#create")
                                          ^^^^^^^^^^^^^^^
spec/routing/events_routing_spec.rb:26:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    it "routes to #update via PUT" do
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/routing/events_routing_spec.rb:27:7: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      expect(put: "/events/1").to route_to("events#update", id: "1")
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/routing/events_routing_spec.rb:27:19: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      expect(put: "/events/1").to route_to("events#update", id: "1")
                  ^^^^^^^^^^^
spec/routing/events_routing_spec.rb:27:44: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      expect(put: "/events/1").to route_to("events#update", id: "1")
                                           ^^^^^^^^^^^^^^^
spec/routing/events_routing_spec.rb:27:65: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      expect(put: "/events/1").to route_to("events#update", id: "1")
                                                                ^^^
spec/routing/events_routing_spec.rb:30:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    it "routes to #update via PATCH" do
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/routing/events_routing_spec.rb:31:7: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      expect(patch: "/events/1").to route_to("events#update", id: "1")
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/routing/events_routing_spec.rb:31:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      expect(patch: "/events/1").to route_to("events#update", id: "1")
                    ^^^^^^^^^^^
spec/routing/events_routing_spec.rb:31:46: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      expect(patch: "/events/1").to route_to("events#update", id: "1")
                                             ^^^^^^^^^^^^^^^
spec/routing/events_routing_spec.rb:31:67: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      expect(patch: "/events/1").to route_to("events#update", id: "1")
                                                                  ^^^
spec/routing/events_routing_spec.rb:34:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    it "routes to #destroy" do
       ^^^^^^^^^^^^^^^^^^^^
spec/routing/events_routing_spec.rb:35:7: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      expect(delete: "/events/1").to route_to("events#destroy", id: "1")
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/routing/events_routing_spec.rb:35:22: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      expect(delete: "/events/1").to route_to("events#destroy", id: "1")
                     ^^^^^^^^^^^
spec/routing/events_routing_spec.rb:35:47: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      expect(delete: "/events/1").to route_to("events#destroy", id: "1")
                                              ^^^^^^^^^^^^^^^^
spec/routing/events_routing_spec.rb:35:69: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      expect(delete: "/events/1").to route_to("events#destroy", id: "1")
                                                                    ^^^
spec/routing/excuses_routing_spec.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
require "rails_helper"
^
spec/routing/excuses_routing_spec.rb:1:9: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
require "rails_helper"
        ^^^^^^^^^^^^^^
spec/routing/excuses_routing_spec.rb:3:1: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
RSpec.describe ExcusesController, type: :routing do
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/routing/excuses_routing_spec.rb:4:12: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  describe "routing" do
           ^^^^^^^^^
spec/routing/excuses_routing_spec.rb:5:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    it "routes to #index" do
       ^^^^^^^^^^^^^^^^^^
spec/routing/excuses_routing_spec.rb:6:7: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      expect(get: "/excuses").to route_to("excuses#index")
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/routing/excuses_routing_spec.rb:6:19: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      expect(get: "/excuses").to route_to("excuses#index")
                  ^^^^^^^^^^
spec/routing/excuses_routing_spec.rb:6:43: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      expect(get: "/excuses").to route_to("excuses#index")
                                          ^^^^^^^^^^^^^^^
spec/routing/excuses_routing_spec.rb:9:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    it "routes to #new" do
       ^^^^^^^^^^^^^^^^
spec/routing/excuses_routing_spec.rb:10:7: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      expect(get: "/excuses/new").to route_to("excuses#new")
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/routing/excuses_routing_spec.rb:10:19: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      expect(get: "/excuses/new").to route_to("excuses#new")
                  ^^^^^^^^^^^^^^
spec/routing/excuses_routing_spec.rb:10:47: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      expect(get: "/excuses/new").to route_to("excuses#new")
                                              ^^^^^^^^^^^^^
spec/routing/excuses_routing_spec.rb:13:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    it "routes to #show" do
       ^^^^^^^^^^^^^^^^^
spec/routing/excuses_routing_spec.rb:14:7: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      expect(get: "/excuses/1").to route_to("excuses#show", id: "1")
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/routing/excuses_routing_spec.rb:14:19: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      expect(get: "/excuses/1").to route_to("excuses#show", id: "1")
                  ^^^^^^^^^^^^
spec/routing/excuses_routing_spec.rb:14:45: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      expect(get: "/excuses/1").to route_to("excuses#show", id: "1")
                                            ^^^^^^^^^^^^^^
spec/routing/excuses_routing_spec.rb:14:65: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      expect(get: "/excuses/1").to route_to("excuses#show", id: "1")
                                                                ^^^
spec/routing/excuses_routing_spec.rb:17:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    it "routes to #edit" do
       ^^^^^^^^^^^^^^^^^
spec/routing/excuses_routing_spec.rb:18:7: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      expect(get: "/excuses/1/edit").to route_to("excuses#edit", id: "1")
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/routing/excuses_routing_spec.rb:18:19: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      expect(get: "/excuses/1/edit").to route_to("excuses#edit", id: "1")
                  ^^^^^^^^^^^^^^^^^
spec/routing/excuses_routing_spec.rb:18:50: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      expect(get: "/excuses/1/edit").to route_to("excuses#edit", id: "1")
                                                 ^^^^^^^^^^^^^^
spec/routing/excuses_routing_spec.rb:18:70: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      expect(get: "/excuses/1/edit").to route_to("excuses#edit", id: "1")
                                                                     ^^^
spec/routing/excuses_routing_spec.rb:21:1: C: [Correctable] Layout/EmptyLines: Extra blank line detected.
spec/routing/excuses_routing_spec.rb:22:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    it "routes to #create" do
       ^^^^^^^^^^^^^^^^^^^
spec/routing/excuses_routing_spec.rb:23:7: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      expect(post: "/excuses").to route_to("excuses#create")
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/routing/excuses_routing_spec.rb:23:20: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      expect(post: "/excuses").to route_to("excuses#create")
                   ^^^^^^^^^^
spec/routing/excuses_routing_spec.rb:23:44: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      expect(post: "/excuses").to route_to("excuses#create")
                                           ^^^^^^^^^^^^^^^^
spec/routing/excuses_routing_spec.rb:26:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    it "routes to #update via PUT" do
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/routing/excuses_routing_spec.rb:27:7: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      expect(put: "/excuses/1").to route_to("excuses#update", id: "1")
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/routing/excuses_routing_spec.rb:27:19: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      expect(put: "/excuses/1").to route_to("excuses#update", id: "1")
                  ^^^^^^^^^^^^
spec/routing/excuses_routing_spec.rb:27:45: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      expect(put: "/excuses/1").to route_to("excuses#update", id: "1")
                                            ^^^^^^^^^^^^^^^^
spec/routing/excuses_routing_spec.rb:27:67: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      expect(put: "/excuses/1").to route_to("excuses#update", id: "1")
                                                                  ^^^
spec/routing/excuses_routing_spec.rb:30:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    it "routes to #update via PATCH" do
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/routing/excuses_routing_spec.rb:31:7: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      expect(patch: "/excuses/1").to route_to("excuses#update", id: "1")
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/routing/excuses_routing_spec.rb:31:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      expect(patch: "/excuses/1").to route_to("excuses#update", id: "1")
                    ^^^^^^^^^^^^
spec/routing/excuses_routing_spec.rb:31:47: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      expect(patch: "/excuses/1").to route_to("excuses#update", id: "1")
                                              ^^^^^^^^^^^^^^^^
spec/routing/excuses_routing_spec.rb:31:69: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      expect(patch: "/excuses/1").to route_to("excuses#update", id: "1")
                                                                    ^^^
spec/routing/excuses_routing_spec.rb:34:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    it "routes to #destroy" do
       ^^^^^^^^^^^^^^^^^^^^
spec/routing/excuses_routing_spec.rb:35:7: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      expect(delete: "/excuses/1").to route_to("excuses#destroy", id: "1")
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/routing/excuses_routing_spec.rb:35:22: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      expect(delete: "/excuses/1").to route_to("excuses#destroy", id: "1")
                     ^^^^^^^^^^^^
spec/routing/excuses_routing_spec.rb:35:48: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      expect(delete: "/excuses/1").to route_to("excuses#destroy", id: "1")
                                               ^^^^^^^^^^^^^^^^^
spec/routing/excuses_routing_spec.rb:35:71: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      expect(delete: "/excuses/1").to route_to("excuses#destroy", id: "1")
                                                                      ^^^
spec/routing/member_events_routing_spec.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
require "rails_helper"
^
spec/routing/member_events_routing_spec.rb:1:9: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
require "rails_helper"
        ^^^^^^^^^^^^^^
spec/routing/member_events_routing_spec.rb:3:1: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
RSpec.describe MemberEventsController, type: :routing do
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/routing/member_events_routing_spec.rb:4:12: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  describe "routing" do
           ^^^^^^^^^
spec/routing/member_events_routing_spec.rb:5:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    it "routes to #index" do
       ^^^^^^^^^^^^^^^^^^
spec/routing/member_events_routing_spec.rb:6:7: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      expect(get: "/member_events").to route_to("member_events#index")
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/routing/member_events_routing_spec.rb:6:19: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      expect(get: "/member_events").to route_to("member_events#index")
                  ^^^^^^^^^^^^^^^^
spec/routing/member_events_routing_spec.rb:6:49: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      expect(get: "/member_events").to route_to("member_events#index")
                                                ^^^^^^^^^^^^^^^^^^^^^
spec/routing/member_events_routing_spec.rb:9:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    it "routes to #new" do
       ^^^^^^^^^^^^^^^^
spec/routing/member_events_routing_spec.rb:10:7: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      expect(get: "/member_events/new").to route_to("member_events#new")
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/routing/member_events_routing_spec.rb:10:19: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      expect(get: "/member_events/new").to route_to("member_events#new")
                  ^^^^^^^^^^^^^^^^^^^^
spec/routing/member_events_routing_spec.rb:10:53: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      expect(get: "/member_events/new").to route_to("member_events#new")
                                                    ^^^^^^^^^^^^^^^^^^^
spec/routing/member_events_routing_spec.rb:13:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    it "routes to #show" do
       ^^^^^^^^^^^^^^^^^
spec/routing/member_events_routing_spec.rb:14:7: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      expect(get: "/member_events/1").to route_to("member_events#show", id: "1")
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/routing/member_events_routing_spec.rb:14:19: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      expect(get: "/member_events/1").to route_to("member_events#show", id: "1")
                  ^^^^^^^^^^^^^^^^^^
spec/routing/member_events_routing_spec.rb:14:51: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      expect(get: "/member_events/1").to route_to("member_events#show", id: "1")
                                                  ^^^^^^^^^^^^^^^^^^^^
spec/routing/member_events_routing_spec.rb:14:77: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      expect(get: "/member_events/1").to route_to("member_events#show", id: "1")
                                                                            ^^^
spec/routing/member_events_routing_spec.rb:17:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    it "routes to #edit" do
       ^^^^^^^^^^^^^^^^^
spec/routing/member_events_routing_spec.rb:18:7: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      expect(get: "/member_events/1/edit").to route_to("member_events#edit", id: "1")
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/routing/member_events_routing_spec.rb:18:19: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      expect(get: "/member_events/1/edit").to route_to("member_events#edit", id: "1")
                  ^^^^^^^^^^^^^^^^^^^^^^^
spec/routing/member_events_routing_spec.rb:18:56: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      expect(get: "/member_events/1/edit").to route_to("member_events#edit", id: "1")
                                                       ^^^^^^^^^^^^^^^^^^^^
spec/routing/member_events_routing_spec.rb:18:82: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      expect(get: "/member_events/1/edit").to route_to("member_events#edit", id: "1")
                                                                                 ^^^
spec/routing/member_events_routing_spec.rb:21:1: C: [Correctable] Layout/EmptyLines: Extra blank line detected.
spec/routing/member_events_routing_spec.rb:22:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    it "routes to #create" do
       ^^^^^^^^^^^^^^^^^^^
spec/routing/member_events_routing_spec.rb:23:7: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      expect(post: "/member_events").to route_to("member_events#create")
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/routing/member_events_routing_spec.rb:23:20: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      expect(post: "/member_events").to route_to("member_events#create")
                   ^^^^^^^^^^^^^^^^
spec/routing/member_events_routing_spec.rb:23:50: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      expect(post: "/member_events").to route_to("member_events#create")
                                                 ^^^^^^^^^^^^^^^^^^^^^^
spec/routing/member_events_routing_spec.rb:26:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    it "routes to #update via PUT" do
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/routing/member_events_routing_spec.rb:27:7: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      expect(put: "/member_events/1").to route_to("member_events#update", id: "1")
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/routing/member_events_routing_spec.rb:27:19: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      expect(put: "/member_events/1").to route_to("member_events#update", id: "1")
                  ^^^^^^^^^^^^^^^^^^
spec/routing/member_events_routing_spec.rb:27:51: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      expect(put: "/member_events/1").to route_to("member_events#update", id: "1")
                                                  ^^^^^^^^^^^^^^^^^^^^^^
spec/routing/member_events_routing_spec.rb:27:79: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      expect(put: "/member_events/1").to route_to("member_events#update", id: "1")
                                                                              ^^^
spec/routing/member_events_routing_spec.rb:30:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    it "routes to #update via PATCH" do
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/routing/member_events_routing_spec.rb:31:7: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      expect(patch: "/member_events/1").to route_to("member_events#update", id: "1")
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/routing/member_events_routing_spec.rb:31:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      expect(patch: "/member_events/1").to route_to("member_events#update", id: "1")
                    ^^^^^^^^^^^^^^^^^^
spec/routing/member_events_routing_spec.rb:31:53: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      expect(patch: "/member_events/1").to route_to("member_events#update", id: "1")
                                                    ^^^^^^^^^^^^^^^^^^^^^^
spec/routing/member_events_routing_spec.rb:31:81: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      expect(patch: "/member_events/1").to route_to("member_events#update", id: "1")
                                                                                ^^^
spec/routing/member_events_routing_spec.rb:34:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    it "routes to #destroy" do
       ^^^^^^^^^^^^^^^^^^^^
spec/routing/member_events_routing_spec.rb:35:7: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      expect(delete: "/member_events/1").to route_to("member_events#destroy", id: "1")
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/routing/member_events_routing_spec.rb:35:22: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      expect(delete: "/member_events/1").to route_to("member_events#destroy", id: "1")
                     ^^^^^^^^^^^^^^^^^^
spec/routing/member_events_routing_spec.rb:35:54: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      expect(delete: "/member_events/1").to route_to("member_events#destroy", id: "1")
                                                     ^^^^^^^^^^^^^^^^^^^^^^^
spec/routing/member_events_routing_spec.rb:35:83: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      expect(delete: "/member_events/1").to route_to("member_events#destroy", id: "1")
                                                                                  ^^^
spec/unit/unit_committee_spec.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
require 'rails_helper'
^
spec/unit/unit_committee_spec.rb:3:1: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
RSpec.describe Committee, type: :model do
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/unit/unit_committee_spec.rb:4:1: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
    let(:valid_attributes) {
^^^^
spec/unit/unit_committee_spec.rb:4:28: C: [Correctable] Style/BlockDelimiters: Avoid using {...} for multi-line blocks.
    let(:valid_attributes) {
                           ^
spec/unit/unit_committee_spec.rb:5:5: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
        {
    ^^^^
spec/unit/unit_committee_spec.rb:6:13: C: [Correctable] Layout/FirstHashElementIndentation: Use 2 spaces for indentation in a hash, relative to the start of the line where the left curly brace is.
            name: "MyName1",
            ^^^^^^^^^^^^^^^
spec/unit/unit_committee_spec.rb:6:19: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            name: "MyName1",
                  ^^^^^^^^^
spec/unit/unit_committee_spec.rb:7:31: C: [Correctable] Style/NumericLiterals: Use underscores(_) as thousands separator and separate every 3 digits with them.
            leader_member_id: 12345
                              ^^^^^
spec/unit/unit_committee_spec.rb:10:1: C: [Correctable] Layout/TrailingWhitespace: Trailing whitespace detected.
spec/unit/unit_committee_spec.rb:11:5: C: [Correctable] RSpec/LeadingSubject: Declare subject above any other let declarations.
    subject do ...
    ^^^^^^^^^^
spec/unit/unit_committee_spec.rb:12:5: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
        described_class.new(valid_attributes)
    ^^^^
spec/unit/unit_committee_spec.rb:15:5: C: RSpec/RepeatedExample: Don't repeat examples within an example group.
    it 'is valid with valid attributes' do ...
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/unit/unit_committee_spec.rb:16:5: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
        expect(subject).to be_valid
    ^^^^
spec/unit/unit_committee_spec.rb:16:9: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        expect(subject).to be_valid
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/unit/unit_committee_spec.rb:16:16: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
        expect(subject).to be_valid
               ^^^^^^^
spec/unit/unit_committee_spec.rb:20:5: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
        subject.name = nil;
    ^^^^
spec/unit/unit_committee_spec.rb:20:9: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
        subject.name = nil;
        ^^^^^^^
spec/unit/unit_committee_spec.rb:20:27: C: [Correctable] Style/Semicolon: Do not use semicolons to terminate expressions.
        subject.name = nil;
                          ^
spec/unit/unit_committee_spec.rb:21:9: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        expect(subject).to be_valid
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/unit/unit_committee_spec.rb:21:16: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
        expect(subject).to be_valid
               ^^^^^^^
spec/unit/unit_committee_spec.rb:24:5: C: RSpec/RepeatedExample: Don't repeat examples within an example group.
    it 'is valid without leader member id' do ...
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/unit/unit_committee_spec.rb:25:5: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
        expect(subject).to be_valid
    ^^^^
spec/unit/unit_committee_spec.rb:25:9: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        expect(subject).to be_valid
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/unit/unit_committee_spec.rb:25:16: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
        expect(subject).to be_valid
               ^^^^^^^
spec/unit/unit_committee_spec.rb:27:4: C: [Correctable] Layout/TrailingEmptyLines: Final newline missing.
end
   
spec/unit/unit_event_spec.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
require 'rails_helper'
^
spec/unit/unit_event_spec.rb:3:1: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
RSpec.describe Event, type: :model do
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/unit/unit_event_spec.rb:4:1: C: [Correctable] Layout/EmptyLinesAroundBlockBody: Extra empty line detected at block body beginning.
spec/unit/unit_event_spec.rb:5:1: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
    let(:valid_general) {
^^^^
spec/unit/unit_event_spec.rb:5:25: C: [Correctable] Style/BlockDelimiters: Avoid using {...} for multi-line blocks.
    let(:valid_general) {
                        ^
spec/unit/unit_event_spec.rb:6:5: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
        {
    ^^^^
spec/unit/unit_event_spec.rb:7:13: C: [Correctable] Layout/FirstHashElementIndentation: Use 2 spaces for indentation in a hash, relative to the start of the line where the left curly brace is.
            name: "The Event",
            ^^^^^^^^^^^^^^^^^
spec/unit/unit_event_spec.rb:7:19: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            name: "The Event",
                  ^^^^^^^^^^^
spec/unit/unit_event_spec.rb:8:30: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            date: Date.parse("2022-01-01")
                             ^^^^^^^^^^^^
spec/unit/unit_event_spec.rb:12:25: C: [Correctable] Style/BlockDelimiters: Avoid using {...} for multi-line blocks.
    let(:valid_meeting) {
                        ^
spec/unit/unit_event_spec.rb:13:5: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
        {
    ^^^^
spec/unit/unit_event_spec.rb:14:13: C: [Correctable] Layout/FirstHashElementIndentation: Use 2 spaces for indentation in a hash, relative to the start of the line where the left curly brace is.
            event_type: "Meeting",
            ^^^^^^^^^^^^^^^^^^^^^
spec/unit/unit_event_spec.rb:14:25: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            event_type: "Meeting",
                        ^^^^^^^^^
spec/unit/unit_event_spec.rb:19:25: C: [Correctable] Style/BlockDelimiters: Avoid using {...} for multi-line blocks.
    let(:valid_service) {
                        ^
spec/unit/unit_event_spec.rb:20:5: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
        {
    ^^^^
spec/unit/unit_event_spec.rb:21:13: C: [Correctable] Layout/FirstHashElementIndentation: Use 2 spaces for indentation in a hash, relative to the start of the line where the left curly brace is.
            point_type: "Outreach",
            ^^^^^^^^^^^^^^^^^^^^^^
spec/unit/unit_event_spec.rb:21:25: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            point_type: "Outreach",
                        ^^^^^^^^^^
spec/unit/unit_event_spec.rb:22:25: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            event_type: "Service"
                        ^^^^^^^^^
spec/unit/unit_event_spec.rb:26:5: C: [Correctable] RSpec/LeadingSubject: Declare subject above any other let declarations.
    subject do ...
    ^^^^^^^^^^
spec/unit/unit_event_spec.rb:27:5: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
        described_class.new(valid_service)
    ^^^^
spec/unit/unit_event_spec.rb:29:1: C: [Correctable] Layout/TrailingWhitespace: Trailing whitespace detected.
spec/unit/unit_event_spec.rb:30:67: C: [Correctable] Layout/TrailingWhitespace: Trailing whitespace detected.
    # resets attributes before test to ensure they are not changed 
                                                                  ^
spec/unit/unit_event_spec.rb:31:14: C: [Correctable] Layout/TrailingWhitespace: Trailing whitespace detected.
    before do 
             ^
spec/unit/unit_event_spec.rb:32:5: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
        subject.name = valid_general[:name]
    ^^^^
spec/unit/unit_event_spec.rb:32:9: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
        subject.name = valid_general[:name]
        ^^^^^^^
spec/unit/unit_event_spec.rb:33:9: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
        subject.date = valid_general[:date]
        ^^^^^^^
spec/unit/unit_event_spec.rb:37:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    it "is valid with valid attributes" do
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/unit/unit_event_spec.rb:38:5: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
        expect(subject).to be_valid
    ^^^^
spec/unit/unit_event_spec.rb:38:9: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        expect(subject).to be_valid
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/unit/unit_event_spec.rb:38:16: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
        expect(subject).to be_valid
               ^^^^^^^
spec/unit/unit_event_spec.rb:41:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    it "is not valid without date" do
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/unit/unit_event_spec.rb:42:5: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
        subject.date = nil
    ^^^^
spec/unit/unit_event_spec.rb:42:9: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
        subject.date = nil
        ^^^^^^^
spec/unit/unit_event_spec.rb:43:9: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        expect(subject).not_to be_valid
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/unit/unit_event_spec.rb:43:16: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
        expect(subject).not_to be_valid
               ^^^^^^^
spec/unit/unit_event_spec.rb:45:1: C: [Correctable] Layout/TrailingWhitespace: Trailing whitespace detected.
spec/unit/unit_event_spec.rb:46:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    it "is not valid without name" do
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/unit/unit_event_spec.rb:47:5: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
        subject.name = nil
    ^^^^
spec/unit/unit_event_spec.rb:47:9: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
        subject.name = nil
        ^^^^^^^
spec/unit/unit_event_spec.rb:48:9: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        expect(subject).not_to be_valid
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/unit/unit_event_spec.rb:48:16: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
        expect(subject).not_to be_valid
               ^^^^^^^
spec/unit/unit_event_spec.rb:50:1: C: [Correctable] Layout/TrailingWhitespace: Trailing whitespace detected.
spec/unit/unit_event_spec.rb:51:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    it "is not valid without event_type" do
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/unit/unit_event_spec.rb:52:5: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
        subject.event_type = nil
    ^^^^
spec/unit/unit_event_spec.rb:52:9: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
        subject.event_type = nil
        ^^^^^^^
spec/unit/unit_event_spec.rb:53:9: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        expect(subject).not_to be_valid
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/unit/unit_event_spec.rb:53:16: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
        expect(subject).not_to be_valid
               ^^^^^^^
spec/unit/unit_event_spec.rb:56:55: C: [Correctable] Layout/TrailingWhitespace: Trailing whitespace detected.
    # if there is a meeting there needs to be a phrase 
                                                      ^
spec/unit/unit_event_spec.rb:57:13: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    context "when event_type is Meeting" do 
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/unit/unit_event_spec.rb:57:44: C: [Correctable] Layout/TrailingWhitespace: Trailing whitespace detected.
    context "when event_type is Meeting" do 
                                           ^
spec/unit/unit_event_spec.rb:58:5: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
        before do
    ^^^^
spec/unit/unit_event_spec.rb:59:9: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
            subject.event_type = valid_meeting[:event_type]
        ^^^^
spec/unit/unit_event_spec.rb:59:13: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
            subject.event_type = valid_meeting[:event_type]
            ^^^^^^^
spec/unit/unit_event_spec.rb:60:13: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
            subject.phrase = valid_meeting[:phrase]
            ^^^^^^^
spec/unit/unit_event_spec.rb:63:12: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
        it "is valid when there is a phrase" do
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/unit/unit_event_spec.rb:64:9: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
            expect(subject).to be_valid
        ^^^^
spec/unit/unit_event_spec.rb:64:13: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
            expect(subject).to be_valid
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/unit/unit_event_spec.rb:64:20: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
            expect(subject).to be_valid
                   ^^^^^^^
spec/unit/unit_event_spec.rb:67:12: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
        it "is not valid when there is not phrase" do
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/unit/unit_event_spec.rb:68:9: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
            subject.phrase = nil
        ^^^^
spec/unit/unit_event_spec.rb:68:13: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
            subject.phrase = nil
            ^^^^^^^
spec/unit/unit_event_spec.rb:69:13: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
            expect(subject).not_to be_valid
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/unit/unit_event_spec.rb:69:20: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
            expect(subject).not_to be_valid
                   ^^^^^^^
spec/unit/unit_event_spec.rb:71:1: C: [Correctable] Layout/EmptyLinesAroundBlockBody: Extra empty line detected at block body end.
spec/unit/unit_event_spec.rb:75:13: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    context "when event_type is Service" do
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/unit/unit_event_spec.rb:76:5: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
        before do
    ^^^^
spec/unit/unit_event_spec.rb:77:9: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
            subject.event_type = valid_service[:event_type]
        ^^^^
spec/unit/unit_event_spec.rb:77:13: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
            subject.event_type = valid_service[:event_type]
            ^^^^^^^
spec/unit/unit_event_spec.rb:78:13: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
            subject.point_type = valid_service[:point_type]
            ^^^^^^^
spec/unit/unit_event_spec.rb:80:1: C: [Correctable] Layout/TrailingWhitespace: Trailing whitespace detected.
spec/unit/unit_event_spec.rb:81:12: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
        it "is valid when there is a point_type" do
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/unit/unit_event_spec.rb:82:9: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
            expect(subject).to be_valid
        ^^^^
spec/unit/unit_event_spec.rb:82:13: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
            expect(subject).to be_valid
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/unit/unit_event_spec.rb:82:20: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
            expect(subject).to be_valid
                   ^^^^^^^
spec/unit/unit_event_spec.rb:83:9: C: [Correctable] RSpec/EmptyLineAfterExample: Add an empty line after it.
        end
        ^^^
spec/unit/unit_event_spec.rb:84:12: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
        it "is not valid when there is not a point_type" do
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/unit/unit_event_spec.rb:85:9: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
            subject.point_type = nil
        ^^^^
spec/unit/unit_event_spec.rb:85:13: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
            subject.point_type = nil
            ^^^^^^^
spec/unit/unit_event_spec.rb:86:13: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
            expect(subject).not_to be_valid
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/unit/unit_event_spec.rb:86:20: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
            expect(subject).not_to be_valid
                   ^^^^^^^
spec/unit/unit_event_spec.rb:92:5: C: [Correctable] Layout/CommentIndentation: Incorrect indentation detected (column 4 instead of 2).
    # before it is entered into the database. The same goes for phrase and Service
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/unit/unit_event_spec.rb:93:4: C: [Correctable] Layout/TrailingEmptyLines: Final newline missing.
end
   
spec/unit/unit_excuse_spec.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
require 'rails_helper'
^
spec/unit/unit_excuse_spec.rb:3:1: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
RSpec.describe Excuse, type: :model do
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/unit/unit_excuse_spec.rb:4:1: C: [Correctable] Layout/TrailingWhitespace: Trailing whitespace detected.
spec/unit/unit_excuse_spec.rb:5:1: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
    subject do
^^^^
spec/unit/unit_excuse_spec.rb:6:5: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
        described_class.new(description: "MyDescription")
    ^^^^
spec/unit/unit_excuse_spec.rb:6:42: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
        described_class.new(description: "MyDescription")
                                         ^^^^^^^^^^^^^^^
spec/unit/unit_excuse_spec.rb:9:13: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    context "file not present" do
            ^^^^^^^^^^^^^^^^^^
spec/unit/unit_excuse_spec.rb:10:1: C: [Correctable] Layout/EmptyLinesAroundBlockBody: Extra empty line detected at block body beginning.
spec/unit/unit_excuse_spec.rb:11:5: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
        it 'is valid with description' do
    ^^^^
spec/unit/unit_excuse_spec.rb:12:9: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
            expect(subject).to be_valid
        ^^^^
spec/unit/unit_excuse_spec.rb:12:13: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
            expect(subject).to be_valid
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/unit/unit_excuse_spec.rb:12:20: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
            expect(subject).to be_valid
                   ^^^^^^^
spec/unit/unit_excuse_spec.rb:13:9: C: [Correctable] RSpec/EmptyLineAfterExample: Add an empty line after it.
        end
        ^^^
spec/unit/unit_excuse_spec.rb:15:9: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
            subject.description = nil
        ^^^^
spec/unit/unit_excuse_spec.rb:15:13: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
            subject.description = nil
            ^^^^^^^
spec/unit/unit_excuse_spec.rb:16:13: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
            expect(subject).to be_valid
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/unit/unit_excuse_spec.rb:16:20: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
            expect(subject).to be_valid
                   ^^^^^^^
spec/unit/unit_excuse_spec.rb:20:13: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    context "attaching < 5 MB pdf file" do
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/unit/unit_excuse_spec.rb:21:5: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
        before do
    ^^^^
spec/unit/unit_excuse_spec.rb:22:9: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
            file = Rack::Test::UploadedFile.new(Rails.root.join("spec/fixtures/valid_file.pdf"), "application/pdf")
        ^^^^
spec/unit/unit_excuse_spec.rb:22:65: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            file = Rack::Test::UploadedFile.new(Rails.root.join("spec/fixtures/valid_file.pdf"), "application/pdf")
                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/unit/unit_excuse_spec.rb:22:98: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            file = Rack::Test::UploadedFile.new(Rails.root.join("spec/fixtures/valid_file.pdf"), "application/pdf")
                                                                                                 ^^^^^^^^^^^^^^^^^
spec/unit/unit_excuse_spec.rb:23:13: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
            subject.file.attach(file)
            ^^^^^^^
spec/unit/unit_excuse_spec.rb:26:12: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
        it "is valid with given file" do
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/unit/unit_excuse_spec.rb:27:9: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
            expect(subject).to be_valid
        ^^^^
spec/unit/unit_excuse_spec.rb:27:13: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
            expect(subject).to be_valid
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/unit/unit_excuse_spec.rb:27:20: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
            expect(subject).to be_valid
                   ^^^^^^^
spec/unit/unit_excuse_spec.rb:30:12: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
        it "is valid without description" do
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/unit/unit_excuse_spec.rb:31:9: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
            subject.description = nil
        ^^^^
spec/unit/unit_excuse_spec.rb:31:13: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
            subject.description = nil
            ^^^^^^^
spec/unit/unit_excuse_spec.rb:32:13: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
            expect(subject).to be_valid
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/unit/unit_excuse_spec.rb:32:20: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
            expect(subject).to be_valid
                   ^^^^^^^
spec/unit/unit_excuse_spec.rb:35:4: C: [Correctable] Layout/TrailingEmptyLines: Final newline missing.
end
   
spec/unit/unit_member_event_spec.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
require 'rails_helper'
^
spec/unit/unit_member_event_spec.rb:3:1: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
RSpec.describe MemberEvent, type: :model do
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/unit/unit_member_event_spec.rb:4:1: C: [Correctable] Layout/EmptyLinesAroundBlockBody: Extra empty line detected at block body beginning.
spec/unit/unit_member_event_spec.rb:5:1: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
    let(:member) {
^^^^
spec/unit/unit_member_event_spec.rb:5:18: C: [Correctable] Style/BlockDelimiters: Avoid using {...} for multi-line blocks.
    let(:member) {
                 ^
spec/unit/unit_member_event_spec.rb:6:5: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
        Member.create!(
    ^^^^
spec/unit/unit_member_event_spec.rb:7:13: C: [Correctable] Layout/FirstArgumentIndentation: Indent the first argument one step more than the start of the previous line.
            name: "MyName"
            ^^^^^^^^^^^^^^
spec/unit/unit_member_event_spec.rb:7:19: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            name: "MyName"
                  ^^^^^^^^
spec/unit/unit_member_event_spec.rb:8:9: C: [Correctable] Layout/ClosingParenthesisIndentation: Indent ) to column 10 (not 8)
        )
        ^
spec/unit/unit_member_event_spec.rb:11:17: C: [Correctable] Style/BlockDelimiters: Avoid using {...} for multi-line blocks.
    let(:event) {
                ^
spec/unit/unit_member_event_spec.rb:12:5: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
        Event.create!(
    ^^^^
spec/unit/unit_member_event_spec.rb:13:13: C: [Correctable] Layout/FirstArgumentIndentation: Indent the first argument one step more than the start of the previous line.
            name: "Park clean up", ...
            ^^^^^^^^^^^^^^^^^^^^^^
spec/unit/unit_member_event_spec.rb:13:19: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            name: "Park clean up",
                  ^^^^^^^^^^^^^^^
spec/unit/unit_member_event_spec.rb:14:30: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            date: Date.parse("2022-12-15"),
                             ^^^^^^^^^^^^
spec/unit/unit_member_event_spec.rb:15:25: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            point_type: "Outreach",
                        ^^^^^^^^^^
spec/unit/unit_member_event_spec.rb:16:25: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            event_type: "Service"
                        ^^^^^^^^^
spec/unit/unit_member_event_spec.rb:17:9: C: [Correctable] Layout/ClosingParenthesisIndentation: Indent ) to column 10 (not 8)
        )
        ^
spec/unit/unit_member_event_spec.rb:20:28: C: [Correctable] Style/BlockDelimiters: Avoid using {...} for multi-line blocks.
    let(:valid_attributes) {
                           ^
spec/unit/unit_member_event_spec.rb:21:5: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
        {
    ^^^^
spec/unit/unit_member_event_spec.rb:22:13: C: [Correctable] Layout/FirstHashElementIndentation: Use 2 spaces for indentation in a hash, relative to the start of the line where the left curly brace is.
            event_id: event.id,
            ^^^^^^^^^^^^^^^^^^
spec/unit/unit_member_event_spec.rb:27:5: C: [Correctable] RSpec/LeadingSubject: Declare subject above any other let declarations.
    subject do ...
    ^^^^^^^^^^
spec/unit/unit_member_event_spec.rb:28:5: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
        described_class.new(valid_attributes)
    ^^^^
spec/unit/unit_member_event_spec.rb:31:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    it "is valid with valid attributes" do
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/unit/unit_member_event_spec.rb:32:5: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
        expect(subject).to be_valid
    ^^^^
spec/unit/unit_member_event_spec.rb:32:9: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        expect(subject).to be_valid
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/unit/unit_member_event_spec.rb:32:16: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
        expect(subject).to be_valid
               ^^^^^^^
spec/unit/unit_member_event_spec.rb:35:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    it "is not valid without event" do
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/unit/unit_member_event_spec.rb:36:5: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
        subject.event_id = nil
    ^^^^
spec/unit/unit_member_event_spec.rb:36:9: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
        subject.event_id = nil
        ^^^^^^^
spec/unit/unit_member_event_spec.rb:37:9: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        expect(subject).not_to be_valid
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/unit/unit_member_event_spec.rb:37:16: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
        expect(subject).not_to be_valid
               ^^^^^^^
spec/unit/unit_member_event_spec.rb:40:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    it "is not valid without member" do
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/unit/unit_member_event_spec.rb:41:5: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
        subject.member_id = nil
    ^^^^
spec/unit/unit_member_event_spec.rb:41:9: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
        subject.member_id = nil
        ^^^^^^^
spec/unit/unit_member_event_spec.rb:42:9: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        expect(subject).not_to be_valid
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/unit/unit_member_event_spec.rb:42:16: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
        expect(subject).not_to be_valid
               ^^^^^^^
spec/unit/unit_member_event_spec.rb:45:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    it "is not valid missing event (id does not correspond to event)" do
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/unit/unit_member_event_spec.rb:46:5: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
        subject.event_id = -1
    ^^^^
spec/unit/unit_member_event_spec.rb:46:9: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
        subject.event_id = -1
        ^^^^^^^
spec/unit/unit_member_event_spec.rb:47:9: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        expect(subject).not_to be_valid
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/unit/unit_member_event_spec.rb:47:16: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
        expect(subject).not_to be_valid
               ^^^^^^^
spec/unit/unit_member_event_spec.rb:50:8: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    it "is not valid missing member (id does not correspond to event)" do
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/unit/unit_member_event_spec.rb:51:5: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
        subject.member_id = -1
    ^^^^
spec/unit/unit_member_event_spec.rb:51:9: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
        subject.member_id = -1
        ^^^^^^^
spec/unit/unit_member_event_spec.rb:52:9: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
        expect(subject).not_to be_valid
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/unit/unit_member_event_spec.rb:52:16: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
        expect(subject).not_to be_valid
               ^^^^^^^
spec/unit/unit_member_event_spec.rb:54:4: C: [Correctable] Layout/TrailingEmptyLines: Final newline missing.
end
   
spec/unit/unit_member_spec.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
require 'rails_helper'
^
spec/unit/unit_member_spec.rb:3:1: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
RSpec.describe Member, type: :model do
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/unit/unit_member_spec.rb:4:28: C: [Correctable] Style/BlockDelimiters: Avoid using {...} for multi-line blocks.
    let(:valid_attributes) {
                           ^
spec/unit/unit_member_spec.rb:5:5: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
        {
    ^^^^
spec/unit/unit_member_spec.rb:6:13: C: [Correctable] Layout/FirstHashElementIndentation: Use 2 spaces for indentation in a hash, relative to the start of the line where the left curly brace is.
            name: "MyName1",
            ^^^^^^^^^^^^^^^
spec/unit/unit_member_spec.rb:6:19: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            name: "MyName1",
                  ^^^^^^^^^
spec/unit/unit_member_spec.rb:7:24: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            committee: "MyCommittee1",
                       ^^^^^^^^^^^^^^
spec/unit/unit_member_spec.rb:8:23: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
            position: "MyPosition1",
                      ^^^^^^^^^^^^^
spec/unit/unit_member_spec.rb:9:26: C: [Correctable] Style/NumericLiterals: Use underscores(_) as thousands separator and separate every 3 digits with them.
            civicPoints: 10010,
                         ^^^^^
spec/unit/unit_member_spec.rb:10:29: C: [Correctable] Style/NumericLiterals: Use underscores(_) as thousands separator and separate every 3 digits with them.
            outreachPoints: 10011,
                            ^^^^^
spec/unit/unit_member_spec.rb:11:27: C: [Correctable] Style/NumericLiterals: Use underscores(_) as thousands separator and separate every 3 digits with them.
            socialPoints: 10012,
                          ^^^^^
spec/unit/unit_member_spec.rb:12:30: C: [Correctable] Style/NumericLiterals: Use underscores(_) as thousands separator and separate every 3 digits with them.
            marketingPoints: 10013,
                             ^^^^^
spec/unit/unit_member_spec.rb:13:26: C: [Correctable] Style/NumericLiterals: Use underscores(_) as thousands separator and separate every 3 digits with them.
            totalPoints: 10014
                         ^^^^^
spec/unit/unit_member_spec.rb:17:5: C: [Correctable] RSpec/LeadingSubject: Declare subject above any other let declarations.
    subject do ...
    ^^^^^^^^^^
spec/unit/unit_member_spec.rb:20:1: C: [Correctable] Layout/TrailingWhitespace: Trailing whitespace detected.
spec/unit/unit_member_spec.rb:22:7: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      expect(subject).to be_valid
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/unit/unit_member_spec.rb:22:14: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
      expect(subject).to be_valid
             ^^^^^^^
spec/unit/unit_member_spec.rb:24:1: C: [Correctable] Layout/TrailingWhitespace: Trailing whitespace detected.
spec/unit/unit_member_spec.rb:26:7: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
      subject.name = nil
      ^^^^^^^
spec/unit/unit_member_spec.rb:27:7: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      expect(subject).not_to be_valid
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/unit/unit_member_spec.rb:27:14: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
      expect(subject).not_to be_valid
             ^^^^^^^
spec/unit/unit_member_spec.rb:29:1: C: [Correctable] Layout/TrailingWhitespace: Trailing whitespace detected.
spec/unit/unit_member_spec.rb:31:7: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
      subject.committee = nil
      ^^^^^^^
spec/unit/unit_member_spec.rb:32:7: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      expect(subject).to be_valid
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/unit/unit_member_spec.rb:32:14: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
      expect(subject).to be_valid
             ^^^^^^^
spec/unit/unit_member_spec.rb:34:1: C: [Correctable] Layout/TrailingWhitespace: Trailing whitespace detected.
spec/unit/unit_member_spec.rb:36:7: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
      subject.position = nil
      ^^^^^^^
spec/unit/unit_member_spec.rb:37:7: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      expect(subject).to be_valid
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/unit/unit_member_spec.rb:37:14: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
      expect(subject).to be_valid
             ^^^^^^^
spec/unit/unit_member_spec.rb:39:1: C: [Correctable] Layout/TrailingWhitespace: Trailing whitespace detected.
spec/unit/unit_member_spec.rb:41:7: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
      subject.civicPoints = nil
      ^^^^^^^
spec/unit/unit_member_spec.rb:42:7: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      expect(subject).to be_valid
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/unit/unit_member_spec.rb:42:14: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
      expect(subject).to be_valid
             ^^^^^^^
spec/unit/unit_member_spec.rb:43:5: C: [Correctable] RSpec/EmptyLineAfterExample: Add an empty line after it.
    end
    ^^^
spec/unit/unit_member_spec.rb:45:7: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
      subject.outreachPoints = nil
      ^^^^^^^
spec/unit/unit_member_spec.rb:46:7: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      expect(subject).to be_valid
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/unit/unit_member_spec.rb:46:14: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
      expect(subject).to be_valid
             ^^^^^^^
spec/unit/unit_member_spec.rb:47:5: C: [Correctable] RSpec/EmptyLineAfterExample: Add an empty line after it.
    end
    ^^^
spec/unit/unit_member_spec.rb:49:7: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
      subject.socialPoints = nil
      ^^^^^^^
spec/unit/unit_member_spec.rb:50:7: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      expect(subject).to be_valid
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/unit/unit_member_spec.rb:50:14: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
      expect(subject).to be_valid
             ^^^^^^^
spec/unit/unit_member_spec.rb:51:5: C: [Correctable] RSpec/EmptyLineAfterExample: Add an empty line after it.
    end
    ^^^
spec/unit/unit_member_spec.rb:53:7: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
      subject.marketingPoints = nil
      ^^^^^^^
spec/unit/unit_member_spec.rb:54:7: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      expect(subject).to be_valid
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/unit/unit_member_spec.rb:54:14: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
      expect(subject).to be_valid
             ^^^^^^^
spec/unit/unit_member_spec.rb:56:1: C: [Correctable] Layout/TrailingWhitespace: Trailing whitespace detected.
spec/unit/unit_member_spec.rb:58:7: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
      subject.totalPoints = nil
      ^^^^^^^
spec/unit/unit_member_spec.rb:59:7: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
      expect(subject).to be_valid
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/unit/unit_member_spec.rb:59:14: C: RSpec/NamedSubject: Name your test subject if you need to reference it explicitly.
      expect(subject).to be_valid
             ^^^^^^^
spec/unit/unit_member_spec.rb:61:3: C: [Correctable] Layout/BlockAlignment: end at 61, 2 is not aligned with RSpec.describe Member, type: :model do at 3, 0.
  end
  ^^^
spec/unit/unit_member_spec.rb:61:6: C: [Correctable] Layout/TrailingEmptyLines: Final newline missing.
  end
     
spec/views/committees/edit.html.erb_spec.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
require 'rails_helper'
^
spec/views/committees/edit.html.erb_spec.rb:3:1: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
RSpec.describe "committees/edit", type: :view do
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/views/committees/edit.html.erb_spec.rb:3:16: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
RSpec.describe "committees/edit", type: :view do
               ^^^^^^^^^^^^^^^^^
spec/views/committees/edit.html.erb_spec.rb:4:19: C: [Correctable] Style/BlockDelimiters: Avoid using {...} for multi-line blocks.
  let(:committee) {
                  ^
spec/views/committees/edit.html.erb_spec.rb:6:13: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      name: "MyString",
            ^^^^^^^^^^
spec/views/committees/edit.html.erb_spec.rb:11:3: C: [Correctable] RSpec/HookArgument: Omit the default :each argument for RSpec hooks.
  before(:each) do
  ^^^^^^^^^^^^^
spec/views/committees/edit.html.erb_spec.rb:15:6: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  it "renders the edit committee form" do
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/views/committees/edit.html.erb_spec.rb:18:19: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    assert_select "form[action=?][method=?]", committee_path(committee), "post" do
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/views/committees/edit.html.erb_spec.rb:18:74: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    assert_select "form[action=?][method=?]", committee_path(committee), "post" do
                                                                         ^^^^^^
spec/views/committees/edit.html.erb_spec.rb:19:1: C: [Correctable] Layout/EmptyLinesAroundBlockBody: Extra empty line detected at block body beginning.
spec/views/committees/edit.html.erb_spec.rb:20:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      assert_select "input[name=?]", "committee[name]"
                    ^^^^^^^^^^^^^^^
spec/views/committees/edit.html.erb_spec.rb:20:38: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      assert_select "input[name=?]", "committee[name]"
                                     ^^^^^^^^^^^^^^^^^
spec/views/committees/edit.html.erb_spec.rb:22:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      assert_select "input[name=?]", "committee[leader_member_id]"
                    ^^^^^^^^^^^^^^^
spec/views/committees/edit.html.erb_spec.rb:22:38: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      assert_select "input[name=?]", "committee[leader_member_id]"
                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/views/committees/index.html.erb_spec.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
require 'rails_helper'
^
spec/views/committees/index.html.erb_spec.rb:3:1: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
RSpec.describe "committees/index", type: :view do
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/views/committees/index.html.erb_spec.rb:3:16: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
RSpec.describe "committees/index", type: :view do
               ^^^^^^^^^^^^^^^^^^
spec/views/committees/index.html.erb_spec.rb:4:3: C: [Correctable] RSpec/HookArgument: Omit the default :each argument for RSpec hooks.
  before(:each) do
  ^^^^^^^^^^^^^
spec/views/committees/index.html.erb_spec.rb:7:15: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
        name: "Name",
              ^^^^^^
spec/views/committees/index.html.erb_spec.rb:11:15: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
        name: "Name",
              ^^^^^^
spec/views/committees/index.html.erb_spec.rb:14:6: C: [Correctable] Layout/MultilineMethodCallBraceLayout: Closing method call brace must be on the line after the last argument.
    ])
     ^
spec/views/committees/index.html.erb_spec.rb:17:6: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  it "renders a list of committees" do
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/views/committees/index.html.erb_spec.rb:20:51: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    assert_select cell_selector, text: Regexp.new("Name".to_s), count: 2
                                                  ^^^^^^
spec/views/committees/new.html.erb_spec.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
require 'rails_helper'
^
spec/views/committees/new.html.erb_spec.rb:3:1: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
RSpec.describe "committees/new", type: :view do
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/views/committees/new.html.erb_spec.rb:3:16: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
RSpec.describe "committees/new", type: :view do
               ^^^^^^^^^^^^^^^^
spec/views/committees/new.html.erb_spec.rb:4:3: C: [Correctable] RSpec/HookArgument: Omit the default :each argument for RSpec hooks.
  before(:each) do
  ^^^^^^^^^^^^^
spec/views/committees/new.html.erb_spec.rb:6:7: C: [Correctable] Layout/FirstArgumentIndentation: Indent the first argument one step more than Committee.new(.
      name: "MyString", ...
      ^^^^^^^^^^^^^^^^^
spec/views/committees/new.html.erb_spec.rb:6:13: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      name: "MyString",
            ^^^^^^^^^^
spec/views/committees/new.html.erb_spec.rb:8:6: C: [Correctable] Layout/MultilineMethodCallBraceLayout: Closing method call brace must be on the line after the last argument.
    ))
     ^
spec/views/committees/new.html.erb_spec.rb:11:6: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  it "renders new committee form" do
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/views/committees/new.html.erb_spec.rb:14:19: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    assert_select "form[action=?][method=?]", committees_path, "post" do
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/views/committees/new.html.erb_spec.rb:14:64: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    assert_select "form[action=?][method=?]", committees_path, "post" do
                                                               ^^^^^^
spec/views/committees/new.html.erb_spec.rb:15:1: C: [Correctable] Layout/EmptyLinesAroundBlockBody: Extra empty line detected at block body beginning.
spec/views/committees/new.html.erb_spec.rb:16:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      assert_select "input[name=?]", "committee[name]"
                    ^^^^^^^^^^^^^^^
spec/views/committees/new.html.erb_spec.rb:16:38: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      assert_select "input[name=?]", "committee[name]"
                                     ^^^^^^^^^^^^^^^^^
spec/views/committees/new.html.erb_spec.rb:18:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      assert_select "input[name=?]", "committee[leader_member_id]"
                    ^^^^^^^^^^^^^^^
spec/views/committees/new.html.erb_spec.rb:18:38: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      assert_select "input[name=?]", "committee[leader_member_id]"
                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/views/committees/show.html.erb_spec.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
require 'rails_helper'
^
spec/views/committees/show.html.erb_spec.rb:3:1: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
RSpec.describe "committees/show", type: :view do
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/views/committees/show.html.erb_spec.rb:3:16: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
RSpec.describe "committees/show", type: :view do
               ^^^^^^^^^^^^^^^^^
spec/views/committees/show.html.erb_spec.rb:4:3: C: [Correctable] RSpec/HookArgument: Omit the default :each argument for RSpec hooks.
  before(:each) do
  ^^^^^^^^^^^^^
spec/views/committees/show.html.erb_spec.rb:6:7: C: [Correctable] Layout/FirstArgumentIndentation: Indent the first argument one step more than Committee.create!(.
      name: "Name", ...
      ^^^^^^^^^^^^^
spec/views/committees/show.html.erb_spec.rb:6:13: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      name: "Name",
            ^^^^^^
spec/views/committees/show.html.erb_spec.rb:8:6: C: [Correctable] Layout/MultilineMethodCallBraceLayout: Closing method call brace must be on the line after the last argument.
    ))
     ^
spec/views/committees/show.html.erb_spec.rb:11:6: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  it "renders attributes in <p>" do
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/views/committees/show.html.erb_spec.rb:13:5: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
    expect(rendered).to match(/Name/)
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/views/committees/show.html.erb_spec.rb:14:5: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
    expect(rendered).to match(/2/)
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/views/events/edit.html.erb_spec.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
require 'rails_helper'
^
spec/views/events/edit.html.erb_spec.rb:3:1: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
RSpec.describe "events/edit", type: :view do
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/views/events/edit.html.erb_spec.rb:3:16: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
RSpec.describe "events/edit", type: :view do
               ^^^^^^^^^^^^^
spec/views/events/edit.html.erb_spec.rb:4:15: C: [Correctable] Style/BlockDelimiters: Avoid using {...} for multi-line blocks.
  let(:event) {
              ^
spec/views/events/edit.html.erb_spec.rb:6:13: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      name: "MyString",
            ^^^^^^^^^^
spec/views/events/edit.html.erb_spec.rb:7:24: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      date: Date.parse("01-01-2023"),
                       ^^^^^^^^^^^^
spec/views/events/edit.html.erb_spec.rb:8:19: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      point_type: "MyString",
                  ^^^^^^^^^^
spec/views/events/edit.html.erb_spec.rb:9:19: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      event_type: "MyString",
                  ^^^^^^^^^^
spec/views/events/edit.html.erb_spec.rb:10:15: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      phrase: "MyString"
              ^^^^^^^^^^
spec/views/events/edit.html.erb_spec.rb:14:3: C: [Correctable] RSpec/HookArgument: Omit the default :each argument for RSpec hooks.
  before(:each) do
  ^^^^^^^^^^^^^
spec/views/events/edit.html.erb_spec.rb:18:6: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  it "renders the edit event form" do
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/views/events/edit.html.erb_spec.rb:21:19: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    assert_select "form[action=?][method=?]", event_path(event), "post" do
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/views/events/edit.html.erb_spec.rb:21:66: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    assert_select "form[action=?][method=?]", event_path(event), "post" do
                                                                 ^^^^^^
spec/views/events/edit.html.erb_spec.rb:22:1: C: [Correctable] Layout/EmptyLinesAroundBlockBody: Extra empty line detected at block body beginning.
spec/views/events/edit.html.erb_spec.rb:23:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      assert_select "input[name=?]", "event[name]"
                    ^^^^^^^^^^^^^^^
spec/views/events/edit.html.erb_spec.rb:23:38: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      assert_select "input[name=?]", "event[name]"
                                     ^^^^^^^^^^^^^
spec/views/events/edit.html.erb_spec.rb:25:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      assert_select "select[name=?]", "event[point_type]"
                    ^^^^^^^^^^^^^^^^
spec/views/events/edit.html.erb_spec.rb:25:39: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      assert_select "select[name=?]", "event[point_type]"
                                      ^^^^^^^^^^^^^^^^^^^
spec/views/events/edit.html.erb_spec.rb:27:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      assert_select "select[name=?]", "event[event_type]"
                    ^^^^^^^^^^^^^^^^
spec/views/events/edit.html.erb_spec.rb:27:39: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      assert_select "select[name=?]", "event[event_type]"
                                      ^^^^^^^^^^^^^^^^^^^
spec/views/events/edit.html.erb_spec.rb:29:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      assert_select "input[name=?]", "event[phrase]"
                    ^^^^^^^^^^^^^^^
spec/views/events/edit.html.erb_spec.rb:29:38: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      assert_select "input[name=?]", "event[phrase]"
                                     ^^^^^^^^^^^^^^^
spec/views/events/index.html.erb_spec.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
require 'rails_helper'
^
spec/views/events/index.html.erb_spec.rb:3:1: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
RSpec.describe "events/index", type: :view do
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/views/events/index.html.erb_spec.rb:3:16: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
RSpec.describe "events/index", type: :view do
               ^^^^^^^^^^^^^^
spec/views/events/index.html.erb_spec.rb:4:3: C: [Correctable] RSpec/HookArgument: Omit the default :each argument for RSpec hooks.
  before(:each) do
  ^^^^^^^^^^^^^
spec/views/events/index.html.erb_spec.rb:7:15: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
        name: "Name",
              ^^^^^^
spec/views/events/index.html.erb_spec.rb:8:26: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
        date: Date.parse("01-01-2023"),
                         ^^^^^^^^^^^^
spec/views/events/index.html.erb_spec.rb:9:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
        point_type: "Point Type",
                    ^^^^^^^^^^^^
spec/views/events/index.html.erb_spec.rb:10:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
        event_type: "Event Type",
                    ^^^^^^^^^^^^
spec/views/events/index.html.erb_spec.rb:11:17: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
        phrase: "Phrase"
                ^^^^^^^^
spec/views/events/index.html.erb_spec.rb:14:15: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
        name: "Name",
              ^^^^^^
spec/views/events/index.html.erb_spec.rb:15:26: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
        date: Date.parse("01-01-2023"),
                         ^^^^^^^^^^^^
spec/views/events/index.html.erb_spec.rb:16:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
        point_type: "Point Type",
                    ^^^^^^^^^^^^
spec/views/events/index.html.erb_spec.rb:17:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
        event_type: "Event Type",
                    ^^^^^^^^^^^^
spec/views/events/index.html.erb_spec.rb:18:17: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
        phrase: "Phrase"
                ^^^^^^^^
spec/views/events/index.html.erb_spec.rb:20:6: C: [Correctable] Layout/MultilineMethodCallBraceLayout: Closing method call brace must be on the line after the last argument.
    ])
     ^
spec/views/events/index.html.erb_spec.rb:23:6: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  it "renders a list of events" do
     ^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/views/events/index.html.erb_spec.rb:26:51: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    assert_select cell_selector, text: Regexp.new("Name".to_s), count: 2
                                                  ^^^^^^
spec/views/events/index.html.erb_spec.rb:27:51: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    assert_select cell_selector, text: Regexp.new("Point Type".to_s), count: 2
                                                  ^^^^^^^^^^^^
spec/views/events/index.html.erb_spec.rb:28:51: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    assert_select cell_selector, text: Regexp.new("Event Type".to_s), count: 2
                                                  ^^^^^^^^^^^^
spec/views/events/index.html.erb_spec.rb:29:51: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    assert_select cell_selector, text: Regexp.new("Phrase".to_s), count: 2
                                                  ^^^^^^^^
spec/views/events/new.html.erb_spec.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
require 'rails_helper'
^
spec/views/events/new.html.erb_spec.rb:3:1: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
RSpec.describe "events/new", type: :view do
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/views/events/new.html.erb_spec.rb:3:16: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
RSpec.describe "events/new", type: :view do
               ^^^^^^^^^^^^
spec/views/events/new.html.erb_spec.rb:4:3: C: [Correctable] RSpec/HookArgument: Omit the default :each argument for RSpec hooks.
  before(:each) do
  ^^^^^^^^^^^^^
spec/views/events/new.html.erb_spec.rb:6:7: C: [Correctable] Layout/FirstArgumentIndentation: Indent the first argument one step more than Event.new(.
      name: "MyString", ...
      ^^^^^^^^^^^^^^^^^
spec/views/events/new.html.erb_spec.rb:6:13: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      name: "MyString",
            ^^^^^^^^^^
spec/views/events/new.html.erb_spec.rb:7:19: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      point_type: "MyString",
                  ^^^^^^^^^^
spec/views/events/new.html.erb_spec.rb:8:19: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      event_type: "MyString",
                  ^^^^^^^^^^
spec/views/events/new.html.erb_spec.rb:9:15: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      phrase: "MyString"
              ^^^^^^^^^^
spec/views/events/new.html.erb_spec.rb:10:6: C: [Correctable] Layout/MultilineMethodCallBraceLayout: Closing method call brace must be on the line after the last argument.
    ))
     ^
spec/views/events/new.html.erb_spec.rb:13:6: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  it "renders new event form" do
     ^^^^^^^^^^^^^^^^^^^^^^^^
spec/views/events/new.html.erb_spec.rb:16:19: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    assert_select "form[action=?][method=?]", events_path, "post" do
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/views/events/new.html.erb_spec.rb:16:60: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    assert_select "form[action=?][method=?]", events_path, "post" do
                                                           ^^^^^^
spec/views/events/new.html.erb_spec.rb:17:1: C: [Correctable] Layout/EmptyLinesAroundBlockBody: Extra empty line detected at block body beginning.
spec/views/events/new.html.erb_spec.rb:18:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      assert_select "input[name=?]", "event[name]"
                    ^^^^^^^^^^^^^^^
spec/views/events/new.html.erb_spec.rb:18:38: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      assert_select "input[name=?]", "event[name]"
                                     ^^^^^^^^^^^^^
spec/views/events/new.html.erb_spec.rb:20:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      assert_select "select[name=?]", "event[point_type]"
                    ^^^^^^^^^^^^^^^^
spec/views/events/new.html.erb_spec.rb:20:39: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      assert_select "select[name=?]", "event[point_type]"
                                      ^^^^^^^^^^^^^^^^^^^
spec/views/events/new.html.erb_spec.rb:22:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      assert_select "select[name=?]", "event[event_type]"
                    ^^^^^^^^^^^^^^^^
spec/views/events/new.html.erb_spec.rb:22:39: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      assert_select "select[name=?]", "event[event_type]"
                                      ^^^^^^^^^^^^^^^^^^^
spec/views/events/new.html.erb_spec.rb:24:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      assert_select "input[name=?]", "event[phrase]"
                    ^^^^^^^^^^^^^^^
spec/views/events/new.html.erb_spec.rb:24:38: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      assert_select "input[name=?]", "event[phrase]"
                                     ^^^^^^^^^^^^^^^
spec/views/events/show.html.erb_spec.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
require 'rails_helper'
^
spec/views/events/show.html.erb_spec.rb:3:1: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
RSpec.describe "events/show", type: :view do
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/views/events/show.html.erb_spec.rb:3:16: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
RSpec.describe "events/show", type: :view do
               ^^^^^^^^^^^^^
spec/views/events/show.html.erb_spec.rb:4:3: C: [Correctable] RSpec/HookArgument: Omit the default :each argument for RSpec hooks.
  before(:each) do
  ^^^^^^^^^^^^^
spec/views/events/show.html.erb_spec.rb:6:7: C: [Correctable] Layout/FirstArgumentIndentation: Indent the first argument one step more than Event.create!(.
      name: "Name", ...
      ^^^^^^^^^^^^^
spec/views/events/show.html.erb_spec.rb:6:13: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      name: "Name",
            ^^^^^^
spec/views/events/show.html.erb_spec.rb:7:24: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      date: Date.parse("01-01-2023"),
                       ^^^^^^^^^^^^
spec/views/events/show.html.erb_spec.rb:8:19: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      point_type: "Point Type",
                  ^^^^^^^^^^^^
spec/views/events/show.html.erb_spec.rb:9:19: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      event_type: "Event Type",
                  ^^^^^^^^^^^^
spec/views/events/show.html.erb_spec.rb:10:15: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      phrase: "Phrase"
              ^^^^^^^^
spec/views/events/show.html.erb_spec.rb:11:6: C: [Correctable] Layout/MultilineMethodCallBraceLayout: Closing method call brace must be on the line after the last argument.
    ))
     ^
spec/views/events/show.html.erb_spec.rb:14:6: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  it "renders attributes in <p>" do
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/views/events/show.html.erb_spec.rb:16:5: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
    expect(rendered).to match(/Name/)
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/views/events/show.html.erb_spec.rb:17:5: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
    expect(rendered).to match(/Point Type/)
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/views/events/show.html.erb_spec.rb:18:5: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
    expect(rendered).to match(/Event Type/)
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/views/events/show.html.erb_spec.rb:19:5: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
    expect(rendered).to match(/Phrase/)
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/views/excuses/edit.html.erb_spec.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
require 'rails_helper'
^
spec/views/excuses/edit.html.erb_spec.rb:3:1: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
RSpec.describe "excuses/edit", type: :view do
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/views/excuses/edit.html.erb_spec.rb:3:16: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
RSpec.describe "excuses/edit", type: :view do
               ^^^^^^^^^^^^^^
spec/views/excuses/edit.html.erb_spec.rb:4:16: C: [Correctable] Style/BlockDelimiters: Avoid using {...} for multi-line blocks.
  let(:excuse) {
               ^
spec/views/excuses/edit.html.erb_spec.rb:6:20: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      description: "MyText",
                   ^^^^^^^^
spec/views/excuses/edit.html.erb_spec.rb:11:3: C: [Correctable] RSpec/HookArgument: Omit the default :each argument for RSpec hooks.
  before(:each) do
  ^^^^^^^^^^^^^
spec/views/excuses/edit.html.erb_spec.rb:15:6: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  it "renders the edit excuse form" do
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/views/excuses/edit.html.erb_spec.rb:18:19: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    assert_select "form[action=?][method=?]", excuse_path(excuse), "post" do
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/views/excuses/edit.html.erb_spec.rb:18:68: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    assert_select "form[action=?][method=?]", excuse_path(excuse), "post" do
                                                                   ^^^^^^
spec/views/excuses/edit.html.erb_spec.rb:19:1: C: [Correctable] Layout/EmptyLinesAroundBlockBody: Extra empty line detected at block body beginning.
spec/views/excuses/edit.html.erb_spec.rb:20:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      assert_select "textarea[name=?]", "excuse[description]"
                    ^^^^^^^^^^^^^^^^^^
spec/views/excuses/edit.html.erb_spec.rb:20:41: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      assert_select "textarea[name=?]", "excuse[description]"
                                        ^^^^^^^^^^^^^^^^^^^^^
spec/views/excuses/edit.html.erb_spec.rb:22:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      assert_select "input[name=?]", "excuse[file]"
                    ^^^^^^^^^^^^^^^
spec/views/excuses/edit.html.erb_spec.rb:22:38: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      assert_select "input[name=?]", "excuse[file]"
                                     ^^^^^^^^^^^^^^
spec/views/excuses/index.html.erb_spec.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
require 'rails_helper'
^
spec/views/excuses/index.html.erb_spec.rb:3:1: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
RSpec.describe "excuses/index", type: :view do
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/views/excuses/index.html.erb_spec.rb:3:16: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
RSpec.describe "excuses/index", type: :view do
               ^^^^^^^^^^^^^^^
spec/views/excuses/index.html.erb_spec.rb:4:3: C: [Correctable] RSpec/HookArgument: Omit the default :each argument for RSpec hooks.
  before(:each) do
  ^^^^^^^^^^^^^
spec/views/excuses/index.html.erb_spec.rb:7:22: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
        description: "MyText",
                     ^^^^^^^^
spec/views/excuses/index.html.erb_spec.rb:11:22: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
        description: "MyText",
                     ^^^^^^^^
spec/views/excuses/index.html.erb_spec.rb:14:6: C: [Correctable] Layout/MultilineMethodCallBraceLayout: Closing method call brace must be on the line after the last argument.
    ])
     ^
spec/views/excuses/index.html.erb_spec.rb:17:6: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  it "renders a list of excuses" do
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/views/excuses/index.html.erb_spec.rb:20:51: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    assert_select cell_selector, text: Regexp.new("MyText".to_s), count: 2
                                                  ^^^^^^^^
spec/views/excuses/index.html.erb_spec.rb:21:5: C: [Correctable] Layout/LeadingCommentSpace: Missing space after #.
    #assert_select cell_selector, text: Regexp.new(nil.to_s), count: 2
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/views/excuses/new.html.erb_spec.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
require 'rails_helper'
^
spec/views/excuses/new.html.erb_spec.rb:3:1: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
RSpec.describe "excuses/new", type: :view do
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/views/excuses/new.html.erb_spec.rb:3:16: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
RSpec.describe "excuses/new", type: :view do
               ^^^^^^^^^^^^^
spec/views/excuses/new.html.erb_spec.rb:4:3: C: [Correctable] RSpec/HookArgument: Omit the default :each argument for RSpec hooks.
  before(:each) do
  ^^^^^^^^^^^^^
spec/views/excuses/new.html.erb_spec.rb:6:7: C: [Correctable] Layout/FirstArgumentIndentation: Indent the first argument one step more than Excuse.new(.
      description: "MyText", ...
      ^^^^^^^^^^^^^^^^^^^^^^
spec/views/excuses/new.html.erb_spec.rb:6:20: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      description: "MyText",
                   ^^^^^^^^
spec/views/excuses/new.html.erb_spec.rb:8:6: C: [Correctable] Layout/MultilineMethodCallBraceLayout: Closing method call brace must be on the line after the last argument.
    ))
     ^
spec/views/excuses/new.html.erb_spec.rb:11:6: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  it "renders new excuse form" do
     ^^^^^^^^^^^^^^^^^^^^^^^^^
spec/views/excuses/new.html.erb_spec.rb:14:19: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    assert_select "form[action=?][method=?]", excuses_path, "post" do
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/views/excuses/new.html.erb_spec.rb:14:61: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    assert_select "form[action=?][method=?]", excuses_path, "post" do
                                                            ^^^^^^
spec/views/excuses/new.html.erb_spec.rb:15:1: C: [Correctable] Layout/EmptyLinesAroundBlockBody: Extra empty line detected at block body beginning.
spec/views/excuses/new.html.erb_spec.rb:16:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      assert_select "textarea[name=?]", "excuse[description]"
                    ^^^^^^^^^^^^^^^^^^
spec/views/excuses/new.html.erb_spec.rb:16:41: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      assert_select "textarea[name=?]", "excuse[description]"
                                        ^^^^^^^^^^^^^^^^^^^^^
spec/views/excuses/new.html.erb_spec.rb:18:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      assert_select "input[name=?]", "excuse[file]"
                    ^^^^^^^^^^^^^^^
spec/views/excuses/new.html.erb_spec.rb:18:38: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      assert_select "input[name=?]", "excuse[file]"
                                     ^^^^^^^^^^^^^^
spec/views/excuses/show.html.erb_spec.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
require 'rails_helper'
^
spec/views/excuses/show.html.erb_spec.rb:3:1: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
RSpec.describe "excuses/show", type: :view do
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/views/excuses/show.html.erb_spec.rb:3:16: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
RSpec.describe "excuses/show", type: :view do
               ^^^^^^^^^^^^^^
spec/views/excuses/show.html.erb_spec.rb:4:3: C: [Correctable] RSpec/HookArgument: Omit the default :each argument for RSpec hooks.
  before(:each) do
  ^^^^^^^^^^^^^
spec/views/excuses/show.html.erb_spec.rb:6:7: C: [Correctable] Layout/FirstArgumentIndentation: Indent the first argument one step more than Excuse.create!(.
      description: "MyText", ...
      ^^^^^^^^^^^^^^^^^^^^^^
spec/views/excuses/show.html.erb_spec.rb:6:20: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      description: "MyText",
                   ^^^^^^^^
spec/views/excuses/show.html.erb_spec.rb:8:6: C: [Correctable] Layout/MultilineMethodCallBraceLayout: Closing method call brace must be on the line after the last argument.
    ))
     ^
spec/views/excuses/show.html.erb_spec.rb:11:6: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  it "renders attributes in <p>" do
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/views/excuses/show.html.erb_spec.rb:13:5: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
    expect(rendered).to match(/MyText/)
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/views/excuses/show.html.erb_spec.rb:14:5: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
    expect(rendered).to match(//)
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/views/main/index.html.erb_spec.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
require 'rails_helper'
^
spec/views/main/index.html.erb_spec.rb:3:1: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
RSpec.describe "main/index.html.erb", type: :view do
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/views/main/index.html.erb_spec.rb:3:16: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
RSpec.describe "main/index.html.erb", type: :view do
               ^^^^^^^^^^^^^^^^^^^^^
spec/views/member_events/edit.html.erb_spec.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
require 'rails_helper'
^
spec/views/member_events/edit.html.erb_spec.rb:3:1: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
RSpec.describe "member_events/edit", type: :view do
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/views/member_events/edit.html.erb_spec.rb:3:16: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
RSpec.describe "member_events/edit", type: :view do
               ^^^^^^^^^^^^^^^^^^^^
spec/views/member_events/edit.html.erb_spec.rb:4:1: C: [Correctable] Layout/TrailingWhitespace: Trailing whitespace detected.
spec/views/member_events/edit.html.erb_spec.rb:5:16: C: [Correctable] Style/BlockDelimiters: Avoid using {...} for multi-line blocks.
  let(:member) {
               ^
spec/views/member_events/edit.html.erb_spec.rb:7:13: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      name: "MyName",
            ^^^^^^^^
spec/views/member_events/edit.html.erb_spec.rb:8:18: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      committee: "MyCommittee",
                 ^^^^^^^^^^^^^
spec/views/member_events/edit.html.erb_spec.rb:9:17: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      position: "MyPosition",
                ^^^^^^^^^^^^
spec/views/member_events/edit.html.erb_spec.rb:18:15: C: [Correctable] Style/BlockDelimiters: Avoid using {...} for multi-line blocks.
  let(:event) {
              ^
spec/views/member_events/edit.html.erb_spec.rb:20:13: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      name: "MyString",
            ^^^^^^^^^^
spec/views/member_events/edit.html.erb_spec.rb:21:24: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      date: Date.parse("01-01-2023"),
                       ^^^^^^^^^^^^
spec/views/member_events/edit.html.erb_spec.rb:22:19: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      point_type: "MyString",
                  ^^^^^^^^^^
spec/views/member_events/edit.html.erb_spec.rb:23:19: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      event_type: "MyString",
                  ^^^^^^^^^^
spec/views/member_events/edit.html.erb_spec.rb:24:15: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      phrase: "MyString"
              ^^^^^^^^^^
spec/views/member_events/edit.html.erb_spec.rb:27:1: C: [Correctable] Layout/TrailingWhitespace: Trailing whitespace detected.
spec/views/member_events/edit.html.erb_spec.rb:28:22: C: [Correctable] Style/BlockDelimiters: Avoid using {...} for multi-line blocks.
  let(:member_event) {
                     ^
spec/views/member_events/edit.html.erb_spec.rb:33:19: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      approve_by: "MyString"
                  ^^^^^^^^^^
spec/views/member_events/edit.html.erb_spec.rb:37:3: C: [Correctable] RSpec/HookArgument: Omit the default :each argument for RSpec hooks.
  before(:each) do
  ^^^^^^^^^^^^^
spec/views/member_events/edit.html.erb_spec.rb:43:6: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  it "renders the edit member_event form" do
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/views/member_events/edit.html.erb_spec.rb:46:19: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    assert_select "form[action=?][method=?]", member_event_path(member_event), "post" do
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/views/member_events/edit.html.erb_spec.rb:46:80: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    assert_select "form[action=?][method=?]", member_event_path(member_event), "post" do
                                                                               ^^^^^^
spec/views/member_events/edit.html.erb_spec.rb:47:1: C: [Correctable] Layout/EmptyLinesAroundBlockBody: Extra empty line detected at block body beginning.
spec/views/member_events/edit.html.erb_spec.rb:48:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      assert_select "select[name=?]", "member_event[event_id]"
                    ^^^^^^^^^^^^^^^^
spec/views/member_events/edit.html.erb_spec.rb:48:39: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      assert_select "select[name=?]", "member_event[event_id]"
                                      ^^^^^^^^^^^^^^^^^^^^^^^^
spec/views/member_events/edit.html.erb_spec.rb:50:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      assert_select "select[name=?]", "member_event[member_id]"
                    ^^^^^^^^^^^^^^^^
spec/views/member_events/edit.html.erb_spec.rb:50:39: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      assert_select "select[name=?]", "member_event[member_id]"
                                      ^^^^^^^^^^^^^^^^^^^^^^^^^
spec/views/member_events/edit.html.erb_spec.rb:52:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      assert_select "input[name=?]", "member_event[approved_status]"
                    ^^^^^^^^^^^^^^^
spec/views/member_events/edit.html.erb_spec.rb:52:38: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      assert_select "input[name=?]", "member_event[approved_status]"
                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/views/member_events/edit.html.erb_spec.rb:54:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      assert_select "input[name=?]", "member_event[approve_by]"
                    ^^^^^^^^^^^^^^^
spec/views/member_events/edit.html.erb_spec.rb:54:38: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      assert_select "input[name=?]", "member_event[approve_by]"
                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/views/member_events/index.html.erb_spec.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
require 'rails_helper'
^
spec/views/member_events/index.html.erb_spec.rb:3:1: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
RSpec.describe "member_events/index", type: :view do
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/views/member_events/index.html.erb_spec.rb:3:16: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
RSpec.describe "member_events/index", type: :view do
               ^^^^^^^^^^^^^^^^^^^^^
spec/views/member_events/index.html.erb_spec.rb:4:1: C: [Correctable] Layout/TrailingWhitespace: Trailing whitespace detected.
spec/views/member_events/index.html.erb_spec.rb:5:16: C: [Correctable] Style/BlockDelimiters: Avoid using {...} for multi-line blocks.
  let(:member) {
               ^
spec/views/member_events/index.html.erb_spec.rb:7:13: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      name: "MyName",
            ^^^^^^^^
spec/views/member_events/index.html.erb_spec.rb:8:18: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      committee: "MyCommittee",
                 ^^^^^^^^^^^^^
spec/views/member_events/index.html.erb_spec.rb:9:17: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      position: "MyPosition",
                ^^^^^^^^^^^^
spec/views/member_events/index.html.erb_spec.rb:18:15: C: [Correctable] Style/BlockDelimiters: Avoid using {...} for multi-line blocks.
  let(:event) {
              ^
spec/views/member_events/index.html.erb_spec.rb:20:13: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      name: "MyString",
            ^^^^^^^^^^
spec/views/member_events/index.html.erb_spec.rb:21:24: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      date: Date.parse("01-01-2023"),
                       ^^^^^^^^^^^^
spec/views/member_events/index.html.erb_spec.rb:22:19: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      point_type: "MyString",
                  ^^^^^^^^^^
spec/views/member_events/index.html.erb_spec.rb:23:19: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      event_type: "MyString",
                  ^^^^^^^^^^
spec/views/member_events/index.html.erb_spec.rb:24:15: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      phrase: "MyString"
              ^^^^^^^^^^
spec/views/member_events/index.html.erb_spec.rb:28:3: C: [Correctable] RSpec/HookArgument: Omit the default :each argument for RSpec hooks.
  before(:each) do
  ^^^^^^^^^^^^^
spec/views/member_events/index.html.erb_spec.rb:36:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
        approve_by: "Approve By"
                    ^^^^^^^^^^^^
spec/views/member_events/index.html.erb_spec.rb:42:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
        approve_by: "Approve By"
                    ^^^^^^^^^^^^
spec/views/member_events/index.html.erb_spec.rb:44:6: C: [Correctable] Layout/MultilineMethodCallBraceLayout: Closing method call brace must be on the line after the last argument.
    ])
     ^
spec/views/member_events/index.html.erb_spec.rb:47:6: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  it "renders a list of member_events" do
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/views/member_events/index.html.erb_spec.rb:50:5: C: [Correctable] Layout/LeadingCommentSpace: Missing space after #.
    #assert_select cell_selector, text: Regexp.new(2.to_s), count: 2
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/views/member_events/index.html.erb_spec.rb:51:5: C: [Correctable] Layout/LeadingCommentSpace: Missing space after #.
    #assert_select cell_selector, text: Regexp.new(3.to_s), count: 2
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/views/member_events/index.html.erb_spec.rb:53:51: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    assert_select cell_selector, text: Regexp.new("Approve By".to_s), count: 2
                                                  ^^^^^^^^^^^^
spec/views/member_events/new.html.erb_spec.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
require 'rails_helper'
^
spec/views/member_events/new.html.erb_spec.rb:3:1: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
RSpec.describe "member_events/new", type: :view do
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/views/member_events/new.html.erb_spec.rb:3:16: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
RSpec.describe "member_events/new", type: :view do
               ^^^^^^^^^^^^^^^^^^^
spec/views/member_events/new.html.erb_spec.rb:4:1: C: [Correctable] Layout/TrailingWhitespace: Trailing whitespace detected.
spec/views/member_events/new.html.erb_spec.rb:5:16: C: [Correctable] Style/BlockDelimiters: Avoid using {...} for multi-line blocks.
  let(:member) {
               ^
spec/views/member_events/new.html.erb_spec.rb:7:13: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      name: "MyName",
            ^^^^^^^^
spec/views/member_events/new.html.erb_spec.rb:8:18: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      committee: "MyCommittee",
                 ^^^^^^^^^^^^^
spec/views/member_events/new.html.erb_spec.rb:9:17: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      position: "MyPosition",
                ^^^^^^^^^^^^
spec/views/member_events/new.html.erb_spec.rb:18:15: C: [Correctable] Style/BlockDelimiters: Avoid using {...} for multi-line blocks.
  let(:event) {
              ^
spec/views/member_events/new.html.erb_spec.rb:20:13: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      name: "MyString",
            ^^^^^^^^^^
spec/views/member_events/new.html.erb_spec.rb:21:24: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      date: Date.parse("01-01-2023"),
                       ^^^^^^^^^^^^
spec/views/member_events/new.html.erb_spec.rb:22:19: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      point_type: "MyString",
                  ^^^^^^^^^^
spec/views/member_events/new.html.erb_spec.rb:23:19: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      event_type: "MyString",
                  ^^^^^^^^^^
spec/views/member_events/new.html.erb_spec.rb:24:15: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      phrase: "MyString"
              ^^^^^^^^^^
spec/views/member_events/new.html.erb_spec.rb:28:3: C: [Correctable] RSpec/HookArgument: Omit the default :each argument for RSpec hooks.
  before(:each) do
  ^^^^^^^^^^^^^
spec/views/member_events/new.html.erb_spec.rb:30:7: C: [Correctable] Layout/FirstArgumentIndentation: Indent the first argument one step more than MemberEvent.new(.
      event_id: member.id, ...
      ^^^^^^^^^^^^^^^^^^^^
spec/views/member_events/new.html.erb_spec.rb:33:19: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      approve_by: "MyString"
                  ^^^^^^^^^^
spec/views/member_events/new.html.erb_spec.rb:34:6: C: [Correctable] Layout/MultilineMethodCallBraceLayout: Closing method call brace must be on the line after the last argument.
    ))
     ^
spec/views/member_events/new.html.erb_spec.rb:37:6: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  it "renders new member_event form" do
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/views/member_events/new.html.erb_spec.rb:40:19: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    assert_select "form[action=?][method=?]", member_events_path, "post" do
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/views/member_events/new.html.erb_spec.rb:40:67: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    assert_select "form[action=?][method=?]", member_events_path, "post" do
                                                                  ^^^^^^
spec/views/member_events/new.html.erb_spec.rb:41:1: C: [Correctable] Layout/EmptyLinesAroundBlockBody: Extra empty line detected at block body beginning.
spec/views/member_events/new.html.erb_spec.rb:42:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      assert_select "select[name=?]", "member_event[event_id]"
                    ^^^^^^^^^^^^^^^^
spec/views/member_events/new.html.erb_spec.rb:42:39: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      assert_select "select[name=?]", "member_event[event_id]"
                                      ^^^^^^^^^^^^^^^^^^^^^^^^
spec/views/member_events/new.html.erb_spec.rb:44:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      assert_select "select[name=?]", "member_event[member_id]"
                    ^^^^^^^^^^^^^^^^
spec/views/member_events/new.html.erb_spec.rb:44:39: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      assert_select "select[name=?]", "member_event[member_id]"
                                      ^^^^^^^^^^^^^^^^^^^^^^^^^
spec/views/member_events/new.html.erb_spec.rb:46:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      assert_select "input[name=?]", "member_event[approved_status]"
                    ^^^^^^^^^^^^^^^
spec/views/member_events/new.html.erb_spec.rb:46:38: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      assert_select "input[name=?]", "member_event[approved_status]"
                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/views/member_events/new.html.erb_spec.rb:48:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      assert_select "input[name=?]", "member_event[approve_by]"
                    ^^^^^^^^^^^^^^^
spec/views/member_events/new.html.erb_spec.rb:48:38: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      assert_select "input[name=?]", "member_event[approve_by]"
                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/views/member_events/show.html.erb_spec.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
require 'rails_helper'
^
spec/views/member_events/show.html.erb_spec.rb:3:1: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
RSpec.describe "member_events/show", type: :view do
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/views/member_events/show.html.erb_spec.rb:3:16: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
RSpec.describe "member_events/show", type: :view do
               ^^^^^^^^^^^^^^^^^^^^
spec/views/member_events/show.html.erb_spec.rb:4:1: C: [Correctable] Layout/TrailingWhitespace: Trailing whitespace detected.
spec/views/member_events/show.html.erb_spec.rb:5:16: C: [Correctable] Style/BlockDelimiters: Avoid using {...} for multi-line blocks.
  let(:member) {
               ^
spec/views/member_events/show.html.erb_spec.rb:7:13: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      name: "MyName",
            ^^^^^^^^
spec/views/member_events/show.html.erb_spec.rb:8:18: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      committee: "MyCommittee",
                 ^^^^^^^^^^^^^
spec/views/member_events/show.html.erb_spec.rb:9:17: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      position: "MyPosition",
                ^^^^^^^^^^^^
spec/views/member_events/show.html.erb_spec.rb:18:15: C: [Correctable] Style/BlockDelimiters: Avoid using {...} for multi-line blocks.
  let(:event) {
              ^
spec/views/member_events/show.html.erb_spec.rb:20:13: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      name: "MyString",
            ^^^^^^^^^^
spec/views/member_events/show.html.erb_spec.rb:21:24: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      date: Date.parse("01-01-2023"),
                       ^^^^^^^^^^^^
spec/views/member_events/show.html.erb_spec.rb:22:19: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      point_type: "MyString",
                  ^^^^^^^^^^
spec/views/member_events/show.html.erb_spec.rb:23:19: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      event_type: "MyString",
                  ^^^^^^^^^^
spec/views/member_events/show.html.erb_spec.rb:24:15: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      phrase: "MyString"
              ^^^^^^^^^^
spec/views/member_events/show.html.erb_spec.rb:28:3: C: [Correctable] RSpec/HookArgument: Omit the default :each argument for RSpec hooks.
  before(:each) do
  ^^^^^^^^^^^^^
spec/views/member_events/show.html.erb_spec.rb:32:7: C: [Correctable] Layout/FirstArgumentIndentation: Indent the first argument one step more than MemberEvent.create!(.
      event_id: event.id, ...
      ^^^^^^^^^^^^^^^^^^^
spec/views/member_events/show.html.erb_spec.rb:35:19: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      approve_by: "Approve By"
                  ^^^^^^^^^^^^
spec/views/member_events/show.html.erb_spec.rb:36:6: C: [Correctable] Layout/MultilineMethodCallBraceLayout: Closing method call brace must be on the line after the last argument.
    ))
     ^
spec/views/member_events/show.html.erb_spec.rb:39:6: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  it "renders attributes in <p>" do
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/views/member_events/show.html.erb_spec.rb:41:5: C: [Correctable] Layout/LeadingCommentSpace: Missing space after #.
    #expect(rendered).to match(/2/)
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/views/member_events/show.html.erb_spec.rb:42:5: C: [Correctable] Layout/LeadingCommentSpace: Missing space after #.
    #expect(rendered).to match(/3/)
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/views/member_events/show.html.erb_spec.rb:43:5: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
    expect(rendered).to match(/false/)
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/views/member_events/show.html.erb_spec.rb:44:5: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
    expect(rendered).to match(/Approve By/)
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/views/members/edit.html.erb_spec.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
require 'rails_helper'
^
spec/views/members/edit.html.erb_spec.rb:3:1: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
RSpec.describe "members/edit", type: :view do
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/views/members/edit.html.erb_spec.rb:3:16: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
RSpec.describe "members/edit", type: :view do
               ^^^^^^^^^^^^^^
spec/views/members/edit.html.erb_spec.rb:4:16: C: [Correctable] Style/BlockDelimiters: Avoid using {...} for multi-line blocks.
  let(:member) {
               ^
spec/views/members/edit.html.erb_spec.rb:6:13: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      name: "MyName",
            ^^^^^^^^
spec/views/members/edit.html.erb_spec.rb:7:18: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      committee: "MyCommittee",
                 ^^^^^^^^^^^^^
spec/views/members/edit.html.erb_spec.rb:8:17: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      position: "MyPosition",
                ^^^^^^^^^^^^
spec/views/members/edit.html.erb_spec.rb:17:3: C: [Correctable] RSpec/HookArgument: Omit the default :each argument for RSpec hooks.
  before(:each) do
  ^^^^^^^^^^^^^
spec/views/members/edit.html.erb_spec.rb:21:6: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  it "renders the edit member form" do
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/views/members/edit.html.erb_spec.rb:24:19: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    assert_select "form[action=?][method=?]", member_path(member), "post" do
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/views/members/edit.html.erb_spec.rb:24:68: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    assert_select "form[action=?][method=?]", member_path(member), "post" do
                                                                   ^^^^^^
spec/views/members/edit.html.erb_spec.rb:25:1: C: [Correctable] Layout/EmptyLinesAroundBlockBody: Extra empty line detected at block body beginning.
spec/views/members/edit.html.erb_spec.rb:26:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      assert_select "input[name=?]", "member[name]"
                    ^^^^^^^^^^^^^^^
spec/views/members/edit.html.erb_spec.rb:26:38: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      assert_select "input[name=?]", "member[name]"
                                     ^^^^^^^^^^^^^^
spec/views/members/edit.html.erb_spec.rb:28:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      assert_select "input[name=?]", "member[committee]"
                    ^^^^^^^^^^^^^^^
spec/views/members/edit.html.erb_spec.rb:28:38: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      assert_select "input[name=?]", "member[committee]"
                                     ^^^^^^^^^^^^^^^^^^^
spec/views/members/edit.html.erb_spec.rb:30:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      assert_select "input[name=?]", "member[position]"
                    ^^^^^^^^^^^^^^^
spec/views/members/edit.html.erb_spec.rb:30:38: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      assert_select "input[name=?]", "member[position]"
                                     ^^^^^^^^^^^^^^^^^^
spec/views/members/edit.html.erb_spec.rb:32:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      assert_select "input[name=?]", "member[civicPoints]"
                    ^^^^^^^^^^^^^^^
spec/views/members/edit.html.erb_spec.rb:32:38: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      assert_select "input[name=?]", "member[civicPoints]"
                                     ^^^^^^^^^^^^^^^^^^^^^
spec/views/members/edit.html.erb_spec.rb:34:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      assert_select "input[name=?]", "member[outreachPoints]"
                    ^^^^^^^^^^^^^^^
spec/views/members/edit.html.erb_spec.rb:34:38: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      assert_select "input[name=?]", "member[outreachPoints]"
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
spec/views/members/edit.html.erb_spec.rb:36:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      assert_select "input[name=?]", "member[socialPoints]"
                    ^^^^^^^^^^^^^^^
spec/views/members/edit.html.erb_spec.rb:36:38: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      assert_select "input[name=?]", "member[socialPoints]"
                                     ^^^^^^^^^^^^^^^^^^^^^^
spec/views/members/edit.html.erb_spec.rb:38:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      assert_select "input[name=?]", "member[marketingPoints]"
                    ^^^^^^^^^^^^^^^
spec/views/members/edit.html.erb_spec.rb:38:38: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      assert_select "input[name=?]", "member[marketingPoints]"
                                     ^^^^^^^^^^^^^^^^^^^^^^^^^
spec/views/members/edit.html.erb_spec.rb:40:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      assert_select "input[name=?]", "member[totalPoints]"
                    ^^^^^^^^^^^^^^^
spec/views/members/edit.html.erb_spec.rb:40:38: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      assert_select "input[name=?]", "member[totalPoints]"
                                     ^^^^^^^^^^^^^^^^^^^^^
spec/views/members/edit.html.erb_spec.rb:41:1: C: [Correctable] Layout/EmptyLinesAroundBlockBody: Extra empty line detected at block body end.
spec/views/members/edit.html.erb_spec.rb:44:4: C: [Correctable] Layout/TrailingEmptyLines: Final newline missing.
end
   
spec/views/members/index.html.erb_spec.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
require 'rails_helper'
^
spec/views/members/index.html.erb_spec.rb:3:1: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
RSpec.describe "members/index", type: :view do
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/views/members/index.html.erb_spec.rb:3:16: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
RSpec.describe "members/index", type: :view do
               ^^^^^^^^^^^^^^^
spec/views/members/index.html.erb_spec.rb:4:1: C: [Correctable] Layout/EmptyLinesAroundBlockBody: Extra empty line detected at block body beginning.
spec/views/members/index.html.erb_spec.rb:5:3: C: [Correctable] RSpec/HookArgument: Omit the default :each argument for RSpec hooks.
  before(:each) do
  ^^^^^^^^^^^^^
spec/views/members/index.html.erb_spec.rb:8:15: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
        name: "MyString"
              ^^^^^^^^^^
spec/views/members/index.html.erb_spec.rb:11:15: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
        name: "MyString"
              ^^^^^^^^^^
spec/views/members/index.html.erb_spec.rb:13:6: C: [Correctable] Layout/MultilineMethodCallBraceLayout: Closing method call brace must be on the line after the last argument.
    ])
     ^
spec/views/members/index.html.erb_spec.rb:16:6: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  it "renders a list of member_events" do
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/views/members/index.html.erb_spec.rb:19:51: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    assert_select cell_selector, text: Regexp.new("MyString".to_s), count: 2
                                                  ^^^^^^^^^^
spec/views/members/index.html.erb_spec.rb:21:4: C: [Correctable] Layout/TrailingEmptyLines: Final newline missing.
end
   
spec/views/members/new.html.erb_spec.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
require 'rails_helper'
^
spec/views/members/new.html.erb_spec.rb:3:1: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
RSpec.describe "members/new", type: :view do
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/views/members/new.html.erb_spec.rb:3:16: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
RSpec.describe "members/new", type: :view do
               ^^^^^^^^^^^^^
spec/views/members/new.html.erb_spec.rb:4:3: C: [Correctable] RSpec/HookArgument: Omit the default :each argument for RSpec hooks.
  before(:each) do
  ^^^^^^^^^^^^^
spec/views/members/new.html.erb_spec.rb:6:7: C: [Correctable] Layout/FirstArgumentIndentation: Indent the first argument one step more than Member.new(.
      name: "MyName", ...
      ^^^^^^^^^^^^^^^
spec/views/members/new.html.erb_spec.rb:6:13: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      name: "MyName",
            ^^^^^^^^
spec/views/members/new.html.erb_spec.rb:7:18: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      committee: "MyCommittee",
                 ^^^^^^^^^^^^^
spec/views/members/new.html.erb_spec.rb:8:17: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      position: "MyPosition",
                ^^^^^^^^^^^^
spec/views/members/new.html.erb_spec.rb:14:6: C: [Correctable] Layout/MultilineMethodCallBraceLayout: Closing method call brace must be on the line after the last argument.
    ))
     ^
spec/views/members/new.html.erb_spec.rb:17:6: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  it "renders new member form" do
     ^^^^^^^^^^^^^^^^^^^^^^^^^
spec/views/members/new.html.erb_spec.rb:20:19: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    assert_select "form[action=?][method=?]", members_path, "post" do
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/views/members/new.html.erb_spec.rb:20:61: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    assert_select "form[action=?][method=?]", members_path, "post" do
                                                            ^^^^^^
spec/views/members/new.html.erb_spec.rb:21:1: C: [Correctable] Layout/EmptyLinesAroundBlockBody: Extra empty line detected at block body beginning.
spec/views/members/new.html.erb_spec.rb:22:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      assert_select "input[name=?]", "member[name]"
                    ^^^^^^^^^^^^^^^
spec/views/members/new.html.erb_spec.rb:22:38: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      assert_select "input[name=?]", "member[name]"
                                     ^^^^^^^^^^^^^^
spec/views/members/new.html.erb_spec.rb:24:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      assert_select "input[name=?]", "member[committee]"
                    ^^^^^^^^^^^^^^^
spec/views/members/new.html.erb_spec.rb:24:38: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      assert_select "input[name=?]", "member[committee]"
                                     ^^^^^^^^^^^^^^^^^^^
spec/views/members/new.html.erb_spec.rb:26:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      assert_select "input[name=?]", "member[position]"
                    ^^^^^^^^^^^^^^^
spec/views/members/new.html.erb_spec.rb:26:38: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      assert_select "input[name=?]", "member[position]"
                                     ^^^^^^^^^^^^^^^^^^
spec/views/members/new.html.erb_spec.rb:28:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      assert_select "input[name=?]", "member[civicPoints]"
                    ^^^^^^^^^^^^^^^
spec/views/members/new.html.erb_spec.rb:28:38: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      assert_select "input[name=?]", "member[civicPoints]"
                                     ^^^^^^^^^^^^^^^^^^^^^
spec/views/members/new.html.erb_spec.rb:30:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      assert_select "input[name=?]", "member[outreachPoints]"
                    ^^^^^^^^^^^^^^^
spec/views/members/new.html.erb_spec.rb:30:38: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      assert_select "input[name=?]", "member[outreachPoints]"
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
spec/views/members/new.html.erb_spec.rb:32:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      assert_select "input[name=?]", "member[socialPoints]"
                    ^^^^^^^^^^^^^^^
spec/views/members/new.html.erb_spec.rb:32:38: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      assert_select "input[name=?]", "member[socialPoints]"
                                     ^^^^^^^^^^^^^^^^^^^^^^
spec/views/members/new.html.erb_spec.rb:34:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      assert_select "input[name=?]", "member[marketingPoints]"
                    ^^^^^^^^^^^^^^^
spec/views/members/new.html.erb_spec.rb:34:38: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      assert_select "input[name=?]", "member[marketingPoints]"
                                     ^^^^^^^^^^^^^^^^^^^^^^^^^
spec/views/members/new.html.erb_spec.rb:36:21: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      assert_select "input[name=?]", "member[totalPoints]"
                    ^^^^^^^^^^^^^^^
spec/views/members/new.html.erb_spec.rb:36:38: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
      assert_select "input[name=?]", "member[totalPoints]"
                                     ^^^^^^^^^^^^^^^^^^^^^
spec/views/members/new.html.erb_spec.rb:37:1: C: [Correctable] Layout/TrailingWhitespace: Trailing whitespace detected.
spec/views/members/show.html.erb_spec.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
require 'rails_helper'
^
spec/views/members/show.html.erb_spec.rb:3:1: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
RSpec.describe "members/show", type: :view do
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/views/members/show.html.erb_spec.rb:3:16: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
RSpec.describe "members/show", type: :view do
               ^^^^^^^^^^^^^^
spec/views/members/show.html.erb_spec.rb:4:3: C: [Correctable] RSpec/HookArgument: Omit the default :each argument for RSpec hooks.
  before(:each) do
  ^^^^^^^^^^^^^
spec/views/members/show.html.erb_spec.rb:6:9: C: [Correctable] Layout/FirstArgumentIndentation: Indent the first argument one step more than Member.create!(.
        name: "MyName", ...
        ^^^^^^^^^^^^^^^
spec/views/members/show.html.erb_spec.rb:6:15: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
        name: "MyName",
              ^^^^^^^^
spec/views/members/show.html.erb_spec.rb:7:20: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
        committee: "MyCommittee",
                   ^^^^^^^^^^^^^
spec/views/members/show.html.erb_spec.rb:8:19: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
        position: "MyPosition",
                  ^^^^^^^^^^^^
spec/views/members/show.html.erb_spec.rb:14:5: C: [Correctable] Layout/ClosingParenthesisIndentation: Indent ) to column 6 (not 4)
    ))
    ^
spec/views/members/show.html.erb_spec.rb:14:6: C: [Correctable] Layout/MultilineMethodCallBraceLayout: Closing method call brace must be on the line after the last argument.
    ))
     ^
spec/views/members/show.html.erb_spec.rb:17:6: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
  it "renders attributes" do
     ^^^^^^^^^^^^^^^^^^^^
spec/views/members/show.html.erb_spec.rb:19:5: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
    expect(rendered).to match(/MyName/)
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/views/members/show.html.erb_spec.rb:20:5: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
    expect(rendered).to match(/MyCommittee/)
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/views/members/show.html.erb_spec.rb:21:5: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
    expect(rendered).to match(/MyPosition/)
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/views/members/show.html.erb_spec.rb:22:5: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
    expect(rendered).to match(/0/)
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/views/members/show.html.erb_spec.rb:23:5: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
    expect(rendered).to match(/1/)
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/views/members/show.html.erb_spec.rb:24:5: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
    expect(rendered).to match(/2/)
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/views/members/show.html.erb_spec.rb:25:5: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
    expect(rendered).to match(/3/)
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/views/members/show.html.erb_spec.rb:26:5: C: [Correctable] Style/MethodCallWithArgsParentheses: Use parentheses for method calls with arguments.
    expect(rendered).to match(/4/)
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/views/members/show.html.erb_spec.rb:28:4: C: [Correctable] Layout/TrailingEmptyLines: Final newline missing.
end
   

101 files inspected, 1943 offenses detected, 1842 offenses autocorrectable
